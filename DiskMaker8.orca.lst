ORCA/M ASM6502 V4.1                     28 Aug 23 21:44 
 

0001 0000                         Printer On 
0002 002000 0000                         AbsAddr On 
0003 002000 0000                         65C02   On 
0004 002000 0000                         Symbol  On 
0005 002000 0000                         InsTime Off 
0006 002000 0000               
0007 002000 0000              ********************************************** 
0008 002000 0000              *                                            * 
0009 002000 0000              *          Program : DiskMaker 8             * 
0010 002000 0000              *          Author  : Mark Percival           * 
0011 002000 0000              *          Date    : January 2006            * 
0012 002000 0000              *          Version : 1.1                     * 
0013 002000 0000              *                                            * 
0014 002000 0000              ********************************************** 
0015 002000 0000               
0016 002000 0000                         Keep  DiskMaker8 
0017 002000 0000               
0018 002000 0000                         List On 
0019 002000 0000               
0020 002000 0000              *          Global Variables 
0021 002000 0000               
0022 002000 0000                         Copy GlobalVars.s 
0023 002000 0000              *          Global variables definition 
0024 002000 0000               
0025 002000 0000              GlobalVars Data 
0026 002000 0000               
0027 002000 0000              *          Zero Page 
0028 002000 0000               
0029 002000 0000              Ptr1       gequ $06 
0030 002000 0000              MousePtr   gequ $08 
0031 002000 0000              WndLeft    gequ $20 
0032 002000 0000              WndWidth   gequ $21 
0033 002000 0000              WndTop     gequ $22 
0034 002000 0000              WndBottom  gequ $23 
0035 002000 0000              HTab       gequ $24 
0036 002000 0000              VTab       gequ $25 
0037 002000 0000              Ptr2       gequ $80 
0038 002000 0000              Ptr3       gequ $82 
0039 002000 0000              MsgPtr     gequ $82 
0040 002000 0000              acc        gequ $84 
0041 002000 0000              aux        gequ $86 
0042 002000 0000              ext        gequ $88 
0043 002000 0000              TextPtr    gequ $8A 
0044 002000 0000               
0045 002000 0000              *          C0xx Softswitches 
0046 002000 0000               
0047 002000 0000              Keyboard   gequ $C000 
0048 002000 0000              ClearKbd   gequ $C010 
0049 002000 0000              AppleKey   gequ $C061 
0050 002000 0000              OptionKey  gequ $C062 
0051 002000 0000               
0052 002000 0000              *          C3xx 80 Column Firmware Stuff 
0053 002000 0000               
0054 002000 0000              Init80     gequ $C300 
0055 002000 0000              MouseText  gequ $1B 
0056 002000 0000              StdText    gequ $18 
0057 002000 0000              Inverse    gequ $0F 
0058 002000 0000              Normal     gequ $0E 
0059 002000 0000               
0060 002000 0000              *          Standard ROM Entry Points 
0061 002000 0000               
0062 002000 0000              *cout      gequ $FDED                   Standard character print routine 
0063 002000 0000              Home       gequ $FC58                   Clear screen routine 
0064 002000 0000              PrByte     gequ $FDDA                   Print a hexadecimal byte. 
0065 002000 0000              PrHex      gequ $FDE3                   Print a hexadecimal digit. 
0066 002000 0000              *SetInv    gequ $FE80                   Set cout for inverse text 
0067 002000 0000              *SetNorm   gequ $FE84                   Set cout for normal text 
0068 002000 0000              *SetVTab   gequ $FC22 
0069 002000 0000              Wait       gequ $FCA8                   Wait entry point. 
0070 002000 0000               
0071 002000 0000              *          MLI Vars 
0072 002000 0000               
0073 002000 0000              Prefix     gequ $0800 - $083F           Current Prefix 
0074 002000 0000              Path       gequ $0840 - $087F           Current file (with or without prefix) 
0075 002000 0000              FileType   gequ $0880 - $0880           Current file type 
0076 002000 0000              AuxType    gequ $0881 - $0882           Current file aux type 
0077 002000 0000              NetDevCnt  gequ $08DE - $08DE           Number of Appleshare volumes 
0078 002000 0000              NetDevs    gequ $08DF - $08EC           Unit no's of Appleshare volumes 
0079 002000 0000              wrblkUnit  gequ $08ED - $08ED           MLI write block unit number 
0080 002000 0000              wrblkBlockNum gequ $08EE - $08EF        MLI write block block number 
0081 002000 0000              setMarkRef gequ $08F0 - $08F0           Set mark reference number 
0082 002000 0000              setMarkPos gequ $08F1 - $08F3           3 byte value of mark position. 
0083 002000 0000              geteofEOF  gequ $08F4 - $08F6           3 byte value of file size. 
0084 002000 0000              onlineUnit gequ $08F7 - $08F7           1 byte Unit Number for OnLine call 
0085 002000 0000              readReques gequ $08F8 - $08F9           Number of bytes to read 
0086 002000 0000              readTrans  gequ $08FA - $08FB           Number of bytes actually read 
0087 002000 0000              openRef1   gequ $08FC - $08FC           File open reference number 
0088 002000 0000              readRef    gequ $08FD - $08FD           File read reference number 
0089 002000 0000              geteofRef  gequ $08FE - $08FE           GetEOF reference number 
0090 002000 0000              closeRef   gequ $08FF - $08FF           File close reference number 
0091 002000 0000              openBuf1   gequ $0900 - $0AFF           512 byte buffer for file open 
0092 002000 0000              Buffer512  gequ $0900 - $0AFF           512 byte buffer. 
0093 002000 0000              onlineBuf  gequ $0B00 - $0BFF           256 byte buffer for OnLine call 
0094 002000 0000              readBuf    gequ $1000 - $11FF           512 byte read data buffer 
0095 002000 0000              readBufE   gequ $1200                   Ending address of readBuf 
0096 002000 0000              wrblkDataBuf gequ $1400 - $15FF         MLI write block 512 byte data buffer 
0097 002000 0000              Buf512A    gequ $1400 - $14FF           First 256 bytes 
0098 002000 0000              Buf512B    gequ $1500 - $15FF           Second 256 bytes. 
0099 002000 0000               
0100 002000 0000              *          Misc. Vars 
0101 002000 0000               
0102 002000 0000              TextMode   gequ $0883 - $0883           Used by Menu1 for selected file 
0103 002000 0000              MessageBuf gequ $1200 - $13FF           512 byte save area for MessageBox 
0104 002000 0000               
0105 002000 0000              *          AuxMove declarations 
0106 002000 0000               
0107 002000 0000              A1L        gequ $3C                     Source starting address      - low byte 
0108 002000 0000              A1H        gequ $3D                     Source starting address      - high byte 
0109 002000 0000              A2L        gequ $3E                     Source ending address        - low byte 
0110 002000 0000              A2H        gequ $3F                     Source ending address        - high byte 
0111 002000 0000              A4L        gequ $42                     Destination starting address - low byte 
0112 002000 0000              A4H        gequ $43                     Destination starting address - high byte 
0113 002000 0000              AuxMove    gequ $C311                   AuxMove entry point 
0114 002000 0000               
0115 002000 0000              *          Apple Mouse 
0116 002000 0000               
0117 002000 0000              MouseX     gequ $0884 - $0885           Mouse absolute X 
0118 002000 0000              MouseY     gequ $0886 - $0887           Mouse absolute Y 
0119 002000 0000              LowClamp   gequ $0888 - $0889           Low clamping value 
0120 002000 0000              HighClamp  gequ $088A - $088B           High clamping value 
0121 002000 0000               
0122 002000 0000              MouseStat  gequ $088C - $088C           Button 0/1 interrupt status byte 
0123 002000 0000              MouseMode  gequ $088D - $088D           Mode Byte 
0124 002000 0000               
0125 002000 0000              * MouseStat bits 
0126 002000 0000               
0127 002000 0000              MouseMove  gequ %00100000               X/Y moved since last ReadMouse 
0128 002000 0000              PrevButton gequ %01000000               Previously button was up (0) or down (1) 
0129 002000 0000              CurrButton gequ %10000000               Currently button was up (0) or down (1) 
0130 002000 0000               
0131 002000 0000                         End 
0132 002000 0000               
0133 002000 0000              *          Main Line 
0134 002000 0000                         Copy Main.s 
0135 002000 0000              Main       Start 
0136 002000 0000               
0137 002000 0000              *          M a i n 
0138 002000 0000               
0139 002000 0000 A2 FF                   ldx  #$FF 
0140 002002 0002 9A                      txs                          Reset stack 
0141 002003 0003               
0142 002003 0003 20 00 80                jsr  SystemCheck 
0143 002006 0006 B0 09                   bcs  Exit 
0144 002008 0008               
0145 002008 0008 20 00 80                jsr  Initialize 
0146 00200B 000B               
0147 00200B 000B 20 00 80                jsr  Menu1 
0148 00200E 000E               
0149 00200E 000E 20 00 80                jsr  Cleanup 
0150 002011 0011               
0151 002011 0011              Exit       anop 
0152 002011 0011               
0153 002011 0011 4C 00 80                jmp  MLIQuit 
0154 002014 0014               
0155 002014 0014                         End 
 
 
 
Local  Symbols
 
EXIT       000011   
0156 002014 0000               
0157 002014 0000                         Copy Initialize.s 
0158 002014 0000              Initialize Start 
0159 002014 0000               
0160 002014 0000 20 00 80                jsr  RamOut                  Remove slot 3, drive 2 /RAM drive 
0161 002017 0003               
0162 002017 0003 20 00 80                jsr  FindMouse               See if Apple mouse card installed 
0163 00201A 0006               
0164 00201A 0006 A9 01                   lda  #$01                    Mouse mode enabled, no interrupts 
0165 00201C 0008 20 00 80                jsr  SetMouse 
0166 00201F 000B               
0167 00201F 000B 20 00 80                jsr  InitMouse 
0168 002022 000E               
0169 002022 000E 9C 88 08                stz  LowClamp                Set X axis 
0170 002025 0011 9C 89 08                stz  LowClamp+1              0 low value for x axis 
0171 002028 0014 A9 4F                   lda  #79 
0172 00202A 0016 8D 8A 08                sta  HighClamp               79 high value for x axis 
0173 00202D 0019 9C 8B 08                stz  HighClamp+1 
0174 002030 001C A9 00                   lda  #0 
0175 002032 001E 0E 8A 08                asl  HighClamp               Multilpy high clamp by 2 to extend range 
0176 002035 0021 20 00 80                jsr  ClampMouse              from 0-79 to 0-158 to aid mouse control. 
0177 002038 0024               
0178 002038 0024 9C 88 08                stz  LowClamp                Set Y axis 
0179 00203B 0027 9C 89 08                stz  LowClamp+1              0 low value for y axis 
0180 00203E 002A A9 17                   lda  #23 
0181 002040 002C 8D 8A 08                sta  HighClamp               23 high value for y axiz 
0182 002043 002F 9C 8B 08                stz  HighClamp+1 
0183 002046 0032 A9 01                   lda  #1 
0184 002048 0034 0E 8A 08                asl  HighClamp               Multiply high cmap by 2 to extend range 
0185 00204B 0037 20 00 80                jsr  ClampMouse              from 0-23 to 0-46 to aid mouse control. 
0186 00204E 003A               
0187 00204E 003A A9 01                   lda  #$01                    Mouse mode enabled, no interrupts 
0188 002050 003C 20 00 80                jsr  SetMouse 
0189 002053 003F               
0190 002053 003F 20 00 80                jsr  ReadMouse               Priming read 
0191 002056 0042 4E 84 08                lsr  MouseX                  Divide by 2 to return to the 
0192 002059 0045 4E 86 08                lsr  MouseY                  0 to 79, 0 to 23 range. 
0193 00205C 0048               
0194 00205C 0048 20 00 80                jsr  SetBackGrnd             Set basic program background 
0195 00205F 004B               
0196 00205F 004B 20 00 80                jsr  MLIGetPrefix            Get default prefix 
0197 002062 004E               
0198 002062 004E 20 5D 00                jsr  Network                 See if network volumes are present. 
0199 002065 0051               
0200 002065 0051 AD 8F 00                lda  Entries 
0201 002068 0054 8D DE 08                sta  NetDevCnt 
0202 00206B 0057 F0 03                   beq  NoNetwork 
0203 00206D 0059               
0204 00206D 0059 20 90 00                jsr  NetUnitNo 
0205 002070 005C               
0206 002070 005C              NoNetwork  anop 
0207 002070 005C               
0208 002070 005C 60                      rts 
0209 002071 005D               
0210 002071 005D              * Save Appleshare volume data 
0211 002071 005D               
0212 002071 005D A9 04        Network    lda  #$04                    Require at least ProDOS 8 1.4 
0213 002073 005F CD FF BF                cmp  $BFFF                   KVERSION (ProDOS 8 version) 
0214 002076 0062 F0 06                   beq  MoreNetwork             Have to check further 
0215 002078 0064 A9 01                   lda  #$01                    Simulate bad command error 
0216 00207A 0066 B0 19                   bcs  Error                   If 3 or less, no possibility of network 
0217 00207C 0068 90 0E                   bcc  NetCall 
0218 00207E 006A               
0219 00207E 006A AD 02 BF     MoreNetwork lda $BF02                   High byte of the MLI entry point 
0220 002081 006D 29 0F                   and  #$0F                    Strip off the low nibble 
0221 002083 006F C9 C0                   cmp  #$C0                    Is the entry point in the $Cn00 space? 
0222 002085 0071 F0 05                   beq  NetCall                 Yes, so try AppleTalk 
0223 002087 0073 A9 01                   lda  #$01 
0224 002089 0075 38                      sec 
0225 00208A 0076 B0 09                   bcs  Error                   Simulate bad command error 
0226 00208C 0078               
0227 00208C 0078 20 00 BF     NetCall    jsr  $BF00                   ProDOS MLI 
0228 00208F 007B 42                      dc   h'42'                   AppleTalk command number 
0229 002090 007C 85 00                   dc   a'ParamAddr'            Address of Parameter table 
0230 002092 007E B0 01                   bcs  Error 
0231 002094 0080               
0232 002094 0080 60                      rts 
0233 002095 0081               
0234 002095 0081 9C 8F 00     Error      stz  Entries 
0235 002098 0084               
0236 002098 0084 60                      rts 
0237 002099 0085               
0238 002099 0085 00           ParamAddr  dc   h'00'                   Async Flag (0 means synchronous only) 
0239 00209A 0086 2F                      dc   h'2F'                   command for FIListSessions 
0240 00209B 0087 00 00        ResultCode dc   h'00 00'                AppleTalk result code returned here 
0241 00209D 0089 C0 01                   dc   i'448'                  Length of the buffer supplied 
0242 00209F 008B 00 10                   dc   a'readBuf'              Low word of pointer to buffer 
0243 0020A1 008D 00 00                   dc   h'00 00'                high work of pointer to buffer 
0244 0020A3 008F 00           Entries    dc   h'00'                   Number of entries returned 
0245 0020A4 0090               
0246 0020A4 0090               
0247 0020A4 0090              NetUnitNo  anop 
0248 0020A4 0090               
0249 0020A4 0090 A2 00                   ldx  #$00                    Number of entries to process 
0250 0020A6 0092 A0 01                   ldy  #$01                    Unitno offset 
0251 0020A8 0094               
0252 0020A8 0094 A9 00                   lda  #readBuf                Setup pointer to buffer. 
0253 0020AA 0096 85 06                   sta  Ptr1 
0254 0020AC 0098 A9 10                   lda  #>readBuf+1 
0255 0020AE 009A 85 07                   sta  Ptr1+1 
0256 0020B0 009C               
0257 0020B0 009C B1 06        Loop1      lda  (Ptr1),y 
0258 0020B2 009E 29 F0                   and  #$F0                    Keep only high nibble 
0259 0020B4 00A0 9D DF 08                sta  NetDevs,x 
0260 0020B7 00A3               
0261 0020B7 00A3 18                      clc                          Move to next entry address. 
0262 0020B8 00A4 A5 06                   lda  Ptr1 
0263 0020BA 00A6 69 20                   adc  #32                     32 byte entry length 
0264 0020BC 00A8 85 06                   sta  Ptr1 
0265 0020BE 00AA A5 07                   lda  Ptr1+1 
0266 0020C0 00AC 69 00                   adc  #0 
0267 0020C2 00AE 85 07                   sta  Ptr1+1 
0268 0020C4 00B0               
0269 0020C4 00B0 E8                      inx 
0270 0020C5 00B1 EC 8F 00                cpx  Entries 
0271 0020C8 00B4 90 E6                   bcc  Loop1 
0272 0020CA 00B6               
0273 0020CA 00B6 A9 00                   lda  #$00 
0274 0020CC 00B8               
0275 0020CC 00B8 9D DF 08     Loop2      sta  NetDevs,x               Zero out remaining table entries. 
0276 0020CF 00BB E8                      inx 
0277 0020D0 00BC E0 0F                   cpx  #15 
0278 0020D2 00BE 90 F8                   bcc  Loop2 
0279 0020D4 00C0               
0280 0020D4 00C0 60                      rts 
0281 0020D5 00C1               
0282 0020D5 00C1                         End 
 
 
 
Local  Symbols
 
ENTRIES    00008F  ERROR      000081  LOOP1      00009C  LOOP2      0000B8   
MORENETWOR 00006A  NETCALL    000078  NETUNITNO  000090  NETWORK    00005D   
NONETWORK  00005C  PARAMADDR  000085  RESULTCODE 000087   
0283 0020D5 0000                         Copy Ram.In.Out.s 
0284 0020D5 0000              * 
0285 0020D5 0000              *  Disconnect / connect /RAM from ProDOS Technical Reference 
0286 0020D5 0000              * 
0287 0020D5 0000               
0288 0020D5 0000              RamOut     Start 
0289 0020D5 0000               
0290 0020D5 0000              * Configuration device list by device number 
0291 0020D5 0000              * access order is last in list first. 
0292 0020D5 0000               
0293 0020D5 0000              RamSlot    equ  $BF26                   Slot 3, Drive 2 is /RAM's driver vector 
0294 0020D5 0000              DevNum     equ  $BF30                   Most recent accessed device 
0295 0020D5 0000              DevCnt     equ  $BF31                   Global page device count 
0296 0020D5 0000              DevLst     equ  $BF32 - $BF3F           Global page device list 
0297 0020D5 0000              MemTabl    equ  $BF58 - $BF6F           Memory map for lower 48K. 
0298 0020D5 0000              MachID     equ  $BF98                   Global page machine ID byte 
0299 0020D5 0000               
0300 0020D5 0000              * NoDev is the global page slot zero, drive 1 disk drive vector. 
0301 0020D5 0000              * It is reserved for use as the "No Device Connected" vector 
0302 0020D5 0000               
0303 0020D5 0000              NoDev      equ  $BF10 
0304 0020D5 0000               
0305 0020D5 0000 08                      php                          Save status and 
0306 0020D6 0001 78                      sei                           make sure interrupts are off! 
0307 0020D7 0002               
0308 0020D7 0002              * First think to do is to see of there is a /RAM to disconnect! 
0309 0020D7 0002               
0310 0020D7 0002 AD 98 BF                lda  MachId                  Load the machine ID byte 
0311 0020DA 0005 29 30                   and  #$30                     to check for a 128K system. 
0312 0020DC 0007 C9 30                   cmp  #$30                    Is it 128K? 
0313 0020DE 0009 D0 4D                   bne  RO9                     If not, then branch since no /RAM! 
0314 0020E0 000B               
0315 0020E0 000B AD 26 BF                lda  RamSlot                 It is 128K; Is a device there? 
0316 0020E3 000E CD 10 BF                cmp  NoDev                   Compare with low byte of NoDev 
0317 0020E6 0011 D0 08                   bne  RO1                     Branch if not equal, device is connected 
0318 0020E8 0013 AD 27 BF                lda  RamSlot+1               Check hi byte for match 
0319 0020EB 0016 CD 11 BF                cmp  NoDev+1                 Are we connected? 
0320 0020EE 0019 F0 3D                   beq  RO9 
0321 0020F0 001B               
0322 0020F0 001B              * At this point /RAM (or some other device) is connected in 
0323 0020F0 001B              * the slot 3, drive 2 vector.  Now we must go through the device 
0324 0020F0 001B              * list and find the slot 3, drive 2 unit number of /RAM ($BF) 
0325 0020F0 001B              * The actual unit number, (that is to say 'device') that will 
0326 0020F0 001B              * be removed will be $BF, $BB, $B7, $B3.  /RAM's device number 
0327 0020F0 001B              * is $BF.  Thus this convention will allow other devices that 
0328 0020F0 001B              * do not necessarily resemble (or in fact, are completely different 
0329 0020F0 001B              * from) /RAM to remain intact in the system. 
0330 0020F0 001B               
0331 0020F0 001B AC 31 BF     RO1        ldy  DevCnt                  Get the number of devices online 
0332 0020F3 001E B9 32 BF     RO2        lda  DevLst,y                Start looking for /RAM or facsimile 
0333 0020F6 0021 29 F3                   and  #$F3                    looking for $BF, $BB, $B7, $B3 
0334 0020F8 0023 C9 B3                   cmp  #$B3                    Is device number in ($BF,$BB,$B7,$B3)? 
0335 0020FA 0025 F0 05                   beq  RO3                     Branch if found.. 
0336 0020FC 0027 88                      dey                          Otherwise check out the next unit #. 
0337 0020FD 0028 10 F4                   bpl  RO2                     Branch unless you run out of units 
0338 0020FF 002A 30 2C                   bmi  RO9                     Since you have run out of units 
0339 002101 002C B9 32 BF     RO3        lda  DevLst,y                Get the original unit number back 
0340 002104 002F 8D 5C 00                sta  RamUnitId               and save it off for later restoration. 
0341 002107 0032               
0342 002107 0032              * Now we must remove the unit from the device list by bubbling 
0343 002107 0032              * up the trainling units. 
0344 002107 0032               
0345 002107 0032 B9 33 BF     RO4        lda  DevLst+1,y              Get the next unit number 
0346 00210A 0035 99 32 BF                sta  DevLst,y                and move it up. 
0347 00210D 0038 F0 03                   beq  RO5                     Branch when done(zeros trail the DevLst) 
0348 00210F 003A C8                      iny                          Continue to the next unit number... 
0349 002110 003B D0 F5                   bne  RO4                     Branch always. 
0350 002112 003D               
0351 002112 003D AD 26 BF     RO5        lda  RamSlot                 Save slot 3, drive 2 device address. 
0352 002115 0040 8D 5A 00                sta  Address                 Save off low byte of /RAM driver adress 
0353 002118 0043 AD 27 BF                lda  RamSlot+1               Save off hi byte 
0354 00211B 0046 8D 5B 00                sta  Address+1 
0355 00211E 0049 AD 10 BF                lda  NoDev                   Finally copy the 'No Device Connected' 
0356 002121 004C 8D 26 BF                sta  RamSlot                 into the slot 3, drive 3 vector and 
0357 002124 004F AD 11 BF                lda  NoDev+1 
0358 002127 0052 8D 27 BF                sta  RamSlot+1 
0359 00212A 0055 CE 31 BF                dec  DevCnt                  decrement the device count. 
0360 00212D 0058               
0361 00212D 0058 28           RO9        plp                          Restore status 
0362 00212E 0059               
0363 00212E 0059 60                      rts 
0364 00212F 005A               
0365 00212F 005A 00 00        Address    dc   i2'00' 
0366 002131 005C 00           RamUnitId  dc   i1'00' 
0367 002132 005D               
0368 002132 005D              RamIn      Entry 
0369 002132 005D               
0370 002132 005D              * This is the example /RAM install routine 
0371 002132 005D               
0372 002132 005D 08                      php                          Save processor status 
0373 002133 005E 78                      sei                          and make sure interrupts are off! 
0374 002134 005F               
0375 002134 005F AC 31 BF                ldy  DevCnt                  Get number of devices - 1. 
0376 002137 0062 B9 32 BF     RI1        lda  DevLst,y                Load the unit number 
0377 00213A 0065 29 F0                   and  #$F0                    Check for slot 3, drive 2 unit. 
0378 00213C 0067 C9 B0                   cmp  #$B0                    Is it the slot 3, drive 2 unit? 
0379 00213E 0069 F0 45                   beq  RI3                     If so branch. 
0380 002140 006B 88                      dey                          Otherwise search on... 
0381 002141 006C 10 F4                   bpl  RI1                     Loop until DevLst search is complete 
0382 002143 006E               
0383 002143 006E AD 5A 00                lda  Address                 Restore the device driver address 
0384 002146 0071 8D 26 BF                sta  RamSlot                 low byte 
0385 002149 0074 AD 5B 00                lda  Address+1               Now the 
0386 00214C 0077 8D 27 BF                sta  RamSlot+1               hi byte. 
0387 00214F 007A EE 31 BF                inc  DevCnt                  After installing device,inc device count 
0388 002152 007D AC 31 BF                ldy  DevCnt                  Use y for loop counter 
0389 002155 0080 B9 31 BF     RI2        lda  DevLst-1,y              Bubble down the entries in device list 
0390 002158 0083 99 32 BF                sta  DevLst,y 
0391 00215B 0086 88                      dey                          Next 
0392 00215C 0087 D0 F7                   bne  RI2                     Loop until entires moved down. 
0393 00215E 0089               
0394 00215E 0089              * Now set up a /RAM format request 
0395 00215E 0089               
0396 00215E 0089 A9 03                   lda  #$03                    Load acc with format request number. 
0397 002160 008B 85 42                   sta  $42                     Store request number in proper place. 
0398 002162 008D               
0399 002162 008D AD 5C 00                lda  RamUnitId               Restore the device 
0400 002165 0090 8D 32 BF                sta  DevLst                  unit number in the device list 
0401 002168 0093 29 0F                   and  #$0F                    strip the device id (zero low nibble) 
0402 00216A 0095 85 43                   sta  $43                     and store the unit number in $43 
0403 00216C 0097               
0404 00216C 0097 A9 00                   lda  #$00                    Load low byte of buffer pointer 
0405 00216E 0099 85 44                   sta  $44                     and store it. 
0406 002170 009B A9 10                   lda  #$10                    Load hi byte of buffer pointer 
0407 002172 009D 85 45                   sta  $45                     and store it. 
0408 002174 009F               
0409 002174 009F AD 8B C0                lda  $C08B                   Read & write enable 
0410 002177 00A2 AD 8B C0                lda  $C08B                   the language card with bank 1 on. 
0411 00217A 00A5               
0412 00217A 00A5              * Note how the driver is called.  You jsr to an indirect jmp so 
0413 00217A 00A5              * control is returned by the driver to the instruction after the jsr. 
0414 00217A 00A5               
0415 00217A 00A5 20 B2 00                jsr  RI4                     Now let driver carry out call. 
0416 00217D 00A8 2C 82 C0                bit  $C082                   Now put /RAM in line. 
0417 002180 00AB               
0418 002180 00AB 90 03                   bcc  RI3                     If the carry is clear --> no error 
0419 002182 00AD 20 B5 00                jsr  RI5                     Go process the error 
0420 002185 00B0               
0421 002185 00B0 28           RI3        plp                          Restore processor status 
0422 002186 00B1 60                      rts                          That's all. 
0423 002187 00B2               
0424 002187 00B2 6C 26 BF     RI4        jmp  (RamSlot)               Call the /RAM driver 
0425 00218A 00B5               
0426 00218A 00B5 20 00 80     RI5        jsr  Beep                    Your error handler code would go here 
0427 00218D 00B8 60                      rts 
0428 00218E 00B9               
0429 00218E 00B9                         End 
 
 
 
Local  Symbols
 
ADDRESS    00005A  DEVCNT     00BF31  DEVLST     00BF32  DEVNUM     00BF30   
MACHID     00BF98  MEMTABL    00BF58  NODEV      00BF10  RAMIN      00005D   
RAMSLOT    00BF26  RAMUNITID  00005C  RI1        000062  RI2        000080   
RI3        0000B0  RI4        0000B2  RI5        0000B5  RO1        00001B   
RO2        00001E  RO3        00002C  RO4        000032  RO5        00003D   
RO9        000058   
0430 00218E 0000                         Copy SystemCheck.s 
0431 00218E 0000              * 
0432 00218E 0000              * Check system to ensure it meets program requirements: 
0433 00218E 0000              * - 128K Enhanced Apple IIe 
0434 00218E 0000              * - Apple IIc 
0435 00218E 0000              * - Apple IIc plus 
0436 00218E 0000              * - Apple IIgs (any ROM version) 
0437 00218E 0000              * 
0438 00218E 0000               
0439 00218E 0000              SystemCheck Start 
0440 00218E 0000               
0441 00218E 0000              Keyboard   equ  $C000 
0442 00218E 0000              Clear      equ  $C010 
0443 00218E 0000              Home       equ  $FC58 
0444 00218E 0000              Cout       equ  $FDED 
0445 00218E 0000              SetVTab    equ  $FC22 
0446 00218E 0000               
0447 00218E 0000              Ptr        equ  $06 
0448 00218E 0000              HTab       equ  $24 
0449 00218E 0000              VTab       equ  $25 
0450 00218E 0000               
0451 00218E 0000              * Processor check 
0452 00218E 0000               
0453 00218E 0000 A0 00                   ldy  #$00 
0454 002190 0002 F8                      sed 
0455 002191 0003 A9 99                   lda  #$99 
0456 002193 0005 18                      clc 
0457 002194 0006 69 01                   adc  #$01 
0458 002196 0008 D8                      cld 
0459 002197 0009 30 1D                   bmi  Error                   6502 test 
0460 002199 000B               
0461 002199 000B              * ROM Check 
0462 002199 000B               
0463 002199 000B A0 01                   ldy  #$01 
0464 00219B 000D               
0465 00219B 000D AD B3 FB                lda  $FBB3 
0466 00219E 0010 C9 06                   cmp  #$06 
0467 0021A0 0012 D0 14                   bne  Error                   Apple II/II plus test 
0468 0021A2 0014               
0469 0021A2 0014 AD C0 FB                lda  $FBC0 
0470 0021A5 0017 C9 EA                   cmp  #$EA 
0471 0021A7 0019 F0 0D                   beq  Error                   Unenhanced Apple IIe test 
0472 0021A9 001B               
0473 0021A9 001B              * Memory Check 
0474 0021A9 001B               
0475 0021A9 001B A0 02                   ldy  #$02 
0476 0021AB 001D AD 98 BF                lda  $BF98                   MACHID from ProDOS 
0477 0021AE 0020 29 30                   and  #%00110000              128K? 
0478 0021B0 0022 C9 30                   cmp  #%00110000 
0479 0021B2 0024 D0 02                   bne  Error                   No aux RAM 
0480 0021B4 0026               
0481 0021B4 0026 18                      clc                          Passed tests 
0482 0021B5 0027               
0483 0021B5 0027 60                      rts 
0484 0021B6 0028               
0485 0021B6 0028              Error      anop 
0486 0021B6 0028               
0487 0021B6 0028 8C 95 00                sty  YSave 
0488 0021B9 002B               
0489 0021B9 002B 20 58 FC                jsr  Home                    Clear screen 
0490 0021BC 002E               
0491 0021BC 002E A9 0A                   lda  #11-1 
0492 0021BE 0030 85 25                   sta  VTab 
0493 0021C0 0032 A9 00                   lda  #$00 
0494 0021C2 0034 85 24                   sta  HTab 
0495 0021C4 0036               
0496 0021C4 0036 20 22 FC                jsr  SetVTab 
0497 0021C7 0039               
0498 0021C7 0039 A2 00                   ldx  #$00 
0499 0021C9 003B               
0500 0021C9 003B              E1Loop     anop 
0501 0021C9 003B               
0502 0021C9 003B BD 96 00                lda  Line1,x 
0503 0021CC 003E F0 06                   beq  Part2 
0504 0021CE 0040 20 ED FD                jsr  Cout 
0505 0021D1 0043 E8                      inx 
0506 0021D2 0044 D0 F5                   bne  E1Loop                  Always taken 
0507 0021D4 0046               
0508 0021D4 0046              Part2      anop 
0509 0021D4 0046               
0510 0021D4 0046 E6 25                   inc  VTab 
0511 0021D6 0048 E6 25                   inc  VTab 
0512 0021D8 004A A9 00                   lda  #$00 
0513 0021DA 004C 85 24                   sta  HTab 
0514 0021DC 004E               
0515 0021DC 004E 20 22 FC                jsr  SetVTab 
0516 0021DF 0051               
0517 0021DF 0051 AC 95 00                ldy  YSave 
0518 0021E2 0054               
0519 0021E2 0054 C0 00                   cpy  #$00 
0520 0021E4 0056 F0 06                   beq  ErrorA 
0521 0021E6 0058 C0 01                   cpy  #$01 
0522 0021E8 005A F0 0D                   beq  ErrorB 
0523 0021EA 005C D0 16                   bne  ErrorC 
0524 0021EC 005E               
0525 0021EC 005E              ErrorA     anop 
0526 0021EC 005E               
0527 0021EC 005E A9 BE                   lda  #Line2a 
0528 0021EE 0060 85 06                   sta  Ptr 
0529 0021F0 0062 A9 00                   lda  #>Line2a 
0530 0021F2 0064 85 07                   sta  Ptr+1 
0531 0021F4 0066 4C 7C 00                jmp  Write2 
0532 0021F7 0069               
0533 0021F7 0069              ErrorB     anop 
0534 0021F7 0069               
0535 0021F7 0069 A9 D5                   lda  #Line2b 
0536 0021F9 006B 85 06                   sta  Ptr 
0537 0021FB 006D A9 00                   lda  #>Line2b 
0538 0021FD 006F 85 07                   sta  Ptr+1 
0539 0021FF 0071 4C 7C 00                jmp  Write2 
0540 002202 0074               
0541 002202 0074              ErrorC     anop 
0542 002202 0074               
0543 002202 0074 A9 E6                   lda  #Line2c 
0544 002204 0076 85 06                   sta  Ptr 
0545 002206 0078 A9 00                   lda  #>Line2c 
0546 002208 007A 85 07                   sta  Ptr+1 
0547 00220A 007C               
0548 00220A 007C              Write2     anop 
0549 00220A 007C               
0550 00220A 007C A0 00                   ldy  #$00 
0551 00220C 007E               
0552 00220C 007E              E2Loop     anop 
0553 00220C 007E               
0554 00220C 007E B1 06                   lda  (Ptr),y 
0555 00220E 0080 F0 06                   beq  ErrorExit 
0556 002210 0082 20 ED FD                jsr  Cout 
0557 002213 0085 C8                      iny 
0558 002214 0086 D0 F6                   bne  E2Loop 
0559 002216 0088               
0560 002216 0088              ErrorExit  anop 
0561 002216 0088               
0562 002216 0088 8D 10 C0                sta  Clear                   Keyboard pause 
0563 002219 008B               
0564 002219 008B AD 00 C0     KeyLoop    lda  Keyboard 
0565 00221C 008E 10 FB                   bpl  KeyLoop 
0566 00221E 0090               
0567 00221E 0090 8D 10 C0                sta  Clear 
0568 002221 0093               
0569 002221 0093 38                      sec 
0570 002222 0094               
0571 002222 0094 60                      rts 
0572 002223 0095               
0573 002223 0095 00           YSave      ds   1 
0574 002224 0096               
0575 002224 0096                         MSB  On 
0576 002224 0096 D2 C5 D1 D5  Line1      dc   c'REQUIRES 128K ENHANCED IIE, IIC OR IIGS',h'00' 
0577 00224C 00BE D0 D2 CF C3  Line2a     dc   c'PROCESSOR TEST FAILURE',h'00' 
0578 002263 00D5 D2 CF CD A0  Line2b     dc   c'ROM TEST FAILURE',h'00' 
0579 002274 00E6 C1 D5 D8 A0  Line2c     dc   c'AUX RAM TEST FAILURE',h'00' 
0580 002289 00FB                         MSB  Off 
0581 002289 00FB               
0582 002289 00FB                         End 
 
 
 
Local  Symbols
 
CLEAR      00C010  COUT       00FDED  E1LOOP     00003B  E2LOOP     00007E   
ERROR      000028  ERRORA     00005E  ERRORB     000069  ERRORC     000074   
ERROREXIT  000088  HOME       00FC58  HTAB       000024  KEYBOARD   00C000   
KEYLOOP    00008B  LINE1      000096  LINE2A     0000BE  LINE2B     0000D5   
LINE2C     0000E6  PART2      000046  PTR        000006  SETVTAB    00FC22   
VTAB       000025  WRITE2     00007C  YSAVE      000095   
0583 002289 0000                         Copy Background.s 
0584 002289 0000              SetBackGrnd Start 
0585 002289 0000               
0586 002289 0000 A9 A0                   lda  #' '+$80 
0587 00228B 0002 20 00 C3                jsr  Init80                  Put into 80 column mode 
0588 00228E 0005 20 58 FC                jsr  Home                    Clear screen 
0589 002291 0008               
0590 002291 0008              *          L i n e   1 
0591 002291 0008               
0592 002291 0008 20 00 80                jsr  SetInv                  Inverse text 
0593 002294 000B               
0594 002294 000B A9 1B                   lda  #MouseText 
0595 002296 000D 20 00 80                jsr  cout                    Turn on mousetext 
0596 002299 0010               
0597 002299 0010 A9 5A                   lda  #'Z' 
0598 00229B 0012 20 00 80                jsr  cout                    Print left | 
0599 00229E 0015               
0600 00229E 0015 A9 18                   lda  #StdText 
0601 0022A0 0017 20 00 80                jsr  cout 
0602 0022A3 001A               
0603 0022A3 001A A9 A0                   lda  #' '+$80                Set space to print 
0604 0022A5 001C A2 0F                   ldx  #15                     Index 14 spaces 
0605 0022A7 001E               
0606 0022A7 001E              PrintNext1 Anop 
0607 0022A7 001E               
0608 0022A7 001E 20 00 80                jsr  cout                    print space 
0609 0022AA 0021 CA                      dex                          count space 
0610 0022AB 0022 D0 FA                   bne  PrintNext1              Branch if more to print 
0611 0022AD 0024               
0612 0022AD 0024 A2 2F                   ldx  #HeaderEnd-Header       Load header byte size 
0613 0022AF 0026 A0 00                   ldy  #$00                    zero index 
0614 0022B1 0028               
0615 0022B1 0028              PrintNext2 Anop 
0616 0022B1 0028               
0617 0022B1 0028 B9 81 00                lda  Header,y                Load header character 
0618 0022B4 002B 20 00 80                jsr  cout                    Print it 
0619 0022B7 002E C8                      iny                          increment index 
0620 0022B8 002F CA                      dex                          count character printed 
0621 0022B9 0030 D0 F6                   bne  PrintNext2              more to print, get next character 
0622 0022BB 0032               
0623 0022BB 0032 A2 10                   ldx  #16 
0624 0022BD 0034 A9 A0                   lda  #' '+$80                Setup for 16 spaces 
0625 0022BF 0036               
0626 0022BF 0036              PrintNext3 Anop 
0627 0022BF 0036               
0628 0022BF 0036 20 00 80                jsr  cout                    Print space 
0629 0022C2 0039 CA                      dex                          count it 
0630 0022C3 003A D0 FA                   bne  PrintNext3              More? 
0631 0022C5 003C               
0632 0022C5 003C A9 1B                   lda  #MouseText 
0633 0022C7 003E 20 00 80                jsr  cout                    Turn on mousetext 
0634 0022CA 0041               
0635 0022CA 0041 A9 5F                   lda  #'_' 
0636 0022CC 0043 20 00 80                jsr  cout                    print right | 
0637 0022CF 0046               
0638 0022CF 0046              *          L i n e   2   t h r o u g h   23 
0639 0022CF 0046               
0640 0022CF 0046 A2 16                   ldx  #22                     22 identical lines 
0641 0022D1 0048               
0642 0022D1 0048              PrintNext4 Anop 
0643 0022D1 0048               
0644 0022D1 0048 A9 00                   lda  #1-1 
0645 0022D3 004A 85 24                   sta  HTab 
0646 0022D5 004C               
0647 0022D5 004C A9 5A                   lda  #'Z' 
0648 0022D7 004E 20 00 80                jsr  cout 
0649 0022DA 0051               
0650 0022DA 0051 A9 4F                   lda  #80-1 
0651 0022DC 0053 85 24                   sta  HTab 
0652 0022DE 0055               
0653 0022DE 0055 A9 5F                   lda  #'_' 
0654 0022E0 0057 20 00 80                jsr  cout 
0655 0022E3 005A               
0656 0022E3 005A CA                      dex 
0657 0022E4 005B D0 EB                   bne  PrintNext4 
0658 0022E6 005D               
0659 0022E6 005D              *          L i n e   2 4 
0660 0022E6 005D               
0661 0022E6 005D A9 00                   lda  #1-1 
0662 0022E8 005F 85 24                   sta  HTab                    Tab 1st column 
0663 0022EA 0061               
0664 0022EA 0061 A9 5A                   lda  #'Z' 
0665 0022EC 0063 20 00 80                jsr cout 
0666 0022EF 0066               
0667 0022EF 0066 A9 18                   lda  #StdText 
0668 0022F1 0068 20 00 80                jsr  cout 
0669 0022F4 006B               
0670 0022F4 006B 20 00 80                jsr  SetNorm 
0671 0022F7 006E               
0672 0022F7 006E A2 4E                   ldx  #78                     Print only 77 
0673 0022F9 0070               
0674 0022F9 0070 A9 DF                   lda  #'_'+$80                Print _ on bottom. 
0675 0022FB 0072               
0676 0022FB 0072              PrintNext5 Anop 
0677 0022FB 0072               
0678 0022FB 0072 20 00 80                jsr  cout 
0679 0022FE 0075 CA                      dex 
0680 0022FF 0076 D0 FA                   bne  PrintNext5 
0681 002301 0078               
0682 002301 0078 A9 5F                   lda  #$5F 
0683 002303 007A 8D F7 07                sta  $07F7                   Force | into last position 
0684 002306 007D               
0685 002306 007D 20 00 80                jsr  SetNorm                 Back to normal text 
0686 002309 0080               
0687 002309 0080 60                      rts 
0688 00230A 0081               
0689 00230A 0081 44 69 73 6B  Header     dc   c'DiskMaker 8 v1.1 - Copyright 2006 Mark Percival' 
0690 002339 00B0              HeaderEnd  anop 
0691 002339 00B0               
0692 002339 00B0                         End 
 
 
 
Local  Symbols
 
HEADER     000081  HEADEREND  0000B0  PRINTNEXT1 00001E  PRINTNEXT2 000028   
PRINTNEXT3 000036  PRINTNEXT4 000048  PRINTNEXT5 000072   
0693 002339 0000               
0694 002339 0000                         Copy Cleanup.s 
0695 002339 0000              Cleanup    Start 
0696 002339 0000               
0697 002339 0000 A9 00                   lda  #0                      Turn mouse off. 
0698 00233B 0002 20 00 80                jsr  SetMouse 
0699 00233E 0005               
0700 00233E 0005 20 00 80                jsr  RamIn                   Restore /RAM drive 
0701 002341 0008               
0702 002341 0008 60                      rts 
0703 002342 0009               
0704 002342 0009                         End 
0705 002342 0000               
0706 002342 0000              *          Menu1 
0707 002342 0000               
0708 002342 0000                         Copy Menu1.s 
0709 002342 0000              Menu1      Start 
0710 002342 0000                         using Menu1Vars 
0711 002342 0000               
0712 002342 0000                         Copy Menu1a.s 
0713 002342 0000 80 07                   bra  Start 
0714 002344 0002               
0715 002344 0002              *          Offsets 
0716 002344 0002               
0717 002344 0002              oNextBlock equ  $02 -> $03              Next block number (0 = last block) 
0718 002344 0002              oEntLength equ  $23                     Length of file entry 
0719 002344 0002              oEntPerBlk equ  $24                     Number of file entries per block 
0720 002344 0002              oFileCount equ  $25 -> $26              Number of active files in this directory 
0721 002344 0002               
0722 002344 0002              *          Storage declarations 
0723 002344 0002               
0724 002344 0002 00           EntLength  ds   1                       Length of file entry 
0725 002345 0003 00           EntPerBlk  ds   1                       Number of file entries per block 
0726 002346 0004               
0727 002346 0004 00           FirstPage  ds   1                       Aux page number of first line entry 
0728 002347 0005 00 00        FirstAddr  ds   2                       Address of first line entry 
0729 002349 0007 00           FstEntCnt  ds   1                       Remaining entries in blk at first line 
0730 00234A 0008               
0731 00234A 0008 00           EntRemain  ds   1                       Entries remaining in current block 
0732 00234B 0009               
0733 00234B 0009              Start      anop 
0734 00234B 0009               
0735 00234B 0009 20 00 80                jsr  PaintMenu1              Paint menu1 frame 
0736 00234E 000C               
0737 00234E 000C A9 00                   lda  #OpenBtn 
0738 002350 000E 8D 00 80                sta  TabIndex                Initialize tabindex to open button. 
0739 002353 0011               
0740 002353 0011              Menu01     anop 
0741 002353 0011               
0742 002353 0011 20 00 80                jsr  MLISetPrefix            Set Current Prefix 
0743 002356 0014               
0744 002356 0014 20 00 80                jsr  LoadDirectory           Load current directory into memory 
0745 002359 0017               
0746 002359 0017 20 4C 00                jsr  Initialize              Initialize variables 
0747 00235C 001A               
0748 00235C 001A 20 AB 01                jsr  SaveVolHeader           Save volume header info 
0749 00235F 001D               
0750 00235F 001D              Menu02     anop 
0751 00235F 001D               
0752 00235F 001D 20 B6 00                jsr  ListFiles               List 8 files from FirstAddr 
0753 002362 0020               
0754 002362 0020              Menu03     anop 
0755 002362 0020               
0756 002362 0020 20 A6 03                jsr  RefreshBtn              Refresh command buttons display 
0757 002365 0023               
0758 002365 0023 20 00 80                jsr  Menu1UI                 Menu 1 User Interface 
0759 002368 0026               
0760 002368 0026 A9 00                   lda  #DirChange              *** Directory Refresh *** 
0761 00236A 0028 2C 00 80                bit  RC 
0762 00236D 002B D0 E4                   bne  Menu01 
0763 00236F 002D               
0764 00236F 002D A9 00                   lda  #NoDirChange            *** No Directory Refresh *** 
0765 002371 002F 2C 00 80                bit  RC 
0766 002374 0032 D0 E9                   bne  Menu02 
0767 002376 0034               
0768 002376 0034 A9 00                   lda  #TabOnly                *** Tab Key Button Focus Change *** 
0769 002378 0036 2C 00 80                bit  RC 
0770 00237B 0039 D0 E5                   bne  Menu03 
0771 00237D 003B               
0772 00237D 003B A9 00                   lda  #Quit                   *** Quit Code *** 
0773 00237F 003D 2C 00 80                bit  RC 
0774 002382 0040 D0 09                   bne  Menu99 
0775 002384 0042               
0776 002384 0042 20 00 80                jsr  ClearMenu1              Remove menu1 data from screen 
0777 002387 0045 20 00 80                jsr  Menu2                   Go to Menu2. 
0778 00238A 0048 4C 09 00                jmp  Start                   Back to the top 
0779 00238D 004B               
0780 00238D 004B              Menu99     anop 
0781 00238D 004B               
0782 00238D 004B 60                      rts 
0783 00238E 004C               
0784 00238E 004C              Initialize anop 
0785 00238E 004C               
0786 00238E 004C A9 08                   lda  #$08 
0787 002390 004E 8D 04 00                sta  FirstPage               Set initial first aux page number 
0788 002393 0051 8D 00 80                sta  CurrPage                Set page to load 
0789 002396 0054               
0790 002396 0054 20 8B 01                jsr  GetBlock                Get block from aux memory 
0791 002399 0057               
0792 002399 0057 AD 23 10                lda  readBuf+oEntLength      Get file entry length 
0793 00239C 005A 8D 02 00                sta  EntLength 
0794 00239F 005D               
0795 00239F 005D AD 24 10                lda  readBuf+oEntPerBlk      Get number of entries per block 
0796 0023A2 0060 8D 03 00                sta  EntPerBlk 
0797 0023A5 0063 8D 07 00                sta  FstEntCnt               First line entries remaining. 
0798 0023A8 0066               
0799 0023A8 0066 AD 25 10                lda  readBuf+oFileCount      Get number of active files 
0800 0023AB 0069 8D 00 80                sta  FileCount 
0801 0023AE 006C AD 26 10                lda  readBuf+oFileCount+1 
0802 0023B1 006F 8D 01 80                sta  FileCount+1 
0803 0023B4 0072               
0804 0023B4 0072 9C 00 80                stz  LinesAbove              Since we're starting, lines above 
0805 0023B7 0075 9C 01 80                stz  LinesAbove+1             top is zero. 
0806 0023BA 0078               
0807 0023BA 0078 38                      sec                          Calculcate lines below 
0808 0023BB 0079 AD 00 80                lda  FileCount 
0809 0023BE 007C E9 08                   sbc  #8 
0810 0023C0 007E 8D 00 80                sta  LinesBelow              LinesBelow = FileCount - 8 
0811 0023C3 0081 AD 01 80                lda  FileCount+1 
0812 0023C6 0084 E9 00                   sbc  #0 
0813 0023C8 0086 8D 01 80                sta  LinesBelow+1 
0814 0023CB 0089               
0815 0023CB 0089 10 06                   bpl  Init01 
0816 0023CD 008B               
0817 0023CD 008B 9C 00 80                stz  LinesBelow              If LinesBelow is less than our 
0818 0023D0 008E 9C 01 80                stz  LinesBelow+1            total FileCount, zero it out. 
0819 0023D3 0091               
0820 0023D3 0091              Init01     anop 
0821 0023D3 0091               
0822 0023D3 0091 A9 04                   lda  #readBuf+4 
0823 0023D5 0093 8D 05 00                sta  FirstAddr 
0824 0023D8 0096 A9 10                   lda  #>readBuf+4 
0825 0023DA 0098 8D 06 00                sta  FirstAddr+1 
0826 0023DD 009B               
0827 0023DD 009B AD 00 08                lda  Prefix                  Don't attempt to move past header 
0828 0023E0 009E F0 0B                   beq  Init02                  for volume listing 
0829 0023E2 00A0               
0830 0023E2 00A0 AD 00 80                lda  FileCount               Don't bother finding the first entry 
0831 0023E5 00A3 0D 01 80                ora  FileCount+1             if there is none. 
0832 0023E8 00A6 F0 03                   beq  Init02 
0833 0023EA 00A8               
0834 0023EA 00A8 20 E1 02                jsr  FindFstEnt              Move past Vol/Dir header 
0835 0023ED 00AB               
0836 0023ED 00AB              Init02     anop 
0837 0023ED 00AB               
0838 0023ED 00AB A9 0E                   lda  #Normal                 Normal text for non selected file. 
0839 0023EF 00AD 8D 83 08                sta  TextMode 
0840 0023F2 00B0               
0841 0023F2 00B0 A9 01                   lda  #1                      Default line selected 
0842 0023F4 00B2 8D 00 80                sta  SelectLine 
0843 0023F7 00B5               
0844 0023F7 00B5 60                      rts 
0845 0023F8 00B6               
0846 0023F8 00B6              ListFiles  anop 
0847 0023F8 00B6               
0848 0023F8 00B6              *          List up to 8 files starting from FirstAddr 
0849 0023F8 00B6               
0850 0023F8 00B6 A9 15                   lda  #22-1 
0851 0023FA 00B8 85 24                   sta  HTab                    HTab 22 
0852 0023FC 00BA A9 0A                   lda  #11-1 
0853 0023FE 00BC 85 25                   sta  VTab                    VTab 11 to start 
0854 002400 00BE 20 00 80                jsr  SetVTab 
0855 002403 00C1               
0856 002403 00C1 AD 00 80                lda  SelectLine 
0857 002406 00C4 D0 05                   bne  NotUp 
0858 002408 00C6               
0859 002408 00C6 20 2F 03                jsr  ScrollUp 
0860 00240B 00C9 80 07                   bra  NoScrollDn 
0861 00240D 00CB               
0862 00240D 00CB              NotUp      anop 
0863 00240D 00CB               
0864 00240D 00CB C9 09                   cmp  #9 
0865 00240F 00CD 90 03                   bcc  NoScrollDn 
0866 002411 00CF               
0867 002411 00CF 20 BA 02                jsr  ScrollDown 
0868 002414 00D2               
0869 002414 00D2              NoScrollDn anop 
0870 002414 00D2               
0871 002414 00D2 AD 05 00                lda  FirstAddr               Set up first line address 
0872 002417 00D5 85 06                   sta  Ptr1 
0873 002419 00D7 AD 06 00                lda  FirstAddr+1 
0874 00241C 00DA 85 07                   sta  Ptr1+1 
0875 00241E 00DC               
0876 00241E 00DC AD 04 00                lda  FirstPage               Set up first line source aux page 
0877 002421 00DF 8D 00 80                sta  CurrPage                number. 
0878 002424 00E2               
0879 002424 00E2 AD 07 00                lda  FstEntCnt               Set up remaining entries from first 
0880 002427 00E5 8D 08 00                sta  EntRemain               line. 
0881 00242A 00E8               
0882 00242A 00E8 20 8B 01                jsr  GetBlock                Get block from aux memory 
0883 00242D 00EB               
0884 00242D 00EB 9C 00 80                stz  LineCount               Zero out lines printed counter. 
0885 002430 00EE               
0886 002430 00EE              ListFile01 anop 
0887 002430 00EE               
0888 002430 00EE AD 00 08                lda  Prefix                  Zero prefix length means this is a 
0889 002433 00F1 F0 0A                   beq  ListFile02              volume listing and not a file listing. 
0890 002435 00F3               
0891 002435 00F3 B2 06                   lda  (Ptr1) 
0892 002437 00F5 F0 32                   beq  ListFile90              Deleted entry 
0893 002439 00F7 29 E0                   and  #$E0 
0894 00243B 00F9 C9 E0                   cmp  #$E0                    Skips volume and directory headers 
0895 00243D 00FB F0 2C                   beq  ListFile90 
0896 00243F 00FD               
0897 00243F 00FD              ListFile02 anop 
0898 00243F 00FD               
0899 00243F 00FD EE 00 80                inc  LineCount               We're printing this line so count it 
0900 002442 0100 AD 00 80                lda  LineCount 
0901 002445 0103 CD 00 80                cmp  SelectLine              Is this the line selected? 
0902 002448 0106 D0 15                   bne  ListFile03              No 
0903 00244A 0108               
0904 00244A 0108 A9 0F                   lda  #Inverse                Selected line so set TextMode to inverse 
0905 00244C 010A 8D 83 08                sta  TextMode                to display as selected. 
0906 00244F 010D               
0907 00244F 010D AD 00 80                lda  CurrPage                Also save the aux page number and 
0908 002452 0110 8D 00 80                sta  SelectPage              address in that page that the selected 
0909 002455 0113 A5 06                   lda  Ptr1                    entry appears on. 
0910 002457 0115 8D 00 80                sta  SelectAddr 
0911 00245A 0118 A5 07                   lda  Ptr1+1 
0912 00245C 011A 8D 01 80                sta  SelectAddr+1 
0913 00245F 011D               
0914 00245F 011D              ListFile03 anop 
0915 00245F 011D               
0916 00245F 011D 20 00 80                jsr  PrtFileName             It's good so print it. 
0917 002462 0120               
0918 002462 0120 A9 15                   lda  #22-1                   Move to next line 
0919 002464 0122 85 24                   sta  HTab 
0920 002466 0124 E6 25                   inc  VTab 
0921 002468 0126 20 00 80                jsr  SetVTab 
0922 00246B 0129               
0923 00246B 0129              ListFile90 anop 
0924 00246B 0129               
0925 00246B 0129 AD 00 80                lda  LineCount 
0926 00246E 012C C9 08                   cmp  #$08 
0927 002470 012E F0 46                   beq  ListFile99              8 lines printed so exit 
0928 002472 0130               
0929 002472 0130 AD 01 80                lda  FileCount+1             Check to see if we're at the end of the 
0930 002475 0133 D0 08                   bne  ListFile95              filelist when we have less than 8 files 
0931 002477 0135 AD 00 80                lda  FileCount               total to display. 
0932 00247A 0138 CD 00 80                cmp  LineCount 
0933 00247D 013B F0 1C                   beq  ListFile96 
0934 00247F 013D               
0935 00247F 013D              ListFile95 anop 
0936 00247F 013D               
0937 00247F 013D 18                      clc 
0938 002480 013E A5 06                   lda  Ptr1                    Move to next file. 
0939 002482 0140 6D 02 00                adc  EntLength 
0940 002485 0143 85 06                   sta  Ptr1 
0941 002487 0145 A5 07                   lda  Ptr1+1 
0942 002489 0147 69 00                   adc  #$00 
0943 00248B 0149 85 07                   sta  Ptr1+1 
0944 00248D 014B               
0945 00248D 014B CE 08 00                dec  EntRemain 
0946 002490 014E AD 08 00                lda  EntRemain 
0947 002493 0151 D0 03                   bne  MoreToProcess           See if there are entries remaining 
0948 002495 0153               
0949 002495 0153 20 77 01                jsr  GetNextBlk              No more remaining so get next block 
0950 002498 0156               
0951 002498 0156              MoreToProcess anop 
0952 002498 0156               
0953 002498 0156 4C EE 00                jmp  ListFile01 
0954 00249B 0159               
0955 00249B 0159              ListFile96 anop                         Clear entries on a short list 
0956 00249B 0159               
0957 00249B 0159 38                      sec                          Calculate number of blank lines required 
0958 00249C 015A A9 08                   lda  #$08 
0959 00249E 015C ED 00 80                sbc  LineCount 
0960 0024A1 015F AA                      tax                          x = number of blank lines 
0961 0024A2 0160               
0962 0024A2 0160              ListFile97 anop 
0963 0024A2 0160               
0964 0024A2 0160 A9 A0                   lda  #' '+$80                Space 
0965 0024A4 0162 A0 17                   ldy  #23                     23 spaces in a line 
0966 0024A6 0164               
0967 0024A6 0164              ListFile98 anop 
0968 0024A6 0164               
0969 0024A6 0164 20 00 80                jsr  cout                    Print space 
0970 0024A9 0167 88                      dey 
0971 0024AA 0168 D0 FA                   bne  ListFile98              Finished this line? 
0972 0024AC 016A               
0973 0024AC 016A A9 15                   lda  #22-1                   Move HTab to beginning of line 
0974 0024AE 016C 85 24                   sta  HTab 
0975 0024B0 016E E6 25                   inc  VTab                    Increment VTab 
0976 0024B2 0170 20 00 80                jsr  SetVTab                   and set it. 
0977 0024B5 0173 CA                      dex 
0978 0024B6 0174 D0 EA                   bne  ListFile97              More lines required? 
0979 0024B8 0176               
0980 0024B8 0176              ListFile99 anop 
0981 0024B8 0176               
0982 0024B8 0176 60                      rts 
0983 0024B9 0177               
0984 0024B9 0177              GetNextBlk anop 
0985 0024B9 0177               
0986 0024B9 0177 EE 00 80                inc  CurrPage                Move current page pointer up by 
0987 0024BC 017A EE 00 80                inc  CurrPage                1 block (512 bytes) 
0988 0024BF 017D               
0989 0024BF 017D AD 03 00                lda  EntPerBlk               Reinitialize entries remaining 
0990 0024C2 0180 8D 08 00                sta  EntRemain               in block. 
0991 0024C5 0183               
0992 0024C5 0183 A9 04                   lda  #readBuf+4              Put current line pointer back at first 
0993 0024C7 0185 85 06                   sta  Ptr1                    entry in block. 
0994 0024C9 0187 A9 10                   lda  #>readBuf+4 
0995 0024CB 0189 85 07                   sta  Ptr1+1 
0996 0024CD 018B               
0997 0024CD 018B              GetBlock   Entry 
0998 0024CD 018B               
0999 0024CD 018B              *          Get directory block from aux memory 
1000 0024CD 018B               
1001 0024CD 018B AD 00 80                lda  CurrPage 
1002 0024D0 018E 85 3D                   sta  A1H                     Source starting - high byte 
1003 0024D2 0190 A9 00                   lda  #$00 
1004 0024D4 0192 85 3C                   sta  A1L                     Source starting - low byte 
1005 0024D6 0194 AD 00 80                lda  CurrPage 
1006 0024D9 0197 1A                      ina 
1007 0024DA 0198 85 3F                   sta  A2H                     Source ending   -  high byte 
1008 0024DC 019A A9 FF                   lda  #$FF 
1009 0024DE 019C 85 3E                   sta  A2L                     Source ending   - low byte 
1010 0024E0 019E A9 10                   lda  #>readBuf 
1011 0024E2 01A0 85 43                   sta  A4H                     Destination     - high byte 
1012 0024E4 01A2 A9 00                   lda  #readBuf 
1013 0024E6 01A4 85 42                   sta  A4L                     Destination     - low byte 
1014 0024E8 01A6               
1015 0024E8 01A6 18                      clc                          Move from aux to main 
1016 0024E9 01A7 20 11 C3                jsr  AuxMove                 Get block 
1017 0024EC 01AA               
1018 0024EC 01AA 60                      rts 
1019 0024ED 01AB               
1020 0024ED 01AB              *  Save volume header info 
1021 0024ED 01AB               
1022 0024ED 01AB              SaveVolHeader anop 
1023 0024ED 01AB               
1024 0024ED 01AB A2 26                   ldx  #$26                    $27 bytes long (zero based) 
1025 0024EF 01AD               
1026 0024EF 01AD              SVH01      anop 
1027 0024EF 01AD               
1028 0024EF 01AD BD 04 10                lda  readBuf+4,x             Get byte 
1029 0024F2 01B0 9D 00 80                sta  VolHeader,x             Save byte 
1030 0024F5 01B3 CA                      dex                          Move index 
1031 0024F6 01B4 10 F7                   bpl  SVH01                   Done? 
1032 0024F8 01B6               
1033 0024F8 01B6 60                      rts 
1034 0024F9 01B7                         Copy Menu1b.s 
1035 0024F9 01B7              CurrentDir Anop 
1036 0024F9 01B7               
1037 0024F9 01B7 AD 00 08                lda  Prefix                  No prefix so don't print current 
1038 0024FC 01BA D0 54                   bne  PrtVolume               volume / directory. 
1039 0024FE 01BC               
1040 0024FE 01BC              *          Headers for volume listing 
1041 0024FE 01BC               
1042 0024FE 01BC A9 0E                   lda  #Normal 
1043 002500 01BE 20 00 80                jsr  cout 
1044 002503 01C1               
1045 002503 01C1 A9 15                   lda  #22-1                   Start at HTab 22 
1046 002505 01C3 85 24                   sta  HTab 
1047 002507 01C5 A9 06                   lda  #7-1 
1048 002509 01C7 85 25                   sta  VTab 
1049 00250B 01C9 20 00 80                jsr  SetVTab 
1050 00250E 01CC               
1051 00250E 01CC A2 1F                   ldx  #Line7TextE-Line7Text 
1052 002510 01CE A9 A0                   lda  #' '+$80 
1053 002512 01D0               
1054 002512 01D0              CurDir01   Anop 
1055 002512 01D0               
1056 002512 01D0 20 00 80                jsr  cout 
1057 002515 01D3 CA                      dex 
1058 002516 01D4 D0 FA                   bne  CurDir01 
1059 002518 01D6               
1060 002518 01D6 A9 07                   lda  #8-1 
1061 00251A 01D8 85 25                   sta  VTab 
1062 00251C 01DA 20 00 80                jsr  SetVTab 
1063 00251F 01DD A9 16                   lda  #23-1 
1064 002521 01DF 85 24                   sta  HTab 
1065 002523 01E1               
1066 002523 01E1 A9 A0                   lda  #' '+$80 
1067 002525 01E3 20 00 80                jsr  cout 
1068 002528 01E6               
1069 002528 01E6 A9 15                   lda  #22-1 
1070 00252A 01E8 85 24                   sta  HTab 
1071 00252C 01EA A9 08                   lda  #9-1 
1072 00252E 01EC 85 25                   sta  VTab 
1073 002530 01EE 20 00 80                jsr  SetVTab 
1074 002533 01F1               
1075 002533 01F1 A2 17                   ldx  #Line9TextE-Line9Text 
1076 002535 01F3 A0 00                   ldy  #0 
1077 002537 01F5               
1078 002537 01F5              CurDir02   anop 
1079 002537 01F5               
1080 002537 01F5 B9 A3 02                lda  Line9Text,y 
1081 00253A 01F8 20 00 80                jsr  cout 
1082 00253D 01FB C8                      iny 
1083 00253E 01FC CA                      dex 
1084 00253F 01FD D0 F6                   bne  CurDir02 
1085 002541 01FF               
1086 002541 01FF A9 09                   lda  #10-1 
1087 002543 0201 85 25                   sta  VTab 
1088 002545 0203 20 00 80                jsr  SetVTab 
1089 002548 0206               
1090 002548 0206 A9 16                   lda  #23-1 
1091 00254A 0208 85 24                   sta  HTab 
1092 00254C 020A               
1093 00254C 020A A9 DF                   lda  #'_'+$80 
1094 00254E 020C 20 00 80                jsr  cout 
1095 002551 020F               
1096 002551 020F 60                      rts 
1097 002552 0210               
1098 002552 0210              PrtVolume  anop 
1099 002552 0210               
1100 002552 0210              *          Headers for directory / file listing 
1101 002552 0210               
1102 002552 0210 A9 0E                   lda  #Normal 
1103 002554 0212 20 00 80                jsr  cout 
1104 002557 0215               
1105 002557 0215 A9 15                   lda  #22-1                   Start at HTab 22 
1106 002559 0217 85 24                   sta  HTab 
1107 00255B 0219 A9 06                   lda  #7-1 
1108 00255D 021B 85 25                   sta  VTab 
1109 00255F 021D 20 00 80                jsr  SetVTab 
1110 002562 0220               
1111 002562 0220 A2 1F                   ldx  #Line7TextE-Line7Text 
1112 002564 0222 A0 00                   ldy  #0 
1113 002566 0224               
1114 002566 0224              CurDir03   Anop 
1115 002566 0224               
1116 002566 0224 B9 84 02                lda  Line7Text,y 
1117 002569 0227 20 00 80                jsr  cout 
1118 00256C 022A C8                      iny 
1119 00256D 022B CA                      dex 
1120 00256E 022C D0 F6                   bne  CurDir03 
1121 002570 022E               
1122 002570 022E              CurDir04   anop 
1123 002570 022E               
1124 002570 022E A9 1B                   lda  #MouseText 
1125 002572 0230 20 00 80                jsr  cout 
1126 002575 0233               
1127 002575 0233 A9 07                   lda  #8-1                    Start building down arrow box 
1128 002577 0235 85 25                   sta  VTab 
1129 002579 0237 A9 16                   lda  #23-1 
1130 00257B 0239 85 24                   sta  HTab 
1131 00257D 023B               
1132 00257D 023B 20 00 80                jsr  SetVTab 
1133 002580 023E               
1134 002580 023E A9 DF                   lda  #'_'+$80 
1135 002582 0240 20 00 80                jsr  cout 
1136 002585 0243               
1137 002585 0243 A9 08                   lda  #9-1 
1138 002587 0245 85 25                   sta  VTab 
1139 002589 0247 20 00 80                jsr  SetVTab 
1140 00258C 024A               
1141 00258C 024A A9 15                   lda  #22-1 
1142 00258E 024C 85 24                   sta  HTab 
1143 002590 024E               
1144 002590 024E A9 5A                   lda  #'Z' 
1145 002592 0250 20 00 80                jsr  cout 
1146 002595 0253               
1147 002595 0253 A9 51                   lda  #'Q' 
1148 002597 0255 20 00 80                jsr  cout 
1149 00259A 0258               
1150 00259A 0258 A9 5F                   lda  #'_' 
1151 00259C 025A 20 00 80                jsr  cout 
1152 00259F 025D               
1153 00259F 025D A9 09                   lda  #10-1 
1154 0025A1 025F 85 25                   sta  VTab 
1155 0025A3 0261 20 00 80                jsr  SetVTab 
1156 0025A6 0264               
1157 0025A6 0264 A9 16                   lda  #23-1 
1158 0025A8 0266 85 24                   sta  HTab 
1159 0025AA 0268               
1160 0025AA 0268 A9 5C                   lda  #'\' 
1161 0025AC 026A 20 00 80                jsr  cout 
1162 0025AF 026D               
1163 0025AF 026D A9 08                   lda  #9-1 
1164 0025B1 026F 85 25                   sta  VTab 
1165 0025B3 0271 A9 18                   lda  #25-1 
1166 0025B5 0273 85 24                   sta  HTab 
1167 0025B7 0275               
1168 0025B7 0275 20 00 80                jsr  SetVTab 
1169 0025BA 0278               
1170 0025BA 0278 A9 00                   lda  #VolHeader              Pointer to volume/directory name 
1171 0025BC 027A 85 06                   sta  Ptr1 
1172 0025BE 027C A9 80                   lda  #>VolHeader 
1173 0025C0 027E 85 07                   sta  Ptr1+1 
1174 0025C2 0280               
1175 0025C2 0280 20 00 80                jsr  PrtFileName             Print volume/directory name 
1176 0025C5 0283               
1177 0025C5 0283 60                      rts 
1178 0025C6 0284               
1179 0025C6 0284                         Msb  On 
1180 0025C6 0284               
1181 0025C6 0284              Line7Text  Anop 
1182 0025C6 0284               
1183 0025C6 0284 D3 E5 EC E5             dc   C'Select a disk image to convert:' 
1184 0025E5 02A3               
1185 0025E5 02A3              Line7TextE Anop 
1186 0025E5 02A3               
1187 0025E5 02A3              Line9Text  anop 
1188 0025E5 02A3               
1189 0025E5 02A3 C1 F6 E1 E9             dc   c'Available disks:       ' 
1190 0025FC 02BA               
1191 0025FC 02BA              Line9TextE anop 
1192 0025FC 02BA               
1193 0025FC 02BA                         Msb  Off 
1194 0025FC 02BA               
1195 0025FC 02BA              * 
1196 0025FC 02BA              * Move directory first file pointers to next file entry 
1197 0025FC 02BA              * 
1198 0025FC 02BA               
1199 0025FC 02BA              ScrollDown anop 
1200 0025FC 02BA               
1201 0025FC 02BA A9 08                   lda  #8 
1202 0025FE 02BC 8D 00 80                sta  SelectLine 
1203 002601 02BF               
1204 002601 02BF 18                      clc 
1205 002602 02C0 AD 00 80                lda  LinesAbove              Add 1 to lines above. 
1206 002605 02C3 69 01                   adc  #1 
1207 002607 02C5 8D 00 80                sta  LinesAbove 
1208 00260A 02C8 AD 01 80                lda  LinesAbove+1 
1209 00260D 02CB 69 00                   adc  #0 
1210 00260F 02CD 8D 01 80                sta  LinesAbove+1 
1211 002612 02D0               
1212 002612 02D0 38                      sec 
1213 002613 02D1 AD 00 80                lda  LinesBelow              Subtract 1 from lines below 
1214 002616 02D4 E9 01                   sbc  #1 
1215 002618 02D6 8D 00 80                sta  LinesBelow 
1216 00261B 02D9 AD 01 80                lda  LinesBelow+1 
1217 00261E 02DC E9 00                   sbc  #0 
1218 002620 02DE 8D 01 80                sta  LinesBelow+1 
1219 002623 02E1               
1220 002623 02E1              FindFstEnt anop 
1221 002623 02E1               
1222 002623 02E1 20 F3 02                jsr  NextFstEntry 
1223 002626 02E4               
1224 002626 02E4 AD 05 00                lda  FirstAddr 
1225 002629 02E7 85 06                   sta  Ptr1 
1226 00262B 02E9 AD 06 00                lda  FirstAddr+1 
1227 00262E 02EC 85 07                   sta  Ptr1+1 
1228 002630 02EE               
1229 002630 02EE B2 06                   lda  (Ptr1) 
1230 002632 02F0 F0 EF                   beq  FindFstEnt              Deleted entry 
1231 002634 02F2               
1232 002634 02F2 60                      rts 
1233 002635 02F3               
1234 002635 02F3              NextFstEnt anop                         Move first entry to next entry. 
1235 002635 02F3               
1236 002635 02F3 CE 07 00                dec  FstEntCnt 
1237 002638 02F6 AD 07 00                lda  FstEntCnt 
1238 00263B 02F9               
1239 00263B 02F9 D0 18                   bne  FstNextBlk 
1240 00263D 02FB               
1241 00263D 02FB              *  No more entries in this directory block; get next. 
1242 00263D 02FB               
1243 00263D 02FB A9 04                   lda  #readBuf+4 
1244 00263F 02FD 8D 05 00                sta  FirstAddr 
1245 002642 0300 A9 10                   lda  #>readBuf+4 
1246 002644 0302 8D 06 00                sta  FirstAddr+1 
1247 002647 0305               
1248 002647 0305 EE 04 00                inc  FirstPage 
1249 00264A 0308 EE 04 00                inc  FirstPage 
1250 00264D 030B               
1251 00264D 030B AD 03 00                lda  EntPerBlk 
1252 002650 030E 8D 07 00                sta  FstEntCnt 
1253 002653 0311               
1254 002653 0311 80 12                   bra  FstGetBlk 
1255 002655 0313               
1256 002655 0313              FstNextBlk  anop 
1257 002655 0313               
1258 002655 0313              * Move First Address pointer to next entry. 
1259 002655 0313               
1260 002655 0313 18                      clc 
1261 002656 0314 AD 05 00                lda  FirstAddr 
1262 002659 0317 6D 02 00                adc  EntLength 
1263 00265C 031A 8D 05 00                sta  FirstAddr 
1264 00265F 031D AD 06 00                lda  FirstAddr+1 
1265 002662 0320 69 00                   adc  #0 
1266 002664 0322 8D 06 00                sta  FirstAddr+1 
1267 002667 0325               
1268 002667 0325              FstGetBlk  anop 
1269 002667 0325               
1270 002667 0325 AD 04 00                lda  FirstPage 
1271 00266A 0328 8D 00 80                sta  CurrPage 
1272 00266D 032B 20 8B 01                jsr  GetBlock 
1273 002670 032E               
1274 002670 032E 60                      rts 
1275 002671 032F               
1276 002671 032F               
1277 002671 032F              * 
1278 002671 032F              * Move directory first file pointer to previous file 
1279 002671 032F              * 
1280 002671 032F               
1281 002671 032F              ScrollUp   anop 
1282 002671 032F               
1283 002671 032F A9 01                   lda  #1 
1284 002673 0331 8D 00 80                sta  SelectLine 
1285 002676 0334               
1286 002676 0334 38                      sec 
1287 002677 0335 AD 00 80                lda  LinesAbove              Subtract 1 from lines above 
1288 00267A 0338 E9 01                   sbc  #1 
1289 00267C 033A 8D 00 80                sta  LinesAbove 
1290 00267F 033D AD 01 80                lda  LinesAbove+1 
1291 002682 0340 E9 00                   sbc  #0 
1292 002684 0342 8D 01 80                sta  LinesAbove+1 
1293 002687 0345               
1294 002687 0345 18                      clc 
1295 002688 0346 AD 00 80                lda  LinesBelow              Add 1 to lines below 
1296 00268B 0349 69 01                   adc  #1 
1297 00268D 034B 8D 00 80                sta  LinesBelow 
1298 002690 034E AD 01 80                lda  LinesBelow+1 
1299 002693 0351 69 00                   adc  #0 
1300 002695 0353 8D 01 80                sta  LinesBelow+1 
1301 002698 0356               
1302 002698 0356              FindPrevEnt anop 
1303 002698 0356               
1304 002698 0356 20 68 03                jsr  PrevFstEntry 
1305 00269B 0359               
1306 00269B 0359 AD 05 00                lda  FirstAddr 
1307 00269E 035C 85 06                   sta  Ptr1 
1308 0026A0 035E AD 06 00                lda  FirstAddr+1 
1309 0026A3 0361 85 07                   sta  Ptr1+1 
1310 0026A5 0363               
1311 0026A5 0363 B2 06                   lda  (Ptr1) 
1312 0026A7 0365 F0 EF                   beq  FindPrevEnt             Deleted entry 
1313 0026A9 0367               
1314 0026A9 0367 60                      rts 
1315 0026AA 0368               
1316 0026AA 0368              PrevFstEntry anop 
1317 0026AA 0368               
1318 0026AA 0368 AD 07 00                lda  FstEntCnt 
1319 0026AD 036B CD 03 00                cmp  EntPerBlk 
1320 0026B0 036E D0 17                   bne  FstPrevBlk 
1321 0026B2 0370               
1322 0026B2 0370              * No more entries in this block; get previous. 
1323 0026B2 0370               
1324 0026B2 0370 A9 D8                   lda  #readBuf+4+($27*$0C) 
1325 0026B4 0372 8D 05 00                sta  FirstAddr 
1326 0026B7 0375 A9 11                   lda  #>readBuf+4+($27*$0C) 
1327 0026B9 0377 8D 06 00                sta  FirstAddr+1 
1328 0026BC 037A               
1329 0026BC 037A CE 04 00                dec  FirstPage 
1330 0026BF 037D CE 04 00                dec  FirstPage 
1331 0026C2 0380               
1332 0026C2 0380 A9 01                   lda  #1 
1333 0026C4 0382 8D 07 00                sta  FstEntCnt 
1334 0026C7 0385 80 15                   bra  FstGetPrev 
1335 0026C9 0387               
1336 0026C9 0387              FstPrevBlk anop 
1337 0026C9 0387               
1338 0026C9 0387 EE 07 00                inc  FstEntCnt 
1339 0026CC 038A               
1340 0026CC 038A              * Move First Address pointer to previous entry. 
1341 0026CC 038A               
1342 0026CC 038A 38                      sec 
1343 0026CD 038B AD 05 00                lda  FirstAddr 
1344 0026D0 038E ED 02 00                sbc  EntLength 
1345 0026D3 0391 8D 05 00                sta  FirstAddr 
1346 0026D6 0394 AD 06 00                lda  FirstAddr+1 
1347 0026D9 0397 E9 00                   sbc  #0 
1348 0026DB 0399 8D 06 00                sta  FirstAddr+1 
1349 0026DE 039C               
1350 0026DE 039C              FstGetPrev anop 
1351 0026DE 039C               
1352 0026DE 039C AD 04 00                lda  FirstPage 
1353 0026E1 039F 8D 00 80                sta  CurrPage 
1354 0026E4 03A2 20 8B 01                jsr  GetBlock 
1355 0026E7 03A5               
1356 0026E7 03A5 60                      rts 
1357 0026E8 03A6               
1358 0026E8 03A6              * 
1359 0026E8 03A6              * Refresh command buttons display based on TabIndex setting 
1360 0026E8 03A6              * 
1361 0026E8 03A6               
1362 0026E8 03A6              RefreshBtn entry 
1363 0026E8 03A6               
1364 0026E8 03A6 A9 0E                   lda  #Normal                 Make sure inverse text is off. 
1365 0026EA 03A8 20 00 80                jsr  cout 
1366 0026ED 03AB A9 18                   lda  #StdText                MouseText off. 
1367 0026EF 03AD 20 00 80                jsr  cout 
1368 0026F2 03B0               
1369 0026F2 03B0 A9 00                   lda  #ButtonText             Set button text address up in Ptr1 
1370 0026F4 03B2 85 06                   sta  Ptr1 
1371 0026F6 03B4 A9 80                   lda  #>ButtonText 
1372 0026F8 03B6 85 07                   sta  Ptr1+1 
1373 0026FA 03B8               
1374 0026FA 03B8 A2 00                   ldx  #0                      Set to current button tab index. 
1375 0026FC 03BA               
1376 0026FC 03BA              Refresh01  anop 
1377 0026FC 03BA               
1378 0026FC 03BA EC 00 80                cpx  TabIndex                Is this our active button? 
1379 0026FF 03BD D0 05                   bne  Refresh02               No so print it in Normal 
1380 002701 03BF               
1381 002701 03BF A9 0F                   lda  #Inverse                Yes so change mode to Inverse (selected) 
1382 002703 03C1 20 00 80                jsr  cout 
1383 002706 03C4               
1384 002706 03C4              Refresh02  anop 
1385 002706 03C4               
1386 002706 03C4 DA                      phx                          Save current tab button index on stack 
1387 002707 03C5               
1388 002707 03C5 A9 31                   lda  #50-1 
1389 002709 03C7 85 24                   sta  HTab                    HTab 50 
1390 00270B 03C9 B2 06                   lda  (Ptr1)                  Retrieve VTab 
1391 00270D 03CB 85 25                   sta  VTab 
1392 00270F 03CD 20 00 80                jsr  SetVTab                 Set VTab 
1393 002712 03D0               
1394 002712 03D0 A0 01                   ldy  #1                      Starting position index 
1395 002714 03D2 A2 08                   ldx  #8                      Text length index 
1396 002716 03D4               
1397 002716 03D4              Refresh03  anop 
1398 002716 03D4               
1399 002716 03D4 B1 06                   lda  (Ptr1),y                Get character 
1400 002718 03D6 20 00 80                jsr  cout                    Print it 
1401 00271B 03D9 C8                      iny                          Increment to next character 
1402 00271C 03DA CA                      dex                          count it 
1403 00271D 03DB D0 F7                   bne  Refresh03               More? 
1404 00271F 03DD               
1405 00271F 03DD A9 0E                   lda  #Normal                 No more so reset Normal text. 
1406 002721 03DF 20 00 80                jsr  cout 
1407 002724 03E2               
1408 002724 03E2 FA                      plx                          Get tabindex from stack 
1409 002725 03E3 E8                      inx                          Move to next tab index 
1410 002726 03E4 E0 04                   cpx  #4                      4 buttons updated? 
1411 002728 03E6 F0 0F                   beq  Refresh04               Yes so exit. 
1412 00272A 03E8               
1413 00272A 03E8 18                      clc                          No so add 9 to Ptr1 to setup next 
1414 00272B 03E9 A5 06                   lda  Ptr1                    print 
1415 00272D 03EB 69 09                   adc  #9 
1416 00272F 03ED 85 06                   sta  Ptr1 
1417 002731 03EF A5 07                   lda  Ptr1+1 
1418 002733 03F1 69 00                   adc  #0 
1419 002735 03F3 85 07                   sta  Ptr1+1 
1420 002737 03F5 80 C3                   bra  Refresh01               Go back and print next button. 
1421 002739 03F7               
1422 002739 03F7              Refresh04  anop 
1423 002739 03F7               
1424 002739 03F7 EC 00 80                cpx  TabIndex                TabIndex = 5? 
1425 00273C 03FA D0 05                   bne  Refresh05               No so print vol / dir name normal text 
1426 00273E 03FC               
1427 00273E 03FC A9 0F                   lda  #Inverse                Yes so print inverse text 
1428 002740 03FE 8D 83 08                sta  TextMode 
1429 002743 0401               
1430 002743 0401              Refresh05  anop 
1431 002743 0401               
1432 002743 0401 20 B7 01                jsr  CurrentDir              Print volume/directory name 
1433 002746 0404               
1434 002746 0404              Refresh99  anop 
1435 002746 0404               
1436 002746 0404 60                      rts 
1437 002747 0405               
1438 002747 0405                         End 
 
 
 
Local  Symbols
 
CURDIR01   0001D0  CURDIR02   0001F5  CURDIR03   000224  CURDIR04   00022E   
CURRENTDIR 0001B7  ENTLENGTH  000002  ENTPERBLK  000003  ENTREMAIN  000008   
FINDFSTENT 0002E1  FINDPREVEN 000356  FIRSTADDR  000005  FIRSTPAGE  000004   
FSTENTCNT  000007  FSTGETBLK  000325  FSTGETPREV 00039C  FSTNEXTBLK 000313   
FSTPREVBLK 000387  GETBLOCK   00018B  GETNEXTBLK 000177  INIT01     000091   
INIT02     0000AB  INITIALIZE 00004C  LINE7TEXT  000284  LINE7TEXTE 0002A3   
LINE9TEXT  0002A3  LINE9TEXTE 0002BA  LISTFILE01 0000EE  LISTFILE02 0000FD   
LISTFILE03 00011D  LISTFILE90 000129  LISTFILE95 00013D  LISTFILE96 000159   
LISTFILE97 000160  LISTFILE98 000164  LISTFILE99 000176  LISTFILES  0000B6   
MENU01     000011  MENU02     00001D  MENU03     000020  MENU99     00004B   
MORETOPROC 000156  NEXTFSTENT 0002F3  NOSCROLLDN 0000D2  NOTUP      0000CB   
OENTLENGTH 000023  OENTPERBLK 000024  OFILECOUNT 000025  ONEXTBLOCK 000002   
PREVFSTENT 000368  PRTVOLUME  000210  REFRESH01  0003BA  REFRESH02  0003C4   
REFRESH03  0003D4  REFRESH04  0003F7  REFRESH05  000401  REFRESH99  000404   
REFRESHBTN 0003A6  SAVEVOLHEA 0001AB  SCROLLDOWN 0002BA  SCROLLUP   00032F   
START      000009  SVH01      0001AD   
1439 002747 0000                         Copy Menu1Vars.s 
1440 002747 0000              Menu1Vars  Data 
1441 002747 0000               
1442 002747 0000 00           RC         ds   1                       User Interface return code 
1443 002748 0001               
1444 002748 0001              Quit       equ  %00000001               Quit menu1 
1445 002748 0001              NoDirChange equ %00000010               No directory change 
1446 002748 0001              DirChange  equ  %00000100               Directory change 
1447 002748 0001              TabOnly    equ  %00001000               Tab key button focus change 
1448 002748 0001               
1449 002748 0001 00 00        FileCount  ds   2                       Number of active files in this directory 
1450 00274A 0003 00           CurrPage   ds   1                       Current page loaded 
1451 00274B 0004               
1452 00274B 0004 00           LineCount  ds   1                       Number of lines printed (0 to 8) 
1453 00274C 0005 00           SelectLine ds   1                       Selected line # (0 -> 8) 
1454 00274D 0006 00           SelectPage ds   1                       Aux page number of selected file 
1455 00274E 0007 00 00        SelectAddr ds   2                       Address of selected file 
1456 002750 0009               
1457 002750 0009 00 00        LinesAbove ds   2                       Lines available above top line 
1458 002752 000B 00 00        LinesBelow ds   2                       Lines avaialbe below bottom line 
1459 002754 000D               
1460 002754 000D 00           TabIndex   ds   1                       Current active command button. 
1461 002755 000E              DisksBtn   equ  $0                      Disks button value. 
1462 002755 000E              OpenBtn    equ  $1                      Open button value. 
1463 002755 000E              CloseBtn   equ  $2                      Close button value. 
1464 002755 000E              CancelBtn  equ  $3                      Cancel button value. 
1465 002755 000E              VolDirPull equ  $4                      Volume / directory pulldown 
1466 002755 000E              LoopBack   equ  $5 
1467 002755 000E               
1468 002755 000E 00 00 00 00  VolHeader  ds   39                      Save volume header info 
1469 00277C 0035 00           blnDblClick ds  1                       Boolean set for double clicking 
1470 00277D 0036               
1471 00277D 0036              * Vertical tab / Button text 
1472 00277D 0036               
1473 00277D 0036                         Msb  On 
1474 00277D 0036               
1475 00277D 0036              ButtonText anop 
1476 00277D 0036               
1477 00277D 0036 0A A0 C4 E9  DisksMsg   dc   h'0A',c' Disks  ' 
1478 002786 003F 0D A0 A0 CF  OpenMsg    dc   h'0D',c'  Open  ' 
1479 00278F 0048 0F A0 C3 EC  CloseMsg   dc   h'0F',c' Close  ' 
1480 002798 0051 11 A0 A0 D1  CancelMsg  dc   h'11',c'  Quit  ' 
1481 0027A1 005A               
1482 0027A1 005A                         Msb  Off 
1483 0027A1 005A               
1484 0027A1 005A                         End 
 
 
 
Local  Symbols
 
BLNDBLCLIC 000035  BUTTONTEXT 000036  CANCELBTN  000003  CANCELMSG  000051   
CLOSEBTN   000002  CLOSEMSG   000048  CURRPAGE   000003  DIRCHANGE  000004   
DISKSBTN   000000  DISKSMSG   000036  FILECOUNT  000001  LINECOUNT  000004   
LINESABOVE 000009  LINESBELOW 00000B  LOOPBACK   000005  NODIRCHANG 000002   
OPENBTN    000001  OPENMSG    00003F  QUIT       000001  RC         000000   
SELECTADDR 000007  SELECTLINE 000005  SELECTPAGE 000006  TABINDEX   00000D   
TABONLY    000008  VOLDIRPULL 000004  VOLHEADER  00000E   
1485 0027A1 0000                         Copy Menu1UI.s 
1486 0027A1 0000              Menu1UI    Start 
1487 0027A1 0000                         using Menu1Vars 
1488 0027A1 0000               
1489 0027A1 0000              * 
1490 0027A1 0000              *          Menu1 User Interface 
1491 0027A1 0000              * 
1492 0027A1 0000               
1493 0027A1 0000              * AscII Key Values 
1494 0027A1 0000               
1495 0027A1 0000              UpArrow    equ  $8B 
1496 0027A1 0000              DownArrow  equ  $8A 
1497 0027A1 0000              LeftArrow  equ  $88 
1498 0027A1 0000              RightArrow equ  $95 
1499 0027A1 0000              ReturnKey  equ  $8D 
1500 0027A1 0000              TabKey     equ  $89 
1501 0027A1 0000               
1502 0027A1 0000              * File entry offsets 
1503 0027A1 0000               
1504 0027A1 0000              oFileType  equ  $10 - $10 
1505 0027A1 0000              oAuxType   equ  $1F - $20 
1506 0027A1 0000               
1507 0027A1 0000 9C 00 80                stz  RC                      Reset return code 
1508 0027A4 0003 9C 10 C0                stz  ClearKbd                Clear keyboard strobe 
1509 0027A7 0006               
1510 0027A7 0006              PollDev    anop 
1511 0027A7 0006               
1512 0027A7 0006 20 00 80                jsr  PlotMouse 
1513 0027AA 0009               
1514 0027AA 0009              PollDevLoop anop 
1515 0027AA 0009               
1516 0027AA 0009 AD 00 C0                lda  Keyboard                Get keypress 
1517 0027AD 000C 10 03                   bpl  PollMouse 
1518 0027AF 000E 4C 6A 00                jmp  KeyDev 
1519 0027B2 0011               
1520 0027B2 0011              PollMouse  anop 
1521 0027B2 0011               
1522 0027B2 0011 20 00 80                jsr  ReadMouse               Read mouse 
1523 0027B5 0014 4E 84 08                lsr  MouseX                  Divide by 2 to return to the 
1524 0027B8 0017 4E 86 08                lsr  MouseY                  0 to 79, 0 to 23 range. 
1525 0027BB 001A AD 8C 08                lda  MouseStat               Get mouse status 
1526 0027BE 001D 89 20                   bit  #MouseMove              Moved mouse? 
1527 0027C0 001F D0 0A                   bne  MouseDev1               Yes 
1528 0027C2 0021 89 80                   bit  #CurrButton             Button pressed? 
1529 0027C4 0023 D0 0C                   bne  MouseDev2               Yes 
1530 0027C6 0025 89 40                   bit  #PrevButton             Button release? 
1531 0027C8 0027 D0 1B                   bne  MouseDev3               Yes 
1532 0027CA 0029               
1533 0027CA 0029 80 DE                   bra  PollDevLoop 
1534 0027CC 002B               
1535 0027CC 002B              * 
1536 0027CC 002B              * Mouse Movement 
1537 0027CC 002B              * 
1538 0027CC 002B               
1539 0027CC 002B              MouseDev1  anop 
1540 0027CC 002B               
1541 0027CC 002B 20 00 80                jsr  MoveMouse 
1542 0027CF 002E 4C 09 00                jmp  PollDevLoop 
1543 0027D2 0031               
1544 0027D2 0031              * 
1545 0027D2 0031              * Move Button Pressed 
1546 0027D2 0031              * 
1547 0027D2 0031               
1548 0027D2 0031              MouseDev2  anop 
1549 0027D2 0031               
1550 0027D2 0031 20 00 80                jsr  ButtonDown 
1551 0027D5 0034 AD 00 80                lda  blnDblClick 
1552 0027D8 0037 D0 28                   bne  DoOpen                  should be because I'm double clicking. 
1553 0027DA 0039               
1554 0027DA 0039 AD 00 80                lda  RC 
1555 0027DD 003C D0 03                   bne  MouseDev2X 
1556 0027DF 003E 4C 09 00                jmp  PollDevLoop 
1557 0027E2 0041               
1558 0027E2 0041              MouseDev2X anop 
1559 0027E2 0041               
1560 0027E2 0041 4C 01 03                jmp  Exit 
1561 0027E5 0044               
1562 0027E5 0044              * 
1563 0027E5 0044              * Mouse Button Release 
1564 0027E5 0044              * 
1565 0027E5 0044               
1566 0027E5 0044              MouseDev3  anop 
1567 0027E5 0044               
1568 0027E5 0044 20 00 80                jsr  ButtonUp 
1569 0027E8 0047 AD 00 80                lda  RC 
1570 0027EB 004A D0 03                   bne  MouseDev3X 
1571 0027ED 004C 4C 09 00                jmp  PollDevLoop 
1572 0027F0 004F               
1573 0027F0 004F              MouseDev3X anop 
1574 0027F0 004F               
1575 0027F0 004F AD 00 80                lda  TabIndex 
1576 0027F3 0052 F0 0A                   beq  DoDisks 
1577 0027F5 0054 C9 00                   cmp  #OpenBtn 
1578 0027F7 0056 F0 09                   beq  DoOpen 
1579 0027F9 0058 C9 00                   cmp  #CloseBtn 
1580 0027FB 005A F0 08                   beq  DoClose 
1581 0027FD 005C 80 09                   bra  DoCancel 
1582 0027FF 005E               
1583 0027FF 005E              DoDisks    anop 
1584 0027FF 005E               
1585 0027FF 005E 4C 2A 01                jmp  OnLineReq0 
1586 002802 0061               
1587 002802 0061              DoOpen     anop 
1588 002802 0061               
1589 002802 0061 4C 5D 01                jmp  OpenReq0 
1590 002805 0064               
1591 002805 0064              DoClose    anop 
1592 002805 0064               
1593 002805 0064 4C 5D 02                jmp  CloseReq0 
1594 002808 0067               
1595 002808 0067              DoCancel   anop 
1596 002808 0067               
1597 002808 0067 4C 8F 00                jmp  QuitReq0 
1598 00280B 006A               
1599 00280B 006A              * 
1600 00280B 006A              * Keyboard Key Pressed 
1601 00280B 006A              * 
1602 00280B 006A               
1603 00280B 006A              KeyDev     anop 
1604 00280B 006A               
1605 00280B 006A 9C 10 C0                stz  ClearKbd                Clear keyboard strobe 
1606 00280E 006D 8D 02 03                sta  KeyPress                Save keypress 
1607 002811 0070               
1608 002811 0070              *          Test for quiting screen 
1609 002811 0070               
1610 002811 0070 AD 61 C0                lda  AppleKey 
1611 002814 0073 10 25                   bpl  NextKey01               No Apple Key 
1612 002816 0075 AD 02 03                lda  KeyPress 
1613 002819 0078 C9 D1                   cmp  #'Q'+$80 
1614 00281B 007A F0 06                   beq  QuitReq 
1615 00281D 007C C9 F1                   cmp  #'q'+$80 
1616 00281F 007E F0 02                   beq  QuitReq 
1617 002821 0080 80 18                   bra  NextKey01 
1618 002823 0082               
1619 002823 0082              QuitReq    anop 
1620 002823 0082               
1621 002823 0082 A9 00                   lda  #CancelBtn              Test here to see if Cancel is the 
1622 002825 0084 CD 00 80                cmp  TabIndex                  currently displayed button. 
1623 002828 0087 8D 00 80                sta  TabIndex                Change TabIndex here. 
1624 00282B 008A F0 03                   beq  QuitReq0                Yes Cancel is current based on prev test 
1625 00282D 008C               
1626 00282D 008C 20 00 80                jsr  RefreshBtn              Display Cancel as current selected. 
1627 002830 008F               
1628 002830 008F              QuitReq0   anop 
1629 002830 008F               
1630 002830 008F 20 06 03                jsr  AnimateBtn 
1631 002833 0092               
1632 002833 0092 A9 00                   lda  #Quit 
1633 002835 0094 8D 00 80                sta  RC 
1634 002838 0097 4C 01 03                jmp  Exit 
1635 00283B 009A               
1636 00283B 009A              *          Test for down / right arrow key. 
1637 00283B 009A               
1638 00283B 009A              NextKey01  anop 
1639 00283B 009A               
1640 00283B 009A AD 02 03                lda  KeyPress 
1641 00283E 009D C9 8A                   cmp  #DownArrow              Down arrow? 
1642 002840 009F F0 06                   beq  DownReq 
1643 002842 00A1 C9 95                   cmp  #RightArrow             ...or right arrow? 
1644 002844 00A3 F0 02                   beq  DownReq 
1645 002846 00A5 80 32                   bra  NextKey02 
1646 002848 00A7               
1647 002848 00A7              DownReq    Entry 
1648 002848 00A7               
1649 002848 00A7 AD 00 80                lda  SelectLine              Check to see if selected line is at the 
1650 00284B 00AA C9 08                   cmp  #8                      bottom of the window. 
1651 00284D 00AC F0 18                   beq  AtBottom                Yes it is. 
1652 00284F 00AE               
1653 00284F 00AE AD 01 80                lda  FileCount+1             No so see if there are more file entries 
1654 002852 00B1 D0 08                   bne  IncSelLine              below our selected line. 
1655 002854 00B3               
1656 002854 00B3 AD 00 80                lda  FileCount               If FileCount = SelectLine then we're 
1657 002857 00B6 CD 00 80                cmp  SelectLine              at the bottom of the window with less 
1658 00285A 00B9 F0 0B                   beq  AtBottom                than 8 file entries in the directory. 
1659 00285C 00BB               
1660 00285C 00BB              IncSelLine anop                         Increment selected line 
1661 00285C 00BB               
1662 00285C 00BB EE 00 80                inc  SelectLine              Move selected line to next position 
1663 00285F 00BE A9 00                   lda  #NoDirChange 
1664 002861 00C0 8D 00 80                sta  RC 
1665 002864 00C3 4C 01 03                jmp  Exit 
1666 002867 00C6               
1667 002867 00C6              AtBottom   anop 
1668 002867 00C6               
1669 002867 00C6 AD 01 80                lda  LinesBelow+1            Check to see if we have move lines below 
1670 00286A 00C9 0D 00 80                ora  LinesBelow              this point.  This is a 16 bit number. 
1671 00286D 00CC F0 03                   beq  NoMoreBelow 
1672 00286F 00CE               
1673 00286F 00CE EE 00 80                inc  SelectLine              This should make SelectLine = 9. 
1674 002872 00D1               
1675 002872 00D1              NoMoreBelow anop 
1676 002872 00D1               
1677 002872 00D1 A9 00                   lda  #NoDirChange 
1678 002874 00D3 8D 00 80                sta  RC 
1679 002877 00D6 4C 01 03                jmp  Exit 
1680 00287A 00D9               
1681 00287A 00D9              *          Test for up / left arrow key. 
1682 00287A 00D9               
1683 00287A 00D9              NextKey02  anop 
1684 00287A 00D9               
1685 00287A 00D9 AD 02 03                lda  KeyPress 
1686 00287D 00DC C9 8B                   cmp  #UpArrow 
1687 00287F 00DE F0 06                   beq  UpReq 
1688 002881 00E0 C9 88                   cmp  #LeftArrow 
1689 002883 00E2 F0 02                   beq  UpReq 
1690 002885 00E4 80 25                   bra  NextKey03 
1691 002887 00E6               
1692 002887 00E6              UpReq      Entry 
1693 002887 00E6               
1694 002887 00E6 AD 00 80                lda  SelectLine              Check to see if we're at top of window 
1695 00288A 00E9 C9 01                   cmp  #1 
1696 00288C 00EB F0 0B                   beq  AtTop 
1697 00288E 00ED               
1698 00288E 00ED CE 00 80                dec  SelectLine              Not at top of window so move line up 1 
1699 002891 00F0 A9 00                   lda  #NoDirChange 
1700 002893 00F2 8D 00 80                sta  RC 
1701 002896 00F5 4C 01 03                jmp  Exit 
1702 002899 00F8               
1703 002899 00F8              AtTop      anop 
1704 002899 00F8               
1705 002899 00F8 AD 01 80                lda  LinesAbove+1            Check to see if we have lines above 
1706 00289C 00FB 0D 00 80                ora  LinesAbove              this point. 
1707 00289F 00FE F0 03                   beq  NoMoreAbove 
1708 0028A1 0100               
1709 0028A1 0100 CE 00 80                dec  SelectLine              This should make SelectLine = 0 
1710 0028A4 0103               
1711 0028A4 0103              NoMoreAbove anop 
1712 0028A4 0103               
1713 0028A4 0103 A9 00                   lda  #NoDirChange 
1714 0028A6 0105 8D 00 80                sta  RC 
1715 0028A9 0108 4C 01 03                jmp  Exit 
1716 0028AC 010B               
1717 0028AC 010B              NextKey03  anop 
1718 0028AC 010B               
1719 0028AC 010B              *          Test for requesting online drives 
1720 0028AC 010B               
1721 0028AC 010B AD 61 C0                lda  AppleKey 
1722 0028AF 010E 10 2D                   bpl  NextKey04               No Apple Key 
1723 0028B1 0110 AD 02 03                lda  KeyPress 
1724 0028B4 0113 C9 C4                   cmp  #'D'+$80 
1725 0028B6 0115 F0 06                   beq  OnlineReq 
1726 0028B8 0117 C9 E4                   cmp  #'d'+$80 
1727 0028BA 0119 F0 02                   beq  OnlineReq 
1728 0028BC 011B 80 20                   bra  NextKey04 
1729 0028BE 011D               
1730 0028BE 011D              OnlineReq  anop 
1731 0028BE 011D               
1732 0028BE 011D A9 00                   lda  #DisksBtn               Test here to see if Disks is the 
1733 0028C0 011F CD 00 80                cmp  TabIndex                  currently displayed button. 
1734 0028C3 0122 8D 00 80                sta  TabIndex                Change TabIndex here. 
1735 0028C6 0125 F0 03                   beq  OnlineReq0              Yes Disks is current based on prev test 
1736 0028C8 0127               
1737 0028C8 0127 20 00 80                jsr  RefreshBtn              Display Disks as current selected. 
1738 0028CB 012A               
1739 0028CB 012A              OnlineReq0 anop 
1740 0028CB 012A               
1741 0028CB 012A 20 06 03                jsr  AnimateBtn 
1742 0028CE 012D               
1743 0028CE 012D              OnlineReq1 anop 
1744 0028CE 012D               
1745 0028CE 012D A9 00                   lda  #OpenBtn                Default to Open after call. 
1746 0028D0 012F 8D 00 80                sta  TabIndex 
1747 0028D3 0132               
1748 0028D3 0132 9C 00 08                stz  Prefix 
1749 0028D6 0135 A9 00                   lda  #DirChange 
1750 0028D8 0137 8D 00 80                sta  RC 
1751 0028DB 013A 4C 01 03                jmp  Exit 
1752 0028DE 013D               
1753 0028DE 013D              NextKey04  anop 
1754 0028DE 013D               
1755 0028DE 013D              *          Test for requesting file open. 
1756 0028DE 013D               
1757 0028DE 013D AD 61 C0                lda  AppleKey 
1758 0028E1 0140 10 0B                   bpl  NextKey05a              No Apple Key 
1759 0028E3 0142 AD 02 03                lda  KeyPress 
1760 0028E6 0145 C9 CF                   cmp  #'O'+$80 
1761 0028E8 0147 F0 07                   beq  OpenReq 
1762 0028EA 0149 C9 EF                   cmp  #'o'+$80 
1763 0028EC 014B F0 03                   beq  OpenReq 
1764 0028EE 014D               
1765 0028EE 014D              NextKey05a anop 
1766 0028EE 014D               
1767 0028EE 014D 4C 3E 02                jmp  NextKey05 
1768 0028F1 0150               
1769 0028F1 0150              OpenReq    anop 
1770 0028F1 0150               
1771 0028F1 0150 A9 00                   lda  #OpenBtn                Test here to see if Open is the 
1772 0028F3 0152 CD 00 80                cmp  TabIndex                  currently displayed button. 
1773 0028F6 0155 8D 00 80                sta  TabIndex                Change TabIndex here. 
1774 0028F9 0158 F0 03                   beq  OpenReq0                Yes Open is current based on prev test 
1775 0028FB 015A               
1776 0028FB 015A 20 00 80                jsr  RefreshBtn              Display Open as current selected. 
1777 0028FE 015D               
1778 0028FE 015D              OpenReq0   anop 
1779 0028FE 015D               
1780 0028FE 015D 20 06 03                jsr  AnimateBtn              Do button animation. 
1781 002901 0160               
1782 002901 0160 AD 00 80                lda  LineCount               Are there files listed in this 
1783 002904 0163 D0 03                   bne  OpenReq0a                directory? 
1784 002906 0165               
1785 002906 0165 4C F5 01                jmp  BadFileName             No, so beep the user to let him know. 
1786 002909 0168               
1787 002909 0168              OpenReq0a  anop 
1788 002909 0168               
1789 002909 0168 AD 00 08                lda  Prefix                  Check for null prefix 
1790 00290C 016B D0 0A                   bne  OpenReq1 
1791 00290E 016D               
1792 00290E 016D A9 01                   lda  #1                      Null prefix, put the initial '/' and 
1793 002910 016F 8D 00 08                sta  Prefix                  make the length 1. 
1794 002913 0172 A9 2F                   lda  #'/' 
1795 002915 0174 8D 01 08                sta  Prefix+1 
1796 002918 0177               
1797 002918 0177              OpenReq1   anop 
1798 002918 0177               
1799 002918 0177 AD 00 80                lda  SelectPage              Make sure proper page is loaded. 
1800 00291B 017A 8D 00 80                sta  CurrPage 
1801 00291E 017D 20 00 80                jsr  GetBlock 
1802 002921 0180               
1803 002921 0180 AD 00 80                lda  SelectAddr              Set up pointer to selected file. 
1804 002924 0183 85 06                   sta  Ptr1 
1805 002926 0185 AD 01 80                lda  SelectAddr+1 
1806 002929 0188 85 07                   sta  Ptr1+1 
1807 00292B 018A               
1808 00292B 018A B2 06                   lda  (Ptr1) 
1809 00292D 018C 29 0F                   and  #$0F 
1810 00292F 018E A8                      tay 
1811 002930 018F               
1812 002930 018F              OpenReq1a  anop 
1813 002930 018F               
1814 002930 018F B1 06                   lda  (Ptr1),y                Search file name for a '?' from an 
1815 002932 0191 C9 3F                   cmp  #'?'                    AppleShare volume. 
1816 002934 0193 D0 03                   bne  OpenReq1b 
1817 002936 0195 4C F5 01                jmp  BadFileName 
1818 002939 0198               
1819 002939 0198              OpenReq1b  anop 
1820 002939 0198               
1821 002939 0198 88                      dey 
1822 00293A 0199 D0 F4                   bne  OpenReq1a 
1823 00293C 019B               
1824 00293C 019B B2 06                   lda  (Ptr1)                  Get file type / length of file. 
1825 00293E 019D 10 61                   bpl  OpenFile                If not a directory, do nothing. 
1826 002940 019F               
1827 002940 019F 29 0F                   and  #$0F                    Keep only file name length 
1828 002942 01A1 8D 03 03                sta  extCnt                  Save file name length 
1829 002945 01A4 9C 04 03                stz  srcPtr                  Init to zero. 
1830 002948 01A7               
1831 002948 01A7 18                      clc                          Check to make sure new prefix isn't 
1832 002949 01A8 AD 00 08                lda  Prefix                  longer than 63 characters. 
1833 00294C 01AB 6D 03 03                adc  extCnt 
1834 00294F 01AE C9 3F                   cmp  #63 
1835 002951 01B0 B0 2D                   bcs  BadPrefix 
1836 002953 01B2               
1837 002953 01B2 AD 00 08                lda  Prefix                  Init destPtr to end of current dir 
1838 002956 01B5 8D 05 03                sta  destPtr 
1839 002959 01B8               
1840 002959 01B8              OpenReq2   anop 
1841 002959 01B8               
1842 002959 01B8 EE 04 03                inc  srcPtr                  Bump to next character to read. 
1843 00295C 01BB EE 05 03                inc  destPtr                 Bump to next empty location. 
1844 00295F 01BE AC 04 03                ldy  srcPtr                  Get character of directory name. 
1845 002962 01C1 B1 06                   lda  (Ptr1),y 
1846 002964 01C3 AC 05 03                ldy  destPtr                 Add to end of current directory. 
1847 002967 01C6 99 00 08                sta  Prefix,y 
1848 00296A 01C9 CE 03 03                dec  extCnt                  Done all characters? 
1849 00296D 01CC D0 EA                   bne  OpenReq2                No, so do some more 
1850 00296F 01CE               
1851 00296F 01CE C8                      iny 
1852 002970 01CF A9 2F                   lda  #'/'                    Add '/' on to the end. 
1853 002972 01D1 99 00 08                sta  Prefix,y 
1854 002975 01D4 8C 00 08                sty  Prefix                  Fix length of path. 
1855 002978 01D7               
1856 002978 01D7              OpenReq99  anop 
1857 002978 01D7               
1858 002978 01D7 A9 00                   lda  #DirChange 
1859 00297A 01D9 8D 00 80                sta  RC 
1860 00297D 01DC 4C 01 03                jmp  Exit 
1861 002980 01DF               
1862 002980 01DF              BadPrefix  anop                         New prefix > 63 characters 
1863 002980 01DF               
1864 002980 01DF 20 00 80                jsr  Beep 
1865 002983 01E2               
1866 002983 01E2 A9 5C                   lda  #DirError 
1867 002985 01E4 85 82                   sta  MsgPtr 
1868 002987 01E6 A9 03                   lda  #>DirError 
1869 002989 01E8 85 83                   sta  MsgPtr+1 
1870 00298B 01EA               
1871 00298B 01EA 20 00 80                jsr  MsgOk 
1872 00298E 01ED               
1873 00298E 01ED A9 00                   lda  #NoDirChange 
1874 002990 01EF 8D 00 80                sta  RC 
1875 002993 01F2 4C 01 03                jmp  Exit 
1876 002996 01F5               
1877 002996 01F5              BadFileName anop 
1878 002996 01F5               
1879 002996 01F5 20 00 80                jsr  Beep 
1880 002999 01F8               
1881 002999 01F8 A9 00                   lda  #NoDirChange 
1882 00299B 01FA 8D 00 80                sta  RC 
1883 00299E 01FD 4C 01 03                jmp  Exit 
1884 0029A1 0200               
1885 0029A1 0200              * 
1886 0029A1 0200              * Entered non-directory -- save file name in Path 
1887 0029A1 0200              * 
1888 0029A1 0200               
1889 0029A1 0200              OpenFile   anop 
1890 0029A1 0200               
1891 0029A1 0200 29 F0                   and  #$F0                    Keep file type 
1892 0029A3 0202 C9 40                   cmp  #$40                    Extended file? 
1893 0029A5 0204 90 0B                   bcc  OpenFile0               No, process file. 
1894 0029A7 0206               
1895 0029A7 0206 20 00 80                jsr  Beep                    Beep to indicate extended file. 
1896 0029AA 0209 A9 00                   lda  #NoDirChange 
1897 0029AC 020B 8D 00 80                sta  RC 
1898 0029AF 020E 4C 01 03                jmp  Exit 
1899 0029B2 0211               
1900 0029B2 0211              OpenFile0  anop 
1901 0029B2 0211               
1902 0029B2 0211 B2 06                   lda  (Ptr1)                  Get file info again. 
1903 0029B4 0213 29 0F                   and  #$0F                    Keep file length only 
1904 0029B6 0215 A0 01                   ldy  #1                      Start index at 1 
1905 0029B8 0217 AA                      tax                          Save length in x 
1906 0029B9 0218 8D 40 08                sta  Path                    Save length to 1st byte in path 
1907 0029BC 021B               
1908 0029BC 021B              OpenFile1  anop 
1909 0029BC 021B               
1910 0029BC 021B B1 06                   lda  (Ptr1),y                Get next character 
1911 0029BE 021D 99 40 08                sta  Path,y                  Save character in path 
1912 0029C1 0220 C8                      iny                          Move to next character 
1913 0029C2 0221 CA                      dex                          Count it saved. 
1914 0029C3 0222 D0 F7                   bne  OpenFile1               More? 
1915 0029C5 0224               
1916 0029C5 0224 A0 10                   ldy  #oFileType              Save file type 
1917 0029C7 0226 B1 06                   lda  (Ptr1),y 
1918 0029C9 0228 8D 80 08                sta  FileType 
1919 0029CC 022B               
1920 0029CC 022B A0 1F                   ldy  #oAuxType               Save file aux type 
1921 0029CE 022D B1 06                   lda  (Ptr1),y 
1922 0029D0 022F 8D 81 08                sta  AuxType 
1923 0029D3 0232 C8                      iny 
1924 0029D4 0233 B1 06                   lda  (Ptr1),y 
1925 0029D6 0235 8D 82 08                sta  AuxType+1 
1926 0029D9 0238               
1927 0029D9 0238 9C 00 80                stz  RC                      Make sure RC is zero 
1928 0029DC 023B 4C 01 03                jmp  Exit 
1929 0029DF 023E               
1930 0029DF 023E              NextKey05  anop 
1931 0029DF 023E               
1932 0029DF 023E              *          Test for requesting file close (up one directory level) 
1933 0029DF 023E               
1934 0029DF 023E AD 61 C0                lda  AppleKey 
1935 0029E2 0241 10 45                   bpl  NextKey06               No Apple Key 
1936 0029E4 0243 AD 02 03                lda  KeyPress 
1937 0029E7 0246 C9 C3                   cmp  #'C'+$80 
1938 0029E9 0248 F0 06                   beq  CloseReq 
1939 0029EB 024A C9 E3                   cmp  #'c'+$80 
1940 0029ED 024C F0 02                   beq  CloseReq 
1941 0029EF 024E 80 38                   bra  NextKey06 
1942 0029F1 0250               
1943 0029F1 0250              CloseReq   anop 
1944 0029F1 0250               
1945 0029F1 0250 A9 00                   lda  #CloseBtn               Test here to see if Close is the 
1946 0029F3 0252 CD 00 80                cmp  TabIndex                  currently displayed button. 
1947 0029F6 0255 8D 00 80                sta  TabIndex                Change TabIndex here. 
1948 0029F9 0258 F0 03                   beq  CloseReq0               Yes Close is current based on prev test 
1949 0029FB 025A               
1950 0029FB 025A 20 00 80                jsr  RefreshBtn              Display Close as current selected. 
1951 0029FE 025D               
1952 0029FE 025D              CloseReq0  anop 
1953 0029FE 025D               
1954 0029FE 025D 20 06 03                jsr  AnimateBtn 
1955 002A01 0260               
1956 002A01 0260 A9 00                   lda  #OpenBtn                Default to Open after call. 
1957 002A03 0262 8D 00 80                sta  TabIndex 
1958 002A06 0265               
1959 002A06 0265 AD 00 08                lda  Prefix                  Get prefix length 
1960 002A09 0268 D0 03                   bne  CloseReq00 
1961 002A0B 026A               
1962 002A0B 026A 4C 2D 01                jmp  OnlineReq1 
1963 002A0E 026D               
1964 002A0E 026D              CloseReq00 anop 
1965 002A0E 026D               
1966 002A0E 026D A8                      tay                          Move directory length to index 
1967 002A0F 026E               
1968 002A0F 026E              CloseReq01 anop 
1969 002A0F 026E               
1970 002A0F 026E 88                      dey                          Move index back once character 
1971 002A10 026F B9 00 08                lda  Prefix,y                Get prefix character 
1972 002A13 0272 C9 2F                   cmp  #'/'                    Is it a backslash? 
1973 002A15 0274 D0 F8                   bne  CloseReq01              No, continue the search 
1974 002A17 0276               
1975 002A17 0276 8C 00 08                sty  Prefix                  Save new prefix length 
1976 002A1A 0279 C0 01                   cpy  #1                      Are we beyond the root directory? 
1977 002A1C 027B D0 03                   bne  CloseReq99              No. 
1978 002A1E 027D 4C 2D 01                jmp  OnlineReq1              Yes so make Prefix null to toggle online 
1979 002A21 0280               
1980 002A21 0280              CloseReq99 anop 
1981 002A21 0280               
1982 002A21 0280 A9 00                   lda  #DirChange 
1983 002A23 0282 8D 00 80                sta  RC 
1984 002A26 0285 4C 01 03                jmp  Exit 
1985 002A29 0288               
1986 002A29 0288              NextKey06  anop 
1987 002A29 0288               
1988 002A29 0288              *          Test for tab key press. 
1989 002A29 0288               
1990 002A29 0288 AD 02 03                lda  KeyPress 
1991 002A2C 028B C9 89                   cmp  #TabKey 
1992 002A2E 028D F0 02                   beq  TabReq 
1993 002A30 028F 80 38                   bra  NextKey07 
1994 002A32 0291               
1995 002A32 0291              TabReq     anop 
1996 002A32 0291               
1997 002A32 0291 AD 62 C0                lda  OptionKey 
1998 002A35 0294 30 16                   bmi  TabUp 
1999 002A37 0296               
2000 002A37 0296              TabDown    anop 
2001 002A37 0296               
2002 002A37 0296 AD 00 80                lda  TabIndex                Get current tabindex 
2003 002A3A 0299 1A                      inc  a                       Move it to the next button setting 
2004 002A3B 029A C9 00                   cmp  #VolDirPull             Are we on the vol / dir pulldown? 
2005 002A3D 029C D0 06                   bne  TD01                    No 
2006 002A3F 029E AE 00 08                ldx  Prefix                  Is the path empty? 
2007 002A42 02A1 D0 01                   bne  TD01                    No 
2008 002A44 02A3 1A                      inc  a 
2009 002A45 02A4               
2010 002A45 02A4              TD01       anop 
2011 002A45 02A4               
2012 002A45 02A4 C9 00                   cmp  #LoopBack               Moved beyond last button? 
2013 002A47 02A6 D0 0C                   bne  TabReq1                 No 
2014 002A49 02A8               
2015 002A49 02A8 A9 00                   lda  #0                      Yes so reset it back to the beginning. 
2016 002A4B 02AA 80 08                   bra  TabReq1 
2017 002A4D 02AC               
2018 002A4D 02AC              TabUp      anop 
2019 002A4D 02AC               
2020 002A4D 02AC AD 00 80                lda  TabIndex 
2021 002A50 02AF 3A                      dec  a 
2022 002A51 02B0 10 02                   bpl  TabReq1 
2023 002A53 02B2               
2024 002A53 02B2 A9 FF                   lda  #LoopBack-1 
2025 002A55 02B4               
2026 002A55 02B4              TabReq1    anop 
2027 002A55 02B4               
2028 002A55 02B4 C9 00                   cmp  #VolDirPull 
2029 002A57 02B6 D0 06                   bne  TU01 
2030 002A59 02B8 AE 00 08                ldx  Prefix 
2031 002A5C 02BB D0 01                   bne  TU01 
2032 002A5E 02BD               
2033 002A5E 02BD 3A                      dec  a 
2034 002A5F 02BE               
2035 002A5F 02BE              TU01       anop 
2036 002A5F 02BE               
2037 002A5F 02BE 8D 00 80                sta  TabIndex                Save new tabindex setting. 
2038 002A62 02C1               
2039 002A62 02C1 A9 00                   lda  #TabOnly 
2040 002A64 02C3 8D 00 80                sta  RC 
2041 002A67 02C6 4C 01 03                jmp  Exit 
2042 002A6A 02C9               
2043 002A6A 02C9              NextKey07  anop 
2044 002A6A 02C9               
2045 002A6A 02C9              *          Test for return key press. 
2046 002A6A 02C9               
2047 002A6A 02C9 AD 02 03                lda  KeyPress 
2048 002A6D 02CC C9 8D                   cmp  #ReturnKey 
2049 002A6F 02CE F0 06                   beq  EnterReq 
2050 002A71 02D0 C9 A0                   cmp  #' '+$80 
2051 002A73 02D2 F0 02                   beq  EnterReq 
2052 002A75 02D4 80 25                   bra  NextKey08 
2053 002A77 02D6               
2054 002A77 02D6              EnterReq   anop 
2055 002A77 02D6               
2056 002A77 02D6 AD 00 80                lda  TabIndex 
2057 002A7A 02D9               
2058 002A7A 02D9 C9 00                   cmp  #DisksBtn 
2059 002A7C 02DB D0 03                   bne  Enter01 
2060 002A7E 02DD 4C 1D 01                jmp  OnlineReq               Requested Disks command button. 
2061 002A81 02E0               
2062 002A81 02E0              Enter01    anop 
2063 002A81 02E0               
2064 002A81 02E0 C9 00                   cmp  #OpenBtn 
2065 002A83 02E2 D0 03                   bne  Enter02 
2066 002A85 02E4 4C 50 01                jmp  OpenReq                 Requested Open command button. 
2067 002A88 02E7               
2068 002A88 02E7              Enter02    anop 
2069 002A88 02E7               
2070 002A88 02E7 C9 00                   cmp  #CloseBtn 
2071 002A8A 02E9 D0 03                   bne  Enter03 
2072 002A8C 02EB 4C 50 02                jmp  CloseReq                Requested Close command button. 
2073 002A8F 02EE               
2074 002A8F 02EE              Enter03    anop 
2075 002A8F 02EE               
2076 002A8F 02EE C9 00                   cmp  #CancelBtn 
2077 002A91 02F0 D0 03                   bne  Enter04 
2078 002A93 02F2 4C 82 00                jmp  QuitReq                 Requested Cancel command button. 
2079 002A96 02F5               
2080 002A96 02F5              Enter04    anop 
2081 002A96 02F5               
2082 002A96 02F5 20 00 80                jsr  PathDDL                 Requested directory pulldown 
2083 002A99 02F8               
2084 002A99 02F8 4C 01 03                jmp  Exit 
2085 002A9C 02FB               
2086 002A9C 02FB              NextKey08  anop 
2087 002A9C 02FB               
2088 002A9C 02FB 20 00 80                jsr  Beep                    Invalid keypress so beep him. 
2089 002A9F 02FE               
2090 002A9F 02FE              NoBeep     anop 
2091 002A9F 02FE               
2092 002A9F 02FE 4C 09 00                jmp  PollDevLoop 
2093 002AA2 0301               
2094 002AA2 0301              Exit       anop 
2095 002AA2 0301               
2096 002AA2 0301 60                      rts 
2097 002AA3 0302               
2098 002AA3 0302 00           KeyPress   ds   1 
2099 002AA4 0303 00           extCnt     ds   1 
2100 002AA5 0304 00           srcPtr     ds   1 
2101 002AA6 0305 00           destPtr    ds   1 
2102 002AA7 0306               
2103 002AA7 0306              * 
2104 002AA7 0306              * Do button animation on <cr> 
2105 002AA7 0306              * 
2106 002AA7 0306               
2107 002AA7 0306              AnimateBtn anop 
2108 002AA7 0306               
2109 002AA7 0306 A9 00                   lda  #ButtonText             Save Button text address in Ptr1 
2110 002AA9 0308 85 06                   sta  Ptr1 
2111 002AAB 030A A9 80                   lda  #>ButtonText 
2112 002AAD 030C 85 07                   sta  Ptr1+1 
2113 002AAF 030E               
2114 002AAF 030E AE 00 80                ldx  TabIndex                Move TabIndex to index 
2115 002AB2 0311 F0 10                   beq  AnimBtn02               Zero?  No need to adjust address 
2116 002AB4 0313               
2117 002AB4 0313              AnimBtn01  anop 
2118 002AB4 0313               
2119 002AB4 0313 18                      clc                          Add 9 (Button text length) to Prt1 
2120 002AB5 0314 A5 06                   lda  Ptr1 
2121 002AB7 0316 69 09                   adc  #9 
2122 002AB9 0318 85 06                   sta  Ptr1 
2123 002ABB 031A A5 07                   lda  Ptr1+1 
2124 002ABD 031C 69 00                   adc  #0 
2125 002ABF 031E 85 07                   sta  Ptr1+1 
2126 002AC1 0320               
2127 002AC1 0320 CA                      dex                          Count it 
2128 002AC2 0321 D0 F0                   bne  AnimBtn01               More to offset 
2129 002AC4 0323               
2130 002AC4 0323              AnimBtn02  anop 
2131 002AC4 0323               
2132 002AC4 0323 A9 0E                   lda  #Normal                 Normal text 
2133 002AC6 0325 20 00 80                jsr  cout 
2134 002AC9 0328               
2135 002AC9 0328 20 43 03                jsr  PrtButton               Print button text in normal 
2136 002ACC 032B               
2137 002ACC 032B A9 FF                   lda  #$FF                    Wait here for a second (or so) 
2138 002ACE 032D 20 A8 FC                jsr  Wait 
2139 002AD1 0330               
2140 002AD1 0330 A9 0F                   lda  #Inverse                Inverse text 
2141 002AD3 0332 20 00 80                jsr  cout 
2142 002AD6 0335               
2143 002AD6 0335 20 43 03                jsr  PrtButton               Print button text in inverse 
2144 002AD9 0338               
2145 002AD9 0338 A9 FF                   lda  #$FF                    Wait here for a second (or so) 
2146 002ADB 033A 20 A8 FC                jsr  Wait 
2147 002ADE 033D               
2148 002ADE 033D A9 0E                   lda  #Normal                 Return to normal text prio to exit 
2149 002AE0 033F 20 00 80                jsr  cout 
2150 002AE3 0342               
2151 002AE3 0342 60                      rts 
2152 002AE4 0343               
2153 002AE4 0343              PrtButton  anop 
2154 002AE4 0343               
2155 002AE4 0343              * 
2156 002AE4 0343              * Print button text 
2157 002AE4 0343              * 
2158 002AE4 0343               
2159 002AE4 0343 A9 31                   lda  #50-1                   HTab 50 
2160 002AE6 0345 85 24                   sta  HTab 
2161 002AE8 0347 B2 06                   lda  (Ptr1)                  VTab saved in table 
2162 002AEA 0349 85 25                   sta  VTab 
2163 002AEC 034B 20 00 80                jsr  SetVTab                 Set VTab 
2164 002AEF 034E               
2165 002AEF 034E A0 01                   ldy  #1                      Starting index 
2166 002AF1 0350 A2 08                   ldx  #8                      characters to print 
2167 002AF3 0352               
2168 002AF3 0352              PrtButt01  anop 
2169 002AF3 0352               
2170 002AF3 0352 B1 06                   lda  (Ptr1),y                Get button text character 
2171 002AF5 0354 20 00 80                jsr  cout                    Print it 
2172 002AF8 0357 C8                      iny                          Move index to next character 
2173 002AF9 0358 CA                      dex                          Count this as printed 
2174 002AFA 0359 D0 F7                   bne  PrtButt01               More? 
2175 002AFC 035B               
2176 002AFC 035B 60                      rts 
2177 002AFD 035C               
2178 002AFD 035C 50 72 6F 44  DirError   dc   c'ProDOS 8 path name too long.',h'0D' 
2179 002B1A 0379 20 20 20 50             dc   c'   Path > 63 characters.',h'00' 
2180 002B33 0392               
2181 002B33 0392                         End 
 
 
 
Local  Symbols
 
ANIMATEBTN 000306  ANIMBTN01  000313  ANIMBTN02  000323  ATBOTTOM   0000C6   
ATTOP      0000F8  BADFILENAM 0001F5  BADPREFIX  0001DF  CLOSEREQ   000250   
CLOSEREQ0  00025D  CLOSEREQ00 00026D  CLOSEREQ01 00026E  CLOSEREQ99 000280   
DESTPTR    000305  DIRERROR   00035C  DOCANCEL   000067  DOCLOSE    000064   
DODISKS    00005E  DOOPEN     000061  DOWNARROW  00008A  DOWNREQ    0000A7   
ENTER01    0002E0  ENTER02    0002E7  ENTER03    0002EE  ENTER04    0002F5   
ENTERREQ   0002D6  EXIT       000301  EXTCNT     000303  INCSELLINE 0000BB   
KEYDEV     00006A  KEYPRESS   000302  LEFTARROW  000088  MOUSEDEV1  00002B   
MOUSEDEV2  000031  MOUSEDEV2X 000041  MOUSEDEV3  000044  MOUSEDEV3X 00004F   
NEXTKEY01  00009A  NEXTKEY02  0000D9  NEXTKEY03  00010B  NEXTKEY04  00013D   
NEXTKEY05  00023E  NEXTKEY05A 00014D  NEXTKEY06  000288  NEXTKEY07  0002C9   
NEXTKEY08  0002FB  NOBEEP     0002FE  NOMOREABOV 000103  NOMOREBELO 0000D1   
OAUXTYPE   00001F  OFILETYPE  000010  ONLINEREQ  00011D  ONLINEREQ0 00012A   
ONLINEREQ1 00012D  OPENFILE   000200  OPENFILE0  000211  OPENFILE1  00021B   
OPENREQ    000150  OPENREQ0   00015D  OPENREQ0A  000168  OPENREQ1   000177   
OPENREQ1A  00018F  OPENREQ1B  000198  OPENREQ2   0001B8  OPENREQ99  0001D7   
POLLDEV    000006  POLLDEVLOO 000009  POLLMOUSE  000011  PRTBUTT01  000352   
PRTBUTTON  000343  QUITREQ    000082  QUITREQ0   00008F  RETURNKEY  00008D   
RIGHTARROW 000095  SRCPTR     000304  TABDOWN    000296  TABKEY     000089   
TABREQ     000291  TABREQ1    0002B4  TABUP      0002AC  TD01       0002A4   
TU01       0002BE  UPARROW    00008B  UPREQ      0000E6   
2182 002B33 0000               
2183 002B33 0000                         Copy PaintMenu1.s 
2184 002B33 0000              * 
2185 002B33 0000              * Paint basic menu1 frame 
2186 002B33 0000              * 
2187 002B33 0000               
2188 002B33 0000              PaintMenu1 Start 
2189 002B33 0000               
2190 002B33 0000              *          L i n e   6 
2191 002B33 0000               
2192 002B33 0000 A9 0F                   lda  #Inverse                Setup for mousetext 
2193 002B35 0002 20 00 80                jsr  cout 
2194 002B38 0005 A9 1B                   lda  #MouseText 
2195 002B3A 0007 20 00 80                jsr  cout 
2196 002B3D 000A               
2197 002B3D 000A A9 05                   lda  #6-1                    Set to line 6 
2198 002B3F 000C 85 25                   sta  VTab 
2199 002B41 000E A9 13                   lda  #20-1                   Set to column 20 
2200 002B43 0010 85 24                   sta  HTab 
2201 002B45 0012               
2202 002B45 0012 20 00 80                jsr  SetVTab 
2203 002B48 0015               
2204 002B48 0015 A9 5A                   lda  #'Z'                    Left side | 
2205 002B4A 0017 20 00 80                jsr cout 
2206 002B4D 001A               
2207 002B4D 001A A2 28                   ldx  #40                     40 characters 
2208 002B4F 001C A9 4C                   lda  #'L'                    Top _ of box 
2209 002B51 001E               
2210 002B51 001E              PM_Line6_1 Anop 
2211 002B51 001E               
2212 002B51 001E 20 00 80                jsr  cout 
2213 002B54 0021 CA                      dex 
2214 002B55 0022 D0 FA                   bne  PM_Line6_1 
2215 002B57 0024               
2216 002B57 0024 A9 5F                   lda  #'_'                    Right side | 
2217 002B59 0026 20 00 80                jsr cout 
2218 002B5C 0029               
2219 002B5C 0029              *          L i n e   7 
2220 002B5C 0029               
2221 002B5C 0029 A9 06                   lda  #7-1                    Set to line 7 
2222 002B5E 002B 85 25                   sta  VTab 
2223 002B60 002D A9 13                   lda  #20-1                   Set to column 20 
2224 002B62 002F 85 24                   sta  HTab 
2225 002B64 0031               
2226 002B64 0031 20 00 80                jsr  SetVTab 
2227 002B67 0034               
2228 002B67 0034 A9 5A                   lda  #'Z'                    Left side | 
2229 002B69 0036 20 00 80                jsr  cout 
2230 002B6C 0039               
2231 002B6C 0039 A9 3C                   lda  #61-1 
2232 002B6E 003B 85 24                   sta  HTab 
2233 002B70 003D               
2234 002B70 003D A9 5F                   lda  #'_' 
2235 002B72 003F 20 00 80                jsr  cout 
2236 002B75 0042               
2237 002B75 0042              *          L i n e   8 
2238 002B75 0042               
2239 002B75 0042 A9 07                   lda  #8-1                    Set to line 8 
2240 002B77 0044 85 25                   sta  VTab 
2241 002B79 0046 A9 13                   lda  #20-1                   HTab 20 
2242 002B7B 0048 85 24                   sta  HTab 
2243 002B7D 004A               
2244 002B7D 004A 20 00 80                jsr  SetVTab 
2245 002B80 004D               
2246 002B80 004D A9 5A                   lda  #'Z'                    Left side | 
2247 002B82 004F 20 00 80                jsr  cout 
2248 002B85 0052               
2249 002B85 0052 A9 3C                   lda  #61-1 
2250 002B87 0054 85 24                   sta  HTab                    HTab 61 
2251 002B89 0056               
2252 002B89 0056 A9 5F                   lda  #'_'                    Right side | 
2253 002B8B 0058 20 00 80                jsr  cout 
2254 002B8E 005B               
2255 002B8E 005B              *          L i n e   9 
2256 002B8E 005B               
2257 002B8E 005B A9 08                   lda  #9-1                    Set to line 9 
2258 002B90 005D 85 25                   sta  VTab 
2259 002B92 005F A9 13                   lda  #20-1                   Set to column 20 
2260 002B94 0061 85 24                   sta  HTab 
2261 002B96 0063               
2262 002B96 0063 20 00 80                jsr  SetVTab 
2263 002B99 0066               
2264 002B99 0066 A9 5A                   lda  #'Z'                    Left side | 
2265 002B9B 0068 20 00 80                jsr  cout 
2266 002B9E 006B               
2267 002B9E 006B A9 3C                   lda  #61-1 
2268 002BA0 006D 85 24                   sta  HTab 
2269 002BA2 006F               
2270 002BA2 006F A9 5F                   lda  #'_' 
2271 002BA4 0071 20 00 80                jsr  cout 
2272 002BA7 0074               
2273 002BA7 0074              *          L i n e   1 0 
2274 002BA7 0074               
2275 002BA7 0074 A9 09                   lda  #10-1                   Set to line 10 
2276 002BA9 0076 85 25                   sta  VTab 
2277 002BAB 0078 A9 13                   lda  #20-1                   Set to column 20 
2278 002BAD 007A 85 24                   sta  HTab 
2279 002BAF 007C               
2280 002BAF 007C 20 00 80                jsr  SetVTab 
2281 002BB2 007F               
2282 002BB2 007F A9 5A                   lda  #'Z'                    Left side | 
2283 002BB4 0081 20 00 80                jsr  cout 
2284 002BB7 0084               
2285 002BB7 0084 A9 15                   lda  #22-1 
2286 002BB9 0086 85 24                   sta  HTab                    HTab 22 
2287 002BBB 0088               
2288 002BBB 0088 20 00 80                jsr  SetNorm                 Normal text 
2289 002BBE 008B               
2290 002BBE 008B A2 19                   ldx  #25 
2291 002BC0 008D A9 DF                   lda  #'_'+$80                25 underscores 
2292 002BC2 008F               
2293 002BC2 008F              PM_Lin10_1 Anop 
2294 002BC2 008F               
2295 002BC2 008F 20 00 80                jsr  cout 
2296 002BC5 0092 CA                      dex 
2297 002BC6 0093 D0 FA                   bne  PM_Lin10_1 
2298 002BC8 0095               
2299 002BC8 0095 A9 30                   lda  #49-1 
2300 002BCA 0097 85 24                   sta  HTab                    HTab 49 
2301 002BCC 0099               
2302 002BCC 0099 A2 0A                   ldx  #10 
2303 002BCE 009B A9 DF                   lda  #'_'+$80                10 underscores 
2304 002BD0 009D               
2305 002BD0 009D              PM_Lin10_2 Anop 
2306 002BD0 009D               
2307 002BD0 009D 20 00 80                jsr  cout 
2308 002BD3 00A0 CA                      dex 
2309 002BD4 00A1 D0 FA                   bne  PM_Lin10_2 
2310 002BD6 00A3               
2311 002BD6 00A3 20 00 80                jsr  SetInv 
2312 002BD9 00A6               
2313 002BD9 00A6 A9 3C                   lda  #61-1 
2314 002BDB 00A8 85 24                   sta  HTab 
2315 002BDD 00AA               
2316 002BDD 00AA A9 5F                   lda  #'_'                    Right side | 
2317 002BDF 00AC 20 00 80                jsr  cout 
2318 002BE2 00AF               
2319 002BE2 00AF              *          L i n e   1 1 
2320 002BE2 00AF               
2321 002BE2 00AF A9 0A                   lda  #11-1                   Set to line 11 
2322 002BE4 00B1 85 25                   sta  VTab 
2323 002BE6 00B3 A9 13                   lda  #20-1                   Set to column 20 
2324 002BE8 00B5 85 24                   sta  HTab 
2325 002BEA 00B7               
2326 002BEA 00B7 20 00 80                jsr  SetVTab 
2327 002BED 00BA               
2328 002BED 00BA A9 5A                   lda  #'Z'                    Left side | 
2329 002BEF 00BC 20 00 80                jsr  cout 
2330 002BF2 00BF 20 00 80                jsr  cout                    x 2 
2331 002BF5 00C2               
2332 002BF5 00C2 A9 2C                   lda  #45-1 
2333 002BF7 00C4 85 24                   sta  HTab                    HTab 45 
2334 002BF9 00C6               
2335 002BF9 00C6 A9 5A                   lda  #'Z' 
2336 002BFB 00C8 20 00 80                jsr  cout                    | 
2337 002BFE 00CB               
2338 002BFE 00CB A9 52                   lda  #'R' 
2339 002C00 00CD 20 00 80                jsr  cout                    Up scroll arrow 
2340 002C03 00D0               
2341 002C03 00D0 A9 2F                   lda  #48-1 
2342 002C05 00D2 85 24                   sta  HTab                    HTab 47 
2343 002C07 00D4               
2344 002C07 00D4 A9 5A                   lda  #'Z' 
2345 002C09 00D6 20 00 80                jsr  cout                    | 
2346 002C0C 00D9               
2347 002C0C 00D9 A9 18                   lda  #StdText 
2348 002C0E 00DB 20 00 80                jsr  cout                    Normal text 
2349 002C11 00DE               
2350 002C11 00DE A9 A0                   lda  #' '+$80 
2351 002C13 00E0 20 00 80                jsr  cout                    Inverse block 
2352 002C16 00E3               
2353 002C16 00E3 A9 0E                   lda  #Normal 
2354 002C18 00E5 20 00 80                jsr  cout 
2355 002C1B 00E8               
2356 002C1B 00E8 A2 08                   ldx  #DisksTextE-DisksText 
2357 002C1D 00EA A0 00                   ldy  #$00 
2358 002C1F 00EC               
2359 002C1F 00EC              PM_Line11_1 Anop 
2360 002C1F 00EC               
2361 002C1F 00EC B9 76 03                lda  DisksText,y 
2362 002C22 00EF 20 00 80                jsr  cout 
2363 002C25 00F2 C8                      iny 
2364 002C26 00F3 CA                      dex 
2365 002C27 00F4 D0 F6                   bne  PM_Line11_1 
2366 002C29 00F6               
2367 002C29 00F6 A9 0F                   lda  #Inverse 
2368 002C2B 00F8 20 00 80                jsr  cout 
2369 002C2E 00FB               
2370 002C2E 00FB A9 1B                   lda  #MouseText              Mousetext back on 
2371 002C30 00FD 20 00 80                jsr  cout 
2372 002C33 0100               
2373 002C33 0100 A9 A0                   lda  #' '+$80 
2374 002C35 0102 20 00 80                jsr  cout                    Inverse block 
2375 002C38 0105               
2376 002C38 0105 A9 1B                   lda  #MouseText              Mousetext back on 
2377 002C3A 0107 20 00 80                jsr  cout 
2378 002C3D 010A               
2379 002C3D 010A A9 5F                   lda  #'_' 
2380 002C3F 010C 20 00 80                jsr  cout 
2381 002C42 010F               
2382 002C42 010F 48                      pha                          Save character to print 
2383 002C43 0110 A9 3C                   lda  #61-1 
2384 002C45 0112 85 24                   sta  HTab                    HTab 61 
2385 002C47 0114               
2386 002C47 0114 68                      pla                          Restore character 
2387 002C48 0115 20 00 80                jsr  cout 
2388 002C4B 0118               
2389 002C4B 0118              *          L i n e   1 2 
2390 002C4B 0118               
2391 002C4B 0118 A9 0B                   lda  #12-1                   Set to line 12 
2392 002C4D 011A 85 25                   sta  VTab 
2393 002C4F 011C A9 13                   lda  #20-1                   Set to column 20 
2394 002C51 011E 85 24                   sta  HTab 
2395 002C53 0120               
2396 002C53 0120 20 00 80                jsr  SetVTab 
2397 002C56 0123               
2398 002C56 0123 A9 5A                   lda  #'Z'                    Left side | 
2399 002C58 0125 20 00 80                jsr  cout 
2400 002C5B 0128 20 00 80                jsr  cout                    x2 
2401 002C5E 012B 48                      pha                          Save character 
2402 002C5F 012C               
2403 002C5F 012C A9 2C                   lda  #45-1 
2404 002C61 012E 85 24                   sta  HTab                    HTab 45 
2405 002C63 0130               
2406 002C63 0130 68                      pla                          Restore character 
2407 002C64 0131 20 00 80                jsr  cout 
2408 002C67 0134               
2409 002C67 0134 A9 56                   lda  #'V'                    Checkerboard 
2410 002C69 0136 20 00 80                jsr  cout 
2411 002C6C 0139               
2412 002C6C 0139 A9 30                   lda  #49-1 
2413 002C6E 013B 85 24                   sta  HTab                    HTab 49 
2414 002C70 013D               
2415 002C70 013D A2 0A                   ldx  #10 
2416 002C72 013F A9 4C                   lda  #'L'                    10 underscores 
2417 002C74 0141               
2418 002C74 0141              PM_Lin12_1 Anop 
2419 002C74 0141               
2420 002C74 0141 20 00 80                jsr  cout 
2421 002C77 0144 CA                      dex 
2422 002C78 0145 D0 FA                   bne  PM_Lin12_1 
2423 002C7A 0147               
2424 002C7A 0147 A9 3C                   lda  #61-1 
2425 002C7C 0149 85 24                   sta  HTab 
2426 002C7E 014B               
2427 002C7E 014B A9 5F                   lda  #'_'                    Right side | 
2428 002C80 014D 20 00 80                jsr  cout 
2429 002C83 0150               
2430 002C83 0150              *          L i n e   1 3 
2431 002C83 0150               
2432 002C83 0150 A9 0C                   lda  #13-1                   Set to line 13 
2433 002C85 0152 85 25                   sta  VTab 
2434 002C87 0154 A9 13                   lda  #20-1                   Set to column 20 
2435 002C89 0156 85 24                   sta  HTab 
2436 002C8B 0158               
2437 002C8B 0158 20 00 80                jsr  SetVTab 
2438 002C8E 015B               
2439 002C8E 015B A9 5A                   lda  #'Z'                    Left side | 
2440 002C90 015D 20 00 80                jsr  cout 
2441 002C93 0160 20 00 80                jsr  cout                    x2 
2442 002C96 0163 48                      pha                          Save character 
2443 002C97 0164               
2444 002C97 0164 A9 2C                   lda  #45-1 
2445 002C99 0166 85 24                   sta  HTab                    HTab 45 
2446 002C9B 0168               
2447 002C9B 0168 68                      pla                          Restore character 
2448 002C9C 0169 20 00 80                jsr  cout 
2449 002C9F 016C               
2450 002C9F 016C A9 56                   lda  #'V'                    Checkerboard 
2451 002CA1 016E 20 00 80                jsr  cout 
2452 002CA4 0171               
2453 002CA4 0171 A9 30                   lda  #49-1 
2454 002CA6 0173 85 24                   sta  HTab                    HTab 49 
2455 002CA8 0175               
2456 002CA8 0175 20 00 80                jsr  SetNorm 
2457 002CAB 0178 A2 0A                   ldx  #10 
2458 002CAD 017A A9 DF                   lda  #'_'+$80                10 underscores 
2459 002CAF 017C               
2460 002CAF 017C              PM_Lin13_1 Anop 
2461 002CAF 017C               
2462 002CAF 017C 20 00 80                jsr  cout 
2463 002CB2 017F CA                      dex 
2464 002CB3 0180 D0 FA                   bne  PM_Lin13_1 
2465 002CB5 0182               
2466 002CB5 0182 20 00 80                jsr  SetInv 
2467 002CB8 0185               
2468 002CB8 0185 A9 3C                   lda  #61-1 
2469 002CBA 0187 85 24                   sta  HTab 
2470 002CBC 0189               
2471 002CBC 0189 A9 5F                   lda  #'_'                    Right side | 
2472 002CBE 018B 20 00 80                jsr  cout 
2473 002CC1 018E               
2474 002CC1 018E              *          L i n e   1 4 
2475 002CC1 018E               
2476 002CC1 018E A9 0D                   lda  #14-1                   Set to line 14 
2477 002CC3 0190 85 25                   sta  VTab 
2478 002CC5 0192 A9 13                   lda  #20-1                   Set to column 20 
2479 002CC7 0194 85 24                   sta  HTab 
2480 002CC9 0196               
2481 002CC9 0196 20 00 80                jsr  SetVTab 
2482 002CCC 0199               
2483 002CCC 0199 A9 5A                   lda  #'Z'                    Left side | 
2484 002CCE 019B 20 00 80                jsr  cout 
2485 002CD1 019E 20 00 80                jsr  cout                    x2 
2486 002CD4 01A1 48                      pha                          Save character 
2487 002CD5 01A2               
2488 002CD5 01A2 A9 2C                   lda  #45-1 
2489 002CD7 01A4 85 24                   sta  HTab                    HTab 45 
2490 002CD9 01A6               
2491 002CD9 01A6 68                      pla                          Restore character 
2492 002CDA 01A7 20 00 80                jsr  cout 
2493 002CDD 01AA               
2494 002CDD 01AA A9 56                   lda  #'V'                    Checkerboard 
2495 002CDF 01AC 20 00 80                jsr  cout 
2496 002CE2 01AF               
2497 002CE2 01AF A9 2F                   lda  #48-1 
2498 002CE4 01B1 85 24                   sta  HTab                    HTab 48 
2499 002CE6 01B3               
2500 002CE6 01B3 A9 5A                   lda  #'Z' 
2501 002CE8 01B5 20 00 80                jsr  cout                    | 
2502 002CEB 01B8               
2503 002CEB 01B8 A9 18                   lda  #StdText 
2504 002CED 01BA 20 00 80                jsr  cout                    Normal text 
2505 002CF0 01BD               
2506 002CF0 01BD A9 A0                   lda  #' '+$80 
2507 002CF2 01BF 20 00 80                jsr  cout                    Inverse block 
2508 002CF5 01C2               
2509 002CF5 01C2 A2 08                   ldx  #OpenTextE-OpenText 
2510 002CF7 01C4 A0 00                   ldy  #$00 
2511 002CF9 01C6               
2512 002CF9 01C6              PM_Line14_1 Anop 
2513 002CF9 01C6               
2514 002CF9 01C6 B9 7E 03                lda  OpenText,y 
2515 002CFC 01C9 20 00 80                jsr  cout 
2516 002CFF 01CC C8                      iny 
2517 002D00 01CD CA                      dex 
2518 002D01 01CE D0 F6                   bne  PM_Line14_1 
2519 002D03 01D0               
2520 002D03 01D0 A9 1B                   lda  #MouseText              Mousetext back on 
2521 002D05 01D2 20 00 80                jsr  cout 
2522 002D08 01D5               
2523 002D08 01D5 A9 A0                   lda  #' '+$80 
2524 002D0A 01D7 20 00 80                jsr  cout                    Inverse block 
2525 002D0D 01DA               
2526 002D0D 01DA A9 1B                   lda  #MouseText              Mousetext back on 
2527 002D0F 01DC 20 00 80                jsr  cout 
2528 002D12 01DF               
2529 002D12 01DF A9 5F                   lda  #'_' 
2530 002D14 01E1 20 00 80                jsr  cout 
2531 002D17 01E4               
2532 002D17 01E4 A9 3C                   lda  #61-1 
2533 002D19 01E6 85 24                   sta  HTab 
2534 002D1B 01E8               
2535 002D1B 01E8 A9 5F                   lda  #'_'                    Right side | 
2536 002D1D 01EA 20 00 80                jsr  cout 
2537 002D20 01ED               
2538 002D20 01ED              *          L i n e   1 5 
2539 002D20 01ED               
2540 002D20 01ED A9 0E                   lda  #15-1                   Set to line 14 
2541 002D22 01EF 85 25                   sta  VTab 
2542 002D24 01F1 A9 13                   lda  #20-1                   Set to column 20 
2543 002D26 01F3 85 24                   sta  HTab 
2544 002D28 01F5               
2545 002D28 01F5 20 00 80                jsr  SetVTab 
2546 002D2B 01F8               
2547 002D2B 01F8 A9 5A                   lda  #'Z'                    Left side | 
2548 002D2D 01FA 20 00 80                jsr  cout 
2549 002D30 01FD 20 00 80                jsr  cout                    x2 
2550 002D33 0200 48                      pha                          Save character 
2551 002D34 0201               
2552 002D34 0201 A9 2C                   lda  #45-1 
2553 002D36 0203 85 24                   sta  HTab                    HTab 45 
2554 002D38 0205               
2555 002D38 0205 68                      pla                          Restore character 
2556 002D39 0206 20 00 80                jsr  cout 
2557 002D3C 0209               
2558 002D3C 0209 A9 56                   lda  #'V'                    Checkerboard 
2559 002D3E 020B 20 00 80                jsr  cout 
2560 002D41 020E               
2561 002D41 020E A9 30                   lda  #49-1 
2562 002D43 0210 85 24                   sta  HTab                    HTab 49 
2563 002D45 0212               
2564 002D45 0212 20 00 80                jsr  SetNorm 
2565 002D48 0215 A2 0A                   ldx  #10 
2566 002D4A 0217 A9 5C                   lda  #'\'                    10 underscores 
2567 002D4C 0219               
2568 002D4C 0219              PM_Lin15_1 Anop 
2569 002D4C 0219               
2570 002D4C 0219 20 00 80                jsr  cout 
2571 002D4F 021C CA                      dex 
2572 002D50 021D D0 FA                   bne  PM_Lin15_1 
2573 002D52 021F               
2574 002D52 021F A9 3C                   lda  #61-1 
2575 002D54 0221 85 24                   sta  HTab 
2576 002D56 0223               
2577 002D56 0223 A9 5F                   lda  #'_'                    Right side | 
2578 002D58 0225 20 00 80                jsr  cout 
2579 002D5B 0228               
2580 002D5B 0228              *          L i n e   1 6 
2581 002D5B 0228               
2582 002D5B 0228 A9 0F                   lda  #16-1                   Set to line 16 
2583 002D5D 022A 85 25                   sta  VTab 
2584 002D5F 022C A9 13                   lda  #20-1                   Set to column 20 
2585 002D61 022E 85 24                   sta  HTab 
2586 002D63 0230               
2587 002D63 0230 20 00 80                jsr  SetVTab 
2588 002D66 0233               
2589 002D66 0233 A9 5A                   lda  #'Z'                    Left side | 
2590 002D68 0235 20 00 80                jsr  cout 
2591 002D6B 0238 20 00 80                jsr  cout                    x2 
2592 002D6E 023B 48                      pha                          Save character 
2593 002D6F 023C               
2594 002D6F 023C A9 2C                   lda  #45-1 
2595 002D71 023E 85 24                   sta  HTab                    HTab 45 
2596 002D73 0240               
2597 002D73 0240 68                      pla                          Restore character 
2598 002D74 0241 20 00 80                jsr  cout 
2599 002D77 0244               
2600 002D77 0244 A9 56                   lda  #'V'                    Checkerboard 
2601 002D79 0246 20 00 80                jsr  cout 
2602 002D7C 0249               
2603 002D7C 0249 A9 2F                   lda  #48-1 
2604 002D7E 024B 85 24                   sta  HTab                    HTab 48 
2605 002D80 024D               
2606 002D80 024D A9 5A                   lda  #'Z' 
2607 002D82 024F 20 00 80                jsr  cout                    | 
2608 002D85 0252               
2609 002D85 0252 A9 18                   lda  #StdText 
2610 002D87 0254 20 00 80                jsr  cout                    Normal text 
2611 002D8A 0257               
2612 002D8A 0257 20 00 80                jsr  SetInv 
2613 002D8D 025A               
2614 002D8D 025A A9 A0                   lda  #' '+$80 
2615 002D8F 025C 20 00 80                jsr  cout                    Inverse block 
2616 002D92 025F               
2617 002D92 025F A9 0E                   lda  #Normal 
2618 002D94 0261 20 00 80                jsr  cout 
2619 002D97 0264               
2620 002D97 0264 A2 08                   ldx  #CloseTextE-CloseText 
2621 002D99 0266 A0 00                   ldy  #$00 
2622 002D9B 0268               
2623 002D9B 0268              PM_Line16_1 Anop 
2624 002D9B 0268               
2625 002D9B 0268 B9 86 03                lda  CloseText,y 
2626 002D9E 026B 20 00 80                jsr  cout 
2627 002DA1 026E C8                      iny 
2628 002DA2 026F CA                      dex 
2629 002DA3 0270 D0 F6                   bne  PM_Line16_1 
2630 002DA5 0272               
2631 002DA5 0272 A9 0F                   lda  #Inverse 
2632 002DA7 0274 20 00 80                jsr  cout 
2633 002DAA 0277               
2634 002DAA 0277 A9 1B                   lda  #MouseText              Mousetext back on 
2635 002DAC 0279 20 00 80                jsr  cout 
2636 002DAF 027C               
2637 002DAF 027C A9 A0                   lda  #' '+$80 
2638 002DB1 027E 20 00 80                jsr  cout                    Inverse block 
2639 002DB4 0281               
2640 002DB4 0281 A9 5F                   lda  #'_' 
2641 002DB6 0283 20 00 80                jsr  cout 
2642 002DB9 0286               
2643 002DB9 0286 A9 3C                   lda  #61-1 
2644 002DBB 0288 85 24                   sta  HTab 
2645 002DBD 028A               
2646 002DBD 028A A9 5F                   lda  #'_'                    Right side | 
2647 002DBF 028C 20 00 80                jsr  cout 
2648 002DC2 028F               
2649 002DC2 028F              *          L i n e   1 7 
2650 002DC2 028F               
2651 002DC2 028F A9 10                   lda  #17-1                   Set to line 17 
2652 002DC4 0291 85 25                   sta  VTab 
2653 002DC6 0293 A9 13                   lda  #20-1                   Set to column 20 
2654 002DC8 0295 85 24                   sta  HTab 
2655 002DCA 0297               
2656 002DCA 0297 20 00 80                jsr  SetVTab 
2657 002DCD 029A               
2658 002DCD 029A A9 5A                   lda  #'Z'                    Left side | 
2659 002DCF 029C 20 00 80                jsr  cout 
2660 002DD2 029F 20 00 80                jsr  cout                    x2 
2661 002DD5 02A2 48                      pha                          Save character 
2662 002DD6 02A3               
2663 002DD6 02A3 A9 2C                   lda  #45-1 
2664 002DD8 02A5 85 24                   sta  HTab                    HTab 45 
2665 002DDA 02A7               
2666 002DDA 02A7 68                      pla                          Restore character 
2667 002DDB 02A8 20 00 80                jsr  cout 
2668 002DDE 02AB               
2669 002DDE 02AB A9 56                   lda  #'V'                    Checkerboard 
2670 002DE0 02AD 20 00 80                jsr  cout 
2671 002DE3 02B0               
2672 002DE3 02B0 A9 30                   lda  #49-1 
2673 002DE5 02B2 85 24                   sta  HTab                    HTab 49 
2674 002DE7 02B4               
2675 002DE7 02B4 20 00 80                jsr  SetNorm 
2676 002DEA 02B7 A2 0A                   ldx  #10 
2677 002DEC 02B9 A9 5C                   lda  #'\'                    10 underscores 
2678 002DEE 02BB               
2679 002DEE 02BB              PM_Lin17_1 Anop 
2680 002DEE 02BB               
2681 002DEE 02BB 20 00 80                jsr  cout 
2682 002DF1 02BE CA                      dex 
2683 002DF2 02BF D0 FA                   bne  PM_Lin17_1 
2684 002DF4 02C1               
2685 002DF4 02C1 A9 3C                   lda  #61-1 
2686 002DF6 02C3 85 24                   sta  HTab 
2687 002DF8 02C5               
2688 002DF8 02C5 A9 5F                   lda  #'_'                    Right side | 
2689 002DFA 02C7 20 00 80                jsr  cout 
2690 002DFD 02CA               
2691 002DFD 02CA              *          L i n e   1 8 
2692 002DFD 02CA               
2693 002DFD 02CA A9 11                   lda  #18-1                   Set to line 18 
2694 002DFF 02CC 85 25                   sta  VTab 
2695 002E01 02CE A9 13                   lda  #20-1                   Set to column 20 
2696 002E03 02D0 85 24                   sta  HTab 
2697 002E05 02D2               
2698 002E05 02D2 20 00 80                jsr  SetVTab 
2699 002E08 02D5               
2700 002E08 02D5 A9 5A                   lda  #'Z'                    Left side | 
2701 002E0A 02D7 20 00 80                jsr  cout 
2702 002E0D 02DA 20 00 80                jsr  cout                    x 2 
2703 002E10 02DD               
2704 002E10 02DD A9 2C                   lda  #45-1 
2705 002E12 02DF 85 24                   sta  HTab                    HTab 45 
2706 002E14 02E1               
2707 002E14 02E1 A9 5A                   lda  #'Z' 
2708 002E16 02E3 20 00 80                jsr  cout                    | 
2709 002E19 02E6               
2710 002E19 02E6 A9 51                   lda  #'Q' 
2711 002E1B 02E8 20 00 80                jsr  cout                    Down scroll arrow 
2712 002E1E 02EB               
2713 002E1E 02EB A9 2F                   lda  #48-1 
2714 002E20 02ED 85 24                   sta  HTab                    HTab 48 
2715 002E22 02EF               
2716 002E22 02EF A9 5A                   lda  #'Z' 
2717 002E24 02F1 20 00 80                jsr  cout                    | 
2718 002E27 02F4               
2719 002E27 02F4 A9 18                   lda  #StdText 
2720 002E29 02F6 20 00 80                jsr  cout                    Normal text 
2721 002E2C 02F9               
2722 002E2C 02F9 20 00 80                jsr  SetInv 
2723 002E2F 02FC               
2724 002E2F 02FC A9 A0                   lda  #' '+$80 
2725 002E31 02FE 20 00 80                jsr  cout                    Inverse block 
2726 002E34 0301               
2727 002E34 0301 A9 0E                   lda  #Normal 
2728 002E36 0303 20 00 80                jsr  cout 
2729 002E39 0306               
2730 002E39 0306 A2 08                   ldx  #CanclTextE-CanclText 
2731 002E3B 0308 A0 00                   ldy  #$00 
2732 002E3D 030A               
2733 002E3D 030A              PM_Line18_1 Anop 
2734 002E3D 030A               
2735 002E3D 030A B9 8E 03                lda  CanclText,y 
2736 002E40 030D 20 00 80                jsr  cout 
2737 002E43 0310 C8                      iny 
2738 002E44 0311 CA                      dex 
2739 002E45 0312 D0 F6                   bne  PM_Line18_1 
2740 002E47 0314               
2741 002E47 0314 A9 0F                   lda  #Inverse 
2742 002E49 0316 20 00 80                jsr  cout 
2743 002E4C 0319               
2744 002E4C 0319 A9 A0                   lda  #' '+$80 
2745 002E4E 031B 20 00 80                jsr  cout                    Inverse block 
2746 002E51 031E               
2747 002E51 031E A9 1B                   lda  #MouseText              Mousetext back on 
2748 002E53 0320 20 00 80                jsr  cout 
2749 002E56 0323               
2750 002E56 0323 A9 5F                   lda  #'_' 
2751 002E58 0325 20 00 80                jsr  cout 
2752 002E5B 0328               
2753 002E5B 0328 48                      pha                          Save character to print 
2754 002E5C 0329 A9 3C                   lda  #61-1 
2755 002E5E 032B 85 24                   sta  HTab                    HTab 61 
2756 002E60 032D               
2757 002E60 032D 68                      pla                          Restore character 
2758 002E61 032E 20 00 80                jsr  cout 
2759 002E64 0331               
2760 002E64 0331              *          L i n e   1 9 
2761 002E64 0331               
2762 002E64 0331 A9 12                   lda  #19-1                   Set to line 19 
2763 002E66 0333 85 25                   sta  VTab 
2764 002E68 0335 A9 13                   lda  #20-1                   Set to column 20 
2765 002E6A 0337 85 24                   sta  HTab 
2766 002E6C 0339               
2767 002E6C 0339 20 00 80                jsr  SetVTab 
2768 002E6F 033C               
2769 002E6F 033C 20 00 80                jsr  SetNorm 
2770 002E72 033F               
2771 002E72 033F A9 5A                   lda  #'Z'                    Left side | 
2772 002E74 0341 20 00 80                jsr  cout 
2773 002E77 0344               
2774 002E77 0344 A9 DF                   lda  #'_'+$80 
2775 002E79 0346 20 00 80                jsr  cout                    HTab 22 
2776 002E7C 0349               
2777 002E7C 0349 A2 19                   ldx  #25 
2778 002E7E 034B A9 5C                   lda  #'\'                    25 underscores 
2779 002E80 034D               
2780 002E80 034D              PM_Lin19_1 Anop 
2781 002E80 034D               
2782 002E80 034D 20 00 80                jsr  cout 
2783 002E83 0350 CA                      dex 
2784 002E84 0351 D0 FA                   bne  PM_Lin19_1 
2785 002E86 0353               
2786 002E86 0353 A9 DF                   lda  #'_'+$80 
2787 002E88 0355 20 00 80                jsr  cout 
2788 002E8B 0358 20 00 80                jsr  cout 
2789 002E8E 035B               
2790 002E8E 035B A2 0A                   ldx  #10 
2791 002E90 035D A9 5C                   lda  #'\'                    10 underscores 
2792 002E92 035F               
2793 002E92 035F              PM_Lin19_2 Anop 
2794 002E92 035F               
2795 002E92 035F 20 00 80                jsr  cout 
2796 002E95 0362 CA                      dex 
2797 002E96 0363 D0 FA                   bne  PM_Lin19_2 
2798 002E98 0365               
2799 002E98 0365 A9 DF                   lda  #'_'+$80 
2800 002E9A 0367 20 00 80                jsr  cout 
2801 002E9D 036A 20 00 80                jsr  cout 
2802 002EA0 036D               
2803 002EA0 036D A9 5F                   lda  #'_'                    Right side | 
2804 002EA2 036F 20 00 80                jsr  cout 
2805 002EA5 0372               
2806 002EA5 0372 20 00 80                jsr  SetNorm 
2807 002EA8 0375 60                      rts 
2808 002EA9 0376               
2809 002EA9 0376                         MSB  On 
2810 002EA9 0376               
2811 002EA9 0376              DisksText  Anop 
2812 002EA9 0376               
2813 002EA9 0376 A0 C4 E9 F3             dc   C' Disks  ' 
2814 002EB1 037E               
2815 002EB1 037E              DisksTextE Anop 
2816 002EB1 037E               
2817 002EB1 037E              OpenText   Anop 
2818 002EB1 037E               
2819 002EB1 037E A0 A0 CF F0             dc   C'  Open  ' 
2820 002EB9 0386               
2821 002EB9 0386              OpenTextE  Anop 
2822 002EB9 0386               
2823 002EB9 0386              CloseText  Anop 
2824 002EB9 0386               
2825 002EB9 0386 A0 C3 EC EF             dc   C' Close  ' 
2826 002EC1 038E               
2827 002EC1 038E              CloseTextE Anop 
2828 002EC1 038E               
2829 002EC1 038E              CanclText  Anop 
2830 002EC1 038E               
2831 002EC1 038E A0 C3 E1 EE             dc   C' Cancel ' 
2832 002EC9 0396               
2833 002EC9 0396              CanclTextE Anop 
2834 002EC9 0396               
2835 002EC9 0396                         MSB Off 
2836 002EC9 0396               
2837 002EC9 0396              * 
2838 002EC9 0396              * Clear menu1 data area 
2839 002EC9 0396              * 
2840 002EC9 0396               
2841 002EC9 0396              ClearMenu1 Entry 
2842 002EC9 0396               
2843 002EC9 0396 A9 13                   lda  #20-1                   Start at HTab 20 
2844 002ECB 0398 85 24                   sta  HTab 
2845 002ECD 039A A9 05                   lda  #6-1                    Start at VTab 6 
2846 002ECF 039C 85 25                   sta  VTab 
2847 002ED1 039E 20 00 80                jsr  SetVTab 
2848 002ED4 03A1               
2849 002ED4 03A1 A0 0F                   ldy  #15                     Total lines to wipe out 
2850 002ED6 03A3               
2851 002ED6 03A3              NextLine   anop 
2852 002ED6 03A3               
2853 002ED6 03A3 5A                      phy                          Save y register 
2854 002ED7 03A4 A9 A0                   lda  #' '+$80                Space character 
2855 002ED9 03A6 A2 2A                   ldx  #42                     Character per line to wipe out 
2856 002EDB 03A8               
2857 002EDB 03A8              NextChar   anop 
2858 002EDB 03A8               
2859 002EDB 03A8 20 00 80                jsr  cout                    Print space 
2860 002EDE 03AB CA                      dex                          Count space printed 
2861 002EDF 03AC D0 FA                   bne  NextChar                More? 
2862 002EE1 03AE               
2863 002EE1 03AE A9 13                   lda  #20-1                   Line complete 
2864 002EE3 03B0 85 24                   sta  HTab                    Set HTab back to 20 
2865 002EE5 03B2 E6 25                   inc  VTab                    Bump up VTAB 
2866 002EE7 03B4 20 00 80                jsr  SetVTab 
2867 002EEA 03B7               
2868 002EEA 03B7 7A                      ply                          Restore y register 
2869 002EEB 03B8 88                      dey                          Count line printed 
2870 002EEC 03B9 D0 E8                   bne  NextLine                More 
2871 002EEE 03BB               
2872 002EEE 03BB 60                      rts                          Return 
2873 002EEF 03BC               
2874 002EEF 03BC                         End 
 
 
 
Local  Symbols
 
CANCLTEXT  00038E  CANCLTEXTE 000396  CLEARMENU1 000396  CLOSETEXT  000386   
CLOSETEXTE 00038E  DISKSTEXT  000376  DISKSTEXTE 00037E  NEXTCHAR   0003A8   
NEXTLINE   0003A3  OPENTEXT   00037E  OPENTEXTE  000386  PM_LIN10_1 00008F   
PM_LIN10_2 00009D  PM_LIN12_1 000141  PM_LIN13_1 00017C  PM_LIN15_1 000219   
PM_LIN17_1 0002BB  PM_LIN19_1 00034D  PM_LIN19_2 00035F  PM_LINE11_ 0000EC   
PM_LINE14_ 0001C6  PM_LINE16_ 000268  PM_LINE18_ 00030A  PM_LINE6_1 00001E   
2875 002EEF 0000                         Copy PrtFileName.s 
2876 002EEF 0000               
2877 002EEF 0000              PrtFileName Start 
2878 002EEF 0000                         Using Menu1Vars 
2879 002EEF 0000               
2880 002EEF 0000              * 
2881 002EEF 0000              *          Print file entry to screen 
2882 002EEF 0000              * 
2883 002EEF 0000              *          Prints a file entry at starting cursor position 
2884 002EEF 0000              * 
2885 002EEF 0000              *          Requires: Ptr1 set to address of entry to print 
2886 002EEF 0000              *                    Prt2 is used for mixed case conversion 
2887 002EEF 0000              *                    TextMode toggles inverse for selected file 
2888 002EEF 0000               
2889 002EEF 0000              * Offsets 
2890 002EEF 0000               
2891 002EEF 0000              oFileName  equ  $00 
2892 002EEF 0000              oFileTypeA equ  $11 - $13               Converted to ASCII by LoadDirectory 
2893 002EEF 0000              oLower1    equ  $1D 
2894 002EEF 0000              oLower2    equ  $1C 
2895 002EEF 0000              oLowerVol1 equ  $17                     $1B - $04 
2896 002EEF 0000              oLowerVol2 equ  $16                     $1A - $04 
2897 002EEF 0000               
2898 002EEF 0000 80 01                   bra  Start 
2899 002EF1 0002               
2900 002EF1 0002 00           FileLength ds   1 
2901 002EF2 0003               
2902 002EF2 0003              Start      anop 
2903 002EF2 0003               
2904 002EF2 0003 A0 00                   ldy  #oFileName              Filename offset 
2905 002EF4 0005 B1 06                   lda  (Ptr1),y                Get storage type / filename length 
2906 002EF6 0007 29 F0                   and  #$F0                    Keep only storage type 
2907 002EF8 0009 C9 F0                   cmp  #$F0                    Volume directory header? 
2908 002EFA 000B D0 30                   bne  PrtFile02               No 
2909 002EFC 000D               
2910 002EFC 000D              *          A volume directory 
2911 002EFC 000D               
2912 002EFC 000D A0 17                   ldy  #oLowerVol1 
2913 002EFE 000F B1 06                   lda  (Ptr1),y                Get first set of mixed case bits 
2914 002F00 0011 85 80                   sta  Ptr2 
2915 002F02 0013 A0 16                   ldy  #oLowerVol2             Get 2nd set of mixed case bits 
2916 002F04 0015 B1 06                   lda  (Ptr1),y 
2917 002F06 0017 A0 1C                   ldy  #oLower2                Save in position for normal file/dir. 
2918 002F08 0019 91 06                   sta  (Ptr1),y 
2919 002F0A 001B 06 80                   asl  Ptr2                    Test for mixed case. 
2920 002F0C 001D B0 08                   bcs  PrtFile01               Yes, process as normal. 
2921 002F0E 001F               
2922 002F0E 001F A9 00                   lda  #0                      No, zero out bits to force upper case 
2923 002F10 0021 85 80                   sta  Ptr2 
2924 002F12 0023 A0 16                   ldy  #oLowerVol2 
2925 002F14 0025 91 06                   sta  (Ptr1),y 
2926 002F16 0027               
2927 002F16 0027              PrtFile01  anop 
2928 002F16 0027               
2929 002F16 0027 A9 1B                   lda  #MouseText              Mousetext on 
2930 002F18 0029 20 00 80                jsr  cout 
2931 002F1B 002C A9 5A                   lda  #'Z' 
2932 002F1D 002E 20 00 80                jsr  cout                    | 
2933 002F20 0031 A9 5C                   lda  #'\' 
2934 002F22 0033 20 00 80                jsr  cout                    Two horizontal lines 
2935 002F25 0036 A9 5E                   lda  #'^' 
2936 002F27 0038 20 00 80                jsr  cout                    Box with dot 
2937 002F2A 003B 80 65                   bra  PrtFile06               Print file name 
2938 002F2C 003D               
2939 002F2C 003D              PrtFile02  anop 
2940 002F2C 003D               
2941 002F2C 003D A0 00                   ldy  #oFileName              Filename offset 
2942 002F2E 003F B1 06                   lda  (Ptr1),y                Get storage type / filename length 
2943 002F30 0041 29 F0                   and  #$F0                    Keep only storage type 
2944 002F32 0043 C9 E0                   cmp  #$E0                    Directory header? 
2945 002F34 0045 D0 1E                   bne  PrtFile03               No 
2946 002F36 0047               
2947 002F36 0047              *          A directory file header 
2948 002F36 0047               
2949 002F36 0047 A9 00                   lda  #0                      No mixed case info for a directory file 
2950 002F38 0049 85 80                   sta  Ptr2                    header so make it zeros to force upper 
2951 002F3A 004B A0 1C                   ldy  #oLower2                case only. 
2952 002F3C 004D 91 06                   sta  (Ptr1),y 
2953 002F3E 004F               
2954 002F3E 004F A9 1B                   lda  #MouseText 
2955 002F40 0051 20 00 80                jsr  cout 
2956 002F43 0054 A9 A0                   lda  #' '+$80 
2957 002F45 0056 20 00 80                jsr  cout 
2958 002F48 0059 A9 58                   lda  #'X' 
2959 002F4A 005B 20 00 80                jsr  cout                    Left half of folder 
2960 002F4D 005E A9 59                   lda  #'Y' 
2961 002F4F 0060 20 00 80                jsr  cout                    Right half of folder 
2962 002F52 0063 80 3D                   bra  PrtFile06               Print file name 
2963 002F54 0065               
2964 002F54 0065              PrtFile03  anop 
2965 002F54 0065               
2966 002F54 0065 A0 1D                   ldy  #oLower1 
2967 002F56 0067 B1 06                   lda  (Ptr1),y                Get first set of mixed case bits 
2968 002F58 0069 85 80                   sta  Ptr2 
2969 002F5A 006B 06 80                   asl  Ptr2                    Test for mixed case. 
2970 002F5C 006D B0 08                   bcs  PrtFile04               Yes, process as normal. 
2971 002F5E 006F               
2972 002F5E 006F A9 00                   lda  #0                      No, zero out bits to force upper case 
2973 002F60 0071 85 80                   sta  Ptr2 
2974 002F62 0073 A0 1C                   ldy  #oLower2 
2975 002F64 0075 91 06                   sta  (Ptr1),y 
2976 002F66 0077               
2977 002F66 0077              PrtFile04  anop 
2978 002F66 0077               
2979 002F66 0077 A0 00                   ldy  #oFileName              Filename offset 
2980 002F68 0079 B1 06                   lda  (Ptr1),y                Get storage type / filename length 
2981 002F6A 007B 29 F0                   and  #$F0                    Keep only storage type 
2982 002F6C 007D C9 D0                   cmp  #$D0                    Directory entry? 
2983 002F6E 007F D0 16                   bne  PrtFile05               No 
2984 002F70 0081               
2985 002F70 0081              *          Directory file entry 
2986 002F70 0081               
2987 002F70 0081 A9 1B                   lda  #MouseText 
2988 002F72 0083 20 00 80                jsr  cout 
2989 002F75 0086 A9 A0                   lda  #' '+$80 
2990 002F77 0088 20 00 80                jsr  cout 
2991 002F7A 008B A9 58                   lda  #'X' 
2992 002F7C 008D 20 00 80                jsr  cout                    Left half of folder 
2993 002F7F 0090 A9 59                   lda  #'Y' 
2994 002F81 0092 20 00 80                jsr  cout                    Right half of folder 
2995 002F84 0095 80 0B                   bra  PrtFile06               Print file name 
2996 002F86 0097               
2997 002F86 0097              PrtFile05  anop 
2998 002F86 0097               
2999 002F86 0097              *          Regular file entry 
3000 002F86 0097               
3001 002F86 0097 A9 A0                   lda  #' '+$80 
3002 002F88 0099 20 00 80                jsr  cout 
3003 002F8B 009C 20 00 80                jsr  cout                    Print three spaces 
3004 002F8E 009F 20 00 80                jsr  cout 
3005 002F91 00A2               
3006 002F91 00A2              PrtFile06  anop 
3007 002F91 00A2               
3008 002F91 00A2 A9 18                   lda  #StdText                Normal text 
3009 002F93 00A4 20 00 80                jsr  cout 
3010 002F96 00A7               
3011 002F96 00A7 A0 00                   ldy  #oFileName              Get file type 
3012 002F98 00A9 B1 06                   lda  (Ptr1),y 
3013 002F9A 00AB 29 F0                   and  #$F0 
3014 002F9C 00AD C9 40                   cmp  #$40                    File type < $40 is a regular file 
3015 002F9E 00AF 90 0B                   bcc  PtrFile06a 
3016 002FA0 00B1 C9 D0                   cmp  #$D0                    File type >= $D0 is a directory or 
3017 002FA2 00B3 B0 07                   bcs  PtrFile06a               a directory header 
3018 002FA4 00B5               
3019 002FA4 00B5 A9 AB                   lda  #'+'+$80                At here we have a non-ProDOS 8 file 
3020 002FA6 00B7 20 00 80                jsr  cout                     of some sort. 
3021 002FA9 00BA 80 05                   bra  PtrFile06b 
3022 002FAB 00BC               
3023 002FAB 00BC              PtrFile06a anop 
3024 002FAB 00BC               
3025 002FAB 00BC A9 A0                   lda  #' '+$80                Space 
3026 002FAD 00BE 20 00 80                jsr  cout                    Print space 
3027 002FB0 00C1               
3028 002FB0 00C1              PtrFile06b anop 
3029 002FB0 00C1               
3030 002FB0 00C1 AD 83 08                lda  TextMode                Set selected/not selected entry 
3031 002FB3 00C4 20 00 80                jsr  cout 
3032 002FB6 00C7 A9 0E                   lda  #Normal                 Set default TextMode to Normal text 
3033 002FB8 00C9 8D 83 08                sta  TextMode 
3034 002FBB 00CC               
3035 002FBB 00CC              *          Start printing file name 
3036 002FBB 00CC               
3037 002FBB 00CC A0 00                   ldy  #oFileName 
3038 002FBD 00CE B1 06                   lda  (Ptr1),y 
3039 002FBF 00D0 29 0F                   and  #$0F                    Keep only filename length 
3040 002FC1 00D2 8D 02 00                sta  FileLength              Temp save for later 
3041 002FC4 00D5 AA                      tax                          x reg = remaining chars to print 
3042 002FC5 00D6 A0 00                   ldy  #oFileName              y reg = index 
3043 002FC7 00D8 C8                      iny                          Move to first character of name 
3044 002FC8 00D9               
3045 002FC8 00D9              PrtFile07  anop 
3046 002FC8 00D9               
3047 002FC8 00D9 B1 06                   lda  (Ptr1),y                Get character 
3048 002FCA 00DB 06 80                   asl  ptr2                    Check for lower case character 
3049 002FCC 00DD 90 03                   bcc  PrtFile08               No, so skip lower case conversion. 
3050 002FCE 00DF               
3051 002FCE 00DF 18                      clc 
3052 002FCF 00E0 69 20                   adc  #32                     Convert to lower case 
3053 002FD1 00E2               
3054 002FD1 00E2              PrtFile08  anop 
3055 002FD1 00E2               
3056 002FD1 00E2 09 80                   ora  #$80                    Set high bit on 
3057 002FD3 00E4 20 00 80                jsr  cout                    Print character 
3058 002FD6 00E7               
3059 002FD6 00E7 C8                      iny                          Move index to next character 
3060 002FD7 00E8 C0 08                   cpy  #oFileName+8            Check to see if we need the 2nd set of 
3061 002FD9 00EA D0 08                   bne  PrtFile09               mixed case bits. 
3062 002FDB 00EC               
3063 002FDB 00EC 5A                      phy                          Save y-reg 
3064 002FDC 00ED A0 1C                   ldy  #oLower2                Get location of 2nd set of mixed bits. 
3065 002FDE 00EF B1 06                   lda  (Ptr1),y                Retrieve next set of midex case bits 
3066 002FE0 00F1 85 80                   sta  ptr2                    Save bits in our pointer. 
3067 002FE2 00F3 7A                      ply                          Restore y-reg. 
3068 002FE3 00F4               
3069 002FE3 00F4              PrtFile09  anop 
3070 002FE3 00F4               
3071 002FE3 00F4 CA                      dex                          More to print? 
3072 002FE4 00F5 D0 E2                   bne  PrtFile07               Yes 
3073 002FE6 00F7               
3074 002FE6 00F7 A9 0F                   lda  #15                     Calculate spaces requred to pad 
3075 002FE8 00F9 38                      sec 
3076 002FE9 00FA ED 02 00                sbc  FileLength 
3077 002FEC 00FD F0 09                   beq  PrtFile11               No spaces required, exit. 
3078 002FEE 00FF               
3079 002FEE 00FF AA                      tax 
3080 002FEF 0100 A9 A0                   lda  #' '+$80                Space 
3081 002FF1 0102               
3082 002FF1 0102              PrtFile10  anop 
3083 002FF1 0102               
3084 002FF1 0102 20 00 80                jsr  cout                    Print space 
3085 002FF4 0105 CA                      dex 
3086 002FF5 0106 D0 FA                   bne  PrtFile10 
3087 002FF7 0108               
3088 002FF7 0108              PrtFile11  anop 
3089 002FF7 0108               
3090 002FF7 0108 A5 06                   lda  Ptr1 
3091 002FF9 010A C9 00                   cmp  #VolHeader 
3092 002FFB 010C D0 08                   bne  PrtFile12 
3093 002FFD 010E A5 07                   lda  Ptr1+1 
3094 002FFF 0110 C9 80                   cmp  #>VolHeader 
3095 003001 0112 D0 02                   bne  PrtFile12 
3096 003003 0114 80 14                   bra  PrtFile14 
3097 003005 0116               
3098 003005 0116              PrtFile12  anop 
3099 003005 0116               
3100 003005 0116 A9 A0                   lda  #' '+$80 
3101 003007 0118 20 00 80                jsr  cout                    Print a space 
3102 00300A 011B               
3103 00300A 011B A2 03                   ldx  #3 
3104 00300C 011D A0 11                   ldy  #oFileTypeA 
3105 00300E 011F               
3106 00300E 011F              PrtFile13  anop                         Print file type loop 
3107 00300E 011F               
3108 00300E 011F B1 06                   lda  (Ptr1),y 
3109 003010 0121 09 80                   ora  #$80 
3110 003012 0123 20 00 80                jsr  cout 
3111 003015 0126 C8                      iny 
3112 003016 0127 CA                      dex 
3113 003017 0128 D0 F5                   bne  PrtFile13 
3114 003019 012A               
3115 003019 012A              PrtFile14  anop 
3116 003019 012A               
3117 003019 012A A9 0E                   lda  #Normal                 Make sure Normal text mode. 
3118 00301B 012C 20 00 80                jsr  cout 
3119 00301E 012F               
3120 00301E 012F 60                      rts 
3121 00301F 0130               
3122 00301F 0130                         End 
 
 
 
Local  Symbols
 
FILELENGTH 000002  OFILENAME  000000  OFILETYPEA 000011  OLOWER1    00001D   
OLOWER2    00001C  OLOWERVOL1 000017  OLOWERVOL2 000016  PRTFILE01  000027   
PRTFILE02  00003D  PRTFILE03  000065  PRTFILE04  000077  PRTFILE05  000097   
PRTFILE06  0000A2  PRTFILE07  0000D9  PRTFILE08  0000E2  PRTFILE09  0000F4   
PRTFILE10  000102  PRTFILE11  000108  PRTFILE12  000116  PRTFILE13  00011F   
PRTFILE14  00012A  PTRFILE06A 0000BC  PTRFILE06B 0000C1  START      000003   
3123 00301F 0000                         Copy LoadDirectory.s 
3124 00301F 0000              LoadDirectory Start 
3125 00301F 0000                         Using FileTypes 
3126 00301F 0000               
3127 00301F 0000              * 
3128 00301F 0000              *          Load current prefix directory into memory 
3129 00301F 0000              * 
3130 00301F 0000               
3131 00301F 0000              EOF        equ  $4C 
3132 00301F 0000               
3133 00301F 0000              *          Directory offsets 
3134 00301F 0000               
3135 00301F 0000              oPrevBlock equ  $00 
3136 00301F 0000              oNextBlock equ  $02 
3137 00301F 0000              oFileName  equ  $00 
3138 00301F 0000              oFileType  equ  $10 
3139 00301F 0000              oFileTypeA equ  $11 
3140 00301F 0000              oEntLength equ  $23 
3141 00301F 0000              oEntPerBlk equ  $24 
3142 00301F 0000              oFileCount equ  $25 -> $26 
3143 00301F 0000               
3144 00301F 0000 A9 08                   lda  #$08 
3145 003021 0002 8D B1 01                sta  Destpage                Starting aux page for buffer 
3146 003024 0005               
3147 003024 0005 AE 00 08                ldx  Prefix                  Get length of current prefix 
3148 003027 0008 8E 40 08                stx  Path                    Save in Path for MLIOpen1 
3149 00302A 000B               
3150 00302A 000B D0 03                   bne  CopyPath                Null prefix? 
3151 00302C 000D               
3152 00302C 000D 4C C7 01                jmp  GetVolumes              Yes so get the OnLine volumes. 
3153 00302F 0010               
3154 00302F 0010              CopyPath   anop 
3155 00302F 0010               
3156 00302F 0010 BD 00 08                lda  Prefix,x                Get Prefix character 
3157 003032 0013 9D 40 08                sta  Path,x                  Copy it to Path 
3158 003035 0016 CA                      dex                          Copy backwards 
3159 003036 0017 D0 F7                   bne  CopyPath                x = 0?  We're done. 
3160 003038 0019               
3161 003038 0019 20 00 80                jsr  MLIOpen1                Open directory as file #1 
3162 00303B 001C               
3163 00303B 001C AD FC 08                lda  openRef1 
3164 00303E 001F 8D FD 08                sta  readRef                 Save reference number 
3165 003041 0022 8D FF 08                sta  closeRef 
3166 003044 0025               
3167 003044 0025 A9 00                   lda  #$00                    512 bytes 
3168 003046 0027 8D F8 08                sta  readRequest             low byte 
3169 003049 002A A9 02                   lda  #$02                    512 byte 
3170 00304B 002C 8D F9 08                sta  readRequest+1           high byte 
3171 00304E 002F               
3172 00304E 002F 20 00 80                jsr  MLIRead                 Priming read 
3173 003051 0032 C9 4C                   cmp  #EOF 
3174 003053 0034 F0 5B                   beq  Exit 
3175 003055 0036               
3176 003055 0036 AD 23 10                lda  readBuf+oEntLength      Get file directory entry length 
3177 003058 0039 8D AB 01                sta  EntLength 
3178 00305B 003C AD 24 10                lda  readBuf+oEntPerBlk      Get file entries per block 
3179 00305E 003F 8D AC 01                sta  EntPerBlk 
3180 003061 0042               
3181 003061 0042 9C AD 01                stz  FileCount               Zero out file count for this directory. 
3182 003064 0045 9C AE 01                stz  FileCount+1 
3183 003067 0048               
3184 003067 0048              * 40 directory blocks max at this time.  Uses aux memory $0800 - $57FF 
3185 003067 0048               
3186 003067 0048 A9 28                   lda  #40                     Max directory blocks this program 
3187 003069 004A 8D B0 01                sta  MaxBlocks                will process. 
3188 00306C 004D               
3189 00306C 004D              BlockLoop  anop 
3190 00306C 004D               
3191 00306C 004D 20 B1 00                jsr  ProcessBlock 
3192 00306F 0050               
3193 00306F 0050              *          Check to see if this is the 20th block to be written. 
3194 00306F 0050              *          If so then force NextBlock to be zero 
3195 00306F 0050               
3196 00306F 0050 AD B0 01                lda  MaxBlocks               Get blocks remaining 
3197 003072 0053 C9 01                   cmp  #1                      Is this the last one? 
3198 003074 0055 D0 08                   bne  SaveBlock               No 
3199 003076 0057               
3200 003076 0057 A9 00                   lda  #0                      Yes, so zero out oNextBlock 
3201 003078 0059 8D 02 10                sta  readBuf+oNextBlock      (2 bytes) 
3202 00307B 005C 8D 03 10                sta  readBuf+oNextBlock+1 
3203 00307E 005F               
3204 00307E 005F              *          Save block to aux memory 
3205 00307E 005F               
3206 00307E 005F              SaveBlock  anop 
3207 00307E 005F               
3208 00307E 005F A9 00                   lda  #readBuf                Set starting source address 
3209 003080 0061 85 3C                   sta  A1L 
3210 003082 0063 A9 10                   lda  #>readBuf 
3211 003084 0065 85 3D                   sta  A1H 
3212 003086 0067               
3213 003086 0067 A9 FF                   lda  #readBuf+$1FF           Set ending source address 
3214 003088 0069 85 3E                   sta  A2L 
3215 00308A 006B A9 11                   lda  #>readBuf+$1FF 
3216 00308C 006D 85 3F                   sta  A2H 
3217 00308E 006F               
3218 00308E 006F A9 00                   lda  #$00                    Set aux memory starting destination 
3219 003090 0071 85 42                   sta  A4L 
3220 003092 0073 AD B1 01                lda  DestPage 
3221 003095 0076 85 43                   sta  A4H 
3222 003097 0078               
3223 003097 0078 38                      sec                          Move to aux 
3224 003098 0079 20 11 C3                jsr  AuxMove 
3225 00309B 007C               
3226 00309B 007C              *          Move destination memory pointer up by 512 bytes 
3227 00309B 007C               
3228 00309B 007C EE B1 01                inc  DestPage 
3229 00309E 007F EE B1 01                inc  DestPage 
3230 0030A1 0082               
3231 0030A1 0082 CE B0 01                dec  MaxBlocks 
3232 0030A4 0085 AD B0 01                lda  MaxBlocks               Force exit if directory is more than 
3233 0030A7 0088 F0 07                   beq  Exit                     20 blocks 
3234 0030A9 008A               
3235 0030A9 008A 20 00 80                jsr  MLIRead 
3236 0030AC 008D C9 4C                   cmp  #EOF 
3237 0030AE 008F D0 BC                   bne  BlockLoop 
3238 0030B0 0091               
3239 0030B0 0091              Exit       anop 
3240 0030B0 0091               
3241 0030B0 0091 20 00 80                jsr  MLIClose 
3242 0030B3 0094               
3243 0030B3 0094              * Save FileCount to it's place in the first block. 
3244 0030B3 0094               
3245 0030B3 0094 A9 AD                   lda  #FileCount              Starting address 
3246 0030B5 0096 85 3C                   sta  A1L 
3247 0030B7 0098 A9 01                   lda  #>FileCount 
3248 0030B9 009A 85 3D                   sta  A1H 
3249 0030BB 009C               
3250 0030BB 009C A9 AE                   lda  #FileCount+1            Ending address 
3251 0030BD 009E 85 3E                   sta  A2L 
3252 0030BF 00A0 A9 01                   lda  #>FileCount+1 
3253 0030C1 00A2 85 3F                   sta  A2H 
3254 0030C3 00A4               
3255 0030C3 00A4 A9 25                   lda  #oFileCount             Aux memory destination address 
3256 0030C5 00A6 85 42                   sta  A4L 
3257 0030C7 00A8 A9 08                   lda  #$08 
3258 0030C9 00AA 85 43                   sta  A4H 
3259 0030CB 00AC               
3260 0030CB 00AC 38                      sec 
3261 0030CC 00AD 20 11 C3                jsr  AuxMove                 Move it. 
3262 0030CF 00B0               
3263 0030CF 00B0 60                      rts 
3264 0030D0 00B1               
3265 0030D0 00B1              ProcessBlock anop 
3266 0030D0 00B1               
3267 0030D0 00B1              * 
3268 0030D0 00B1              * Convert filetypes in block to ASCII 
3269 0030D0 00B1              * 
3270 0030D0 00B1               
3271 0030D0 00B1 A9 04                   lda  #readBuf+4              Set ptr1 to first file entry 
3272 0030D2 00B3 85 06                   sta  ptr1 
3273 0030D4 00B5 A9 10                   lda  #>readBuf+4 
3274 0030D6 00B7 85 07                   sta  ptr1+1 
3275 0030D8 00B9               
3276 0030D8 00B9 AD AC 01                lda  EntPerBlk               initialize file counter per block 
3277 0030DB 00BC 8D AF 01                sta  EntLeft 
3278 0030DE 00BF               
3279 0030DE 00BF              FileLoop   anop 
3280 0030DE 00BF               
3281 0030DE 00BF A0 00                   ldy  #oFileName              Get storage type/name length 
3282 0030E0 00C1 B1 06                   lda  (Ptr1),y 
3283 0030E2 00C3 D0 03                   bne  NotDeleted              Skip processing deleted entry. 
3284 0030E4 00C5 4C 91 01                jmp  MoveNext 
3285 0030E7 00C8               
3286 0030E7 00C8              NotDeleted anop 
3287 0030E7 00C8               
3288 0030E7 00C8 29 E0                   and  #$E0                    Keep only upper 3 bits 
3289 0030E9 00CA C9 E0                   cmp  #$E0                    Match on $F0 or $E0 
3290 0030EB 00CC D0 0F                   bne  Convert                 No, so convert file type and count it. 
3291 0030ED 00CE               
3292 0030ED 00CE A2 03                   ldx  #3                      Make filetype display for volume headers 
3293 0030EF 00D0 A0 11                   ldy  #oFileTypeA             and directory headers spaces only. 
3294 0030F1 00D2 A9 20                   lda  #' ' 
3295 0030F3 00D4               
3296 0030F3 00D4              SpaceLoop  anop 
3297 0030F3 00D4               
3298 0030F3 00D4 91 06                   sta  (Ptr1),y 
3299 0030F5 00D6 C8                      iny 
3300 0030F6 00D7 CA                      dex 
3301 0030F7 00D8 D0 FA                   bne  SpaceLoop 
3302 0030F9 00DA 4C 91 01                jmp  MoveNext 
3303 0030FC 00DD               
3304 0030FC 00DD              Convert    anop 
3305 0030FC 00DD               
3306 0030FC 00DD EE AD 01                inc  FileCount               Count this entry as good. 
3307 0030FF 00E0 D0 03                   bne  FC2 
3308 003101 00E2 EE AE 01                inc  FileCount+1 
3309 003104 00E5               
3310 003104 00E5              FC2        anop 
3311 003104 00E5               
3312 003104 00E5 A0 10                   ldy  #oFileType              Get filetype offset 
3313 003106 00E7 B1 06                   lda  (ptr1),y 
3314 003108 00E9 8D B2 01                sta  FileType                Save filetype 
3315 00310B 00EC               
3316 00310B 00EC              *          Binary searce filetypes table 
3317 00310B 00EC               
3318 00310B 00EC A9 00                   lda  #FileTypes 
3319 00310D 00EE 8D B3 01                sta  Bottom                  Set initial bottom pointer 
3320 003110 00F1 A9 80                   lda  #>FileTypes 
3321 003112 00F3 8D B4 01                sta  Bottom+1 
3322 003115 00F6               
3323 003115 00F6 A9 00                   lda  #FileTypesE 
3324 003117 00F8 8D B5 01                sta  Top                     Set initial top pointer 
3325 00311A 00FB A9 80                   lda  #>FileTypesE 
3326 00311C 00FD 8D B6 01                sta  Top+1 
3327 00311F 0100               
3328 00311F 0100              SearchLoop anop 
3329 00311F 0100               
3330 00311F 0100              *          Calculate mid point in Ptr2 
3331 00311F 0100               
3332 00311F 0100 38                      sec 
3333 003120 0101 AD B5 01                lda  Top 
3334 003123 0104 ED B3 01                sbc  Bottom                  Ptr2 = Top - Bottom 
3335 003126 0107 85 80                   sta  Ptr2 
3336 003128 0109 AD B6 01                lda  Top+1 
3337 00312B 010C ED B4 01                sbc  Bottom+1 
3338 00312E 010F 85 81                   sta  Ptr2+1 
3339 003130 0111               
3340 003130 0111 46 81                   lsr  Ptr2+1                  Ptr2 = Ptr2 / 2 
3341 003132 0113 66 80                   ror  Ptr2 
3342 003134 0115               
3343 003134 0115 A5 80                   lda  Ptr2 
3344 003136 0117 29 FC                   and  #%11111100              Make divisible by 4. 
3345 003138 0119 85 80                   sta  Ptr2 
3346 00313A 011B               
3347 00313A 011B D0 06                   bne  CheckMatch              If Ptr2 (midpoint) is zero at 
3348 00313C 011D A5 81                   lda  Ptr2+1                  this point then we are in a no 
3349 00313E 011F D0 02                   bne  CheckMatch              match situation. 
3350 003140 0121 80 4D                   bra  NoMatch 
3351 003142 0123               
3352 003142 0123              CheckMatch anop 
3353 003142 0123               
3354 003142 0123 18                      clc 
3355 003143 0124 A5 80                   lda  Ptr2 
3356 003145 0126 6D B3 01                adc  Bottom 
3357 003148 0129 85 80                   sta  Ptr2                    Add address of bottom to get an 
3358 00314A 012B A5 81                   lda  Ptr2+1                  exact midpoint address. 
3359 00314C 012D 6D B4 01                adc  Bottom+1 
3360 00314F 0130 85 81                   sta  Ptr2+1 
3361 003151 0132               
3362 003151 0132              *          Test for hit/miss and continue search 
3363 003151 0132               
3364 003151 0132 AD B2 01                lda  FileType                Filetype we're looking for. 
3365 003154 0135 D2 80                   cmp  (Ptr2)                  Ptr2 = filetype at midpoint. 
3366 003156 0137               
3367 003156 0137 F0 1A                   beq  MatchFound              A hit! 
3368 003158 0139 90 0C                   bcc  PtrEquTop               Filetype < table type 
3369 00315A 013B               
3370 00315A 013B              *          Move bottom pointer 
3371 00315A 013B               
3372 00315A 013B A5 80                   lda  Ptr2 
3373 00315C 013D 8D B3 01                sta  Bottom 
3374 00315F 0140 A5 81                   lda  Ptr2+1 
3375 003161 0142 8D B4 01                sta  Bottom+1 
3376 003164 0145 80 B9                   bra  SearchLoop              Continue the search 
3377 003166 0147               
3378 003166 0147              *          Move top pointer 
3379 003166 0147               
3380 003166 0147              PtrEquTop  anop 
3381 003166 0147               
3382 003166 0147 A5 80                   lda  Ptr2 
3383 003168 0149 8D B5 01                sta  Top 
3384 00316B 014C A5 81                   lda  Ptr2+1 
3385 00316D 014E 8D B6 01                sta  Top+1 
3386 003170 0151 80 AD                   bra  SearchLoop              Continue the search 
3387 003172 0153               
3388 003172 0153              *          Save matching filetype name 
3389 003172 0153               
3390 003172 0153              MatchFound anop 
3391 003172 0153               
3392 003172 0153 A0 01                   ldy  #1                      Offset start 
3393 003174 0155 A2 03                   ldx  #3                      3 characters to save 
3394 003176 0157               
3395 003176 0157 18                      clc 
3396 003177 0158 A5 06                   lda  Ptr1                    Set Ptr3 to destination address 
3397 003179 015A 69 11                   adc  #oFileTypeA             by adding FileType ASCII offset 
3398 00317B 015C 85 82                   sta  Ptr3                    to Ptr1 and saving it in Ptr3. 
3399 00317D 015E A5 07                   lda  Ptr1+1 
3400 00317F 0160 69 00                   adc  #0 
3401 003181 0162 85 83                   sta  Ptr3+1 
3402 003183 0164               
3403 003183 0164              MatchLoop  anop 
3404 003183 0164               
3405 003183 0164 B1 80                   lda  (Ptr2),y                Get filetype character 
3406 003185 0166 88                      dey                          Backup index by one 
3407 003186 0167 91 82                   sta  (Ptr3),y                Save filetype character 
3408 003188 0169 C8                      iny                          Add one to offset previous dey 
3409 003189 016A C8                      iny                          Move to next character 
3410 00318A 016B CA                      dex                          Count character printed 
3411 00318B 016C D0 F6                   bne  MatchLoop               More to print? 
3412 00318D 016E 80 21                   bra  MoveNext                No so exit 
3413 00318F 0170               
3414 00318F 0170              NoMatch    anop 
3415 00318F 0170               
3416 00318F 0170 A0 11                   ldy  #oFileTypeA             Place to save ASCII version 
3417 003191 0172 A9 24                   lda  #'$' 
3418 003193 0174 91 06                   sta  (ptr1),y 
3419 003195 0176               
3420 003195 0176 AD B2 01                lda  FileType 
3421 003198 0179 18                      clc 
3422 003199 017A 4A                      lsr  a 
3423 00319A 017B 4A                      lsr  a 
3424 00319B 017C 4A                      lsr  a 
3425 00319C 017D 4A                      lsr  a 
3426 00319D 017E AA                      tax 
3427 00319E 017F BD B7 01                lda  AsciiTable,x 
3428 0031A1 0182 C8                      iny 
3429 0031A2 0183 91 06                   sta  (ptr1),y 
3430 0031A4 0185               
3431 0031A4 0185 AD B2 01                lda  FileType 
3432 0031A7 0188 29 0F                   and  #$0F 
3433 0031A9 018A AA                      tax 
3434 0031AA 018B BD B7 01                lda  AsciiTable,x 
3435 0031AD 018E C8                      iny 
3436 0031AE 018F 91 06                   sta  (ptr1),y 
3437 0031B0 0191               
3438 0031B0 0191              *          Move to next file entry 
3439 0031B0 0191               
3440 0031B0 0191              MoveNext   anop 
3441 0031B0 0191               
3442 0031B0 0191 A5 06                   lda  ptr1 
3443 0031B2 0193 18                      clc 
3444 0031B3 0194 6D AB 01                adc  EntLength 
3445 0031B6 0197 85 06                   sta  ptr1 
3446 0031B8 0199               
3447 0031B8 0199 A5 07                   lda  ptr1+1 
3448 0031BA 019B 69 00                   adc  #$00 
3449 0031BC 019D 85 07                   sta  ptr1+1 
3450 0031BE 019F               
3451 0031BE 019F CE AF 01                dec  EntLeft 
3452 0031C1 01A2 AD AF 01                lda  EntLeft 
3453 0031C4 01A5 F0 03                   beq  ExitToRts 
3454 0031C6 01A7 4C BF 00                jmp  FileLoop 
3455 0031C9 01AA               
3456 0031C9 01AA              ExitToRts  anop 
3457 0031C9 01AA               
3458 0031C9 01AA 60                      rts 
3459 0031CA 01AB               
3460 0031CA 01AB 00           EntLength  ds   1 
3461 0031CB 01AC 00           EntPerBlk  ds   1 
3462 0031CC 01AD 00 00        FileCount  ds   2 
3463 0031CE 01AF 00           EntLeft    ds   1 
3464 0031CF 01B0 00           MaxBlocks  ds   1 
3465 0031D0 01B1 00           DestPage   ds   1 
3466 0031D1 01B2 00           FileType   ds   1 
3467 0031D2 01B3 00 00        Bottom     ds   2 
3468 0031D4 01B5 00 00        Top        ds   2 
3469 0031D6 01B7 30 31 32 33  AscIITable dc   c'0123456789ABCDEF' 
3470 0031E6 01C7               
3471 0031E6 01C7              *          No path so get online volumes 
3472 0031E6 01C7               
3473 0031E6 01C7              GetVolumes anop 
3474 0031E6 01C7               
3475 0031E6 01C7 A9 00                   lda  #0 
3476 0031E8 01C9 A2 00                   ldx  #0 
3477 0031EA 01CB               
3478 0031EA 01CB              ZeroOut1   anop                         Zero out first 256 bytes 
3479 0031EA 01CB               
3480 0031EA 01CB 9D 00 10                sta  readBuf,x 
3481 0031ED 01CE E8                      inx 
3482 0031EE 01CF D0 FA                   bne  ZeroOut1 
3483 0031F0 01D1               
3484 0031F0 01D1               
3485 0031F0 01D1              ZeroOut2   anop                         Zero out second 256 bytes 
3486 0031F0 01D1               
3487 0031F0 01D1 9D 00 11                sta  readBuf+$100,x 
3488 0031F3 01D4 E8                      inx 
3489 0031F4 01D5 D0 FA                   bne  ZeroOut2 
3490 0031F6 01D7               
3491 0031F6 01D7 A9 04                   lda  #readBuf+4              Set Ptr1 to destination for phony read 
3492 0031F8 01D9 85 06                   sta  Ptr1                    block 
3493 0031FA 01DB A9 10                   lda  #>readBuf+4 
3494 0031FC 01DD 85 07                   sta  Ptr1+1 
3495 0031FE 01DF               
3496 0031FE 01DF A9 27                   lda  #$27                    Set Entry Length 
3497 003200 01E1 8D 23 10                sta  readBuf+oEntLength 
3498 003203 01E4 8D AB 01                sta  EntLength 
3499 003206 01E7               
3500 003206 01E7 A9 0D                   lda  #$0D                    Set Entries Per Block 
3501 003208 01E9 8D 24 10                sta  readBuf+oEntPerBlk 
3502 00320B 01EC 8D AC 01                sta  EntPerBlk 
3503 00320E 01EF               
3504 00320E 01EF A9 00                   lda  #0                      Entry counter 
3505 003210 01F1 8D AD 01                sta  FileCount 
3506 003213 01F4 8D AE 01                sta  FileCount+1 
3507 003216 01F7               
3508 003216 01F7 A9 00                   lda  #onlineBuf              Ptr2 for scanning online's buffer 
3509 003218 01F9 85 80                   sta  Ptr2 
3510 00321A 01FB A9 0B                   lda  #>onlineBuf 
3511 00321C 01FD 85 81                   sta  Ptr2+1 
3512 00321E 01FF               
3513 00321E 01FF A9 00                   lda  #0                      0 in unit number = all online volumes 
3514 003220 0201 8D F7 08                sta  onlineUnit 
3515 003223 0204               
3516 003223 0204 20 00 80                jsr  MLIOnLine               Get online volumes 
3517 003226 0207               
3518 003226 0207 A2 0E                   ldx  #14                     14 max online volumes 
3519 003228 0209               
3520 003228 0209              NextEntry  anop 
3521 003228 0209               
3522 003228 0209 B2 80                   lda  (Ptr2)                  Get unit num 
3523 00322A 020B 29 0F                   and  #$0F                    Keep only name length 
3524 00322C 020D F0 47                   beq  NextVolume              Invalid volume 
3525 00322E 020F A8                      tay                          Y-reg for index in name transfer 
3526 00322F 0210 09 F0                   ora  #$F0                    Set it as a volume entry 
3527 003231 0212 92 06                   sta  (Ptr1)                  Set storage type / length 
3528 003233 0214               
3529 003233 0214 EE AD 01                inc  FileCount               Count this one. 
3530 003236 0217               
3531 003236 0217              SaveName   anop 
3532 003236 0217               
3533 003236 0217 B1 80                   lda  (Ptr2),y 
3534 003238 0219 91 06                   sta  (Ptr1),y 
3535 00323A 021B 88                      dey 
3536 00323B 021C D0 F9                   bne  SaveName 
3537 00323D 021E               
3538 00323D 021E B2 80                   lda  (Ptr2)                  Save unit number in readBuf for 
3539 00323F 0220 A0 10                   ldy  #oFileType               reference 
3540 003241 0222 91 06                   sta  (Ptr1),y 
3541 003243 0224               
3542 003243 0224 29 70                   and  #$70                    Keep only drive slot info 
3543 003245 0226 18                      clc 
3544 003246 0227 4A                      lsr  a                       Move to right nibble. 
3545 003247 0228 4A                      lsr  a 
3546 003248 0229 4A                      lsr  a 
3547 003249 022A 4A                      lsr  a 
3548 00324A 022B A8                      tay                          Move to index 
3549 00324B 022C B9 B7 01                lda  AscIITable,y            Get ASCII character 
3550 00324E 022F A0 11                   ldy  #oFileTypeA              Save Ascii version of slot number. 
3551 003250 0231 91 06                   sta  (Ptr1),y 
3552 003252 0233               
3553 003252 0233 A9 2C                   lda  #','                    Comma. 
3554 003254 0235 C8                      iny                          Move to next character. 
3555 003255 0236 91 06                   sta  (Ptr1),y                Save comma. 
3556 003257 0238               
3557 003257 0238 B2 80                   lda  (Ptr2)                  Get unit number 
3558 003259 023A 18                      clc 
3559 00325A 023B 0A                      asl  a                       Move drive # bit to carry 
3560 00325B 023C 29 00                   and  #0                      Clear all bits 
3561 00325D 023E 2A                      rol  a                       rotate carry into bit 0 
3562 00325E 023F 1A                      ina                          Add 1 to bit 0 
3563 00325F 0240 A8                      tay                          Move to index 
3564 003260 0241 B9 B7 01                lda  AscIITable,y            Get Ascii character 
3565 003263 0244 A0 13                   ldy  #oFileTypeA+2 
3566 003265 0246 91 06                   sta  (Ptr1),y                Save Ascii version of drive # 
3567 003267 0248               
3568 003267 0248 18                      clc                          Move to next destination address. 
3569 003268 0249 A5 06                   lda  Ptr1 
3570 00326A 024B 6D AB 01                adc  EntLength 
3571 00326D 024E 85 06                   sta  Ptr1 
3572 00326F 0250 A5 07                   lda  Ptr1+1 
3573 003271 0252 69 00                   adc  #0 
3574 003273 0254 85 07                   sta  Ptr1+1 
3575 003275 0256               
3576 003275 0256              NextVolume anop 
3577 003275 0256               
3578 003275 0256 18                      clc                          Move to next source address 
3579 003276 0257 A5 80                   lda  Ptr2 
3580 003278 0259 69 10                   adc  #16 
3581 00327A 025B 85 80                   sta  Ptr2 
3582 00327C 025D A5 81                   lda  Ptr2+1 
3583 00327E 025F 69 00                   adc  #0 
3584 003280 0261 85 81                   sta  Ptr2+1 
3585 003282 0263               
3586 003282 0263 CA                      dex 
3587 003283 0264 D0 A3                   bne  NextEntry               Process next entry 
3588 003285 0266               
3589 003285 0266 AD AD 01                lda  FileCount               Save Entries counted to buffer. 
3590 003288 0269 A0 25                   ldy  #oFileCount 
3591 00328A 026B 99 00 10                sta  readBuf,y 
3592 00328D 026E               
3593 00328D 026E AD AE 01                lda  FileCount+1 
3594 003290 0271 C8                      iny 
3595 003291 0272 99 00 10                sta  readBuf,y 
3596 003294 0275               
3597 003294 0275              *          Save dummy buffer to aux memory 
3598 003294 0275               
3599 003294 0275 A9 00                   lda  #readBuf                Set starting source address 
3600 003296 0277 85 3C                   sta  A1L 
3601 003298 0279 A9 10                   lda  #>readBuf 
3602 00329A 027B 85 3D                   sta  A1H 
3603 00329C 027D               
3604 00329C 027D A9 FF                   lda  #readBuf+$1FF           Set ending source address 
3605 00329E 027F 85 3E                   sta  A2L 
3606 0032A0 0281 A9 11                   lda  #>readBuf+$1FF 
3607 0032A2 0283 85 3F                   sta  A2H 
3608 0032A4 0285               
3609 0032A4 0285 A9 00                   lda  #$00                    Set aux memory starting destination 
3610 0032A6 0287 85 42                   sta  A4L 
3611 0032A8 0289 A9 08                   lda  #$08 
3612 0032AA 028B 85 43                   sta  A4H 
3613 0032AC 028D               
3614 0032AC 028D 38                      sec                          Move to aux 
3615 0032AD 028E 20 11 C3                jsr  AuxMove 
3616 0032B0 0291               
3617 0032B0 0291 60                      rts 
3618 0032B1 0292               
3619 0032B1 0292                         End 
 
 
 
Local  Symbols
 
ASCIITABLE 0001B7  BLOCKLOOP  00004D  BOTTOM     0001B3  CHECKMATCH 000123   
CONVERT    0000DD  COPYPATH   000010  DESTPAGE   0001B1  ENTLEFT    0001AF   
ENTLENGTH  0001AB  ENTPERBLK  0001AC  EOF        00004C  EXIT       000091   
EXITTORTS  0001AA  FC2        0000E5  FILECOUNT  0001AD  FILELOOP   0000BF   
FILETYPE   0001B2  GETVOLUMES 0001C7  MATCHFOUND 000153  MATCHLOOP  000164   
MAXBLOCKS  0001B0  MOVENEXT   000191  NEXTENTRY  000209  NEXTVOLUME 000256   
NOMATCH    000170  NOTDELETED 0000C8  OENTLENGTH 000023  OENTPERBLK 000024   
OFILECOUNT 000025  OFILENAME  000000  OFILETYPE  000010  OFILETYPEA 000011   
ONEXTBLOCK 000002  OPREVBLOCK 000000  PROCESSBLO 0000B1  PTREQUTOP  000147   
SAVEBLOCK  00005F  SAVENAME   000217  SEARCHLOOP 000100  SPACELOOP  0000D4   
TOP        0001B5  ZEROOUT1   0001CB  ZEROOUT2   0001D1   
3620 0032B1 0000                         Copy FileTypes.s 
3621 0032B1 0000              FileTypes  Data 
3622 0032B1 0000               
3623 0032B1 0000 00 4E 4F 4E             dc   h'00',c'NON'            Unknown 
3624 0032B5 0004 01 42 41 44             dc   h'01',c'BAD'            Bad blocks 
3625 0032B9 0008 02 50 43 44             dc   h'02',c'PCD'            Pascal code 
3626 0032BD 000C 03 50 54 58             dc   h'03',c'PTX'            Pascal text 
3627 0032C1 0010 04 54 58 54             dc   h'04',c'TXT'            ASCII text 
3628 0032C5 0014 05 50 44 41             dc   h'05',c'PDA'            Pascal data 
3629 0032C9 0018 06 42 49 4E             dc   h'06',c'BIN'            Binary 
3630 0032CD 001C 07 46 4E 54             dc   h'07',c'FNT'            Apple /// Font 
3631 0032D1 0020 08 46 4F 54             dc   h'08',c'FOT'            Apple II or /// Graphics 
3632 0032D5 0024 09 42 41 33             dc   h'09',c'BA3'            Apple /// BASIC program 
3633 0032D9 0028 0A 44 41 33             dc   h'0A',c'DA3'            Apple /// BASIC data 
3634 0032DD 002C 0B 57 50 46             dc   h'0B',c'WPF'            Apple II or /// Word Proce 
3635 0032E1 0030 0C 53 4F 53             dc   h'0C',c'SOS'            Apple /// SOS System 
3636 0032E5 0034 0F 44 49 52             dc   h'0F',c'DIR'            Folder 
3637 0032E9 0038 10 52 50 44             dc   h'10',c'RPD'            Apple /// RPS data 
3638 0032ED 003C 11 52 50 49             dc   h'11',c'RPI'            Apple /// RPS index 
3639 0032F1 0040 12 41 46 44             dc   h'12',c'AFD'            Apple /// AppleFile discar 
3640 0032F5 0044 13 41 46 4D             dc   h'13',c'AFM'            Apple /// AppleFile model 
3641 0032F9 0048 14 41 46 52             dc   h'14',c'AFR'            Apple /// AppleFile report 
3642 0032FD 004C 15 53 43 4C             dc   h'15',c'SCL'            Apple /// screen library 
3643 003301 0050 16 50 46 53             dc   h'16',c'PFS'            PFS document 
3644 003305 0054 19 41 44 42             dc   h'19',c'ADB'            AppleWorks Data Base 
3645 003309 0058 1A 41 57 50             dc   h'1A',c'AWP'            AppleWorks Word Processor 
3646 00330D 005C 1B 41 53 50             dc   h'1B',c'ASP'            AppleWorks Spreadsheet 
3647 003311 0060 20 54 44 4D             dc   h'20',c'TDM'            Desktop Manager document 
3648 003315 0064 2A 38 53 43             dc   h'2A',c'8SC'            Apple II Source Code 
3649 003319 0068 2B 38 4F 42             dc   h'2B',c'8OB'            Apple II Object Code 
3650 00331D 006C 2C 38 49 43             dc   h'2C',c'8IC'            Apple II Interpreted Code 
3651 003321 0070 2D 38 4C 44             dc   h'2D',c'8LD'            Apple II Language Data 
3652 003325 0074 2E 50 38 43             dc   h'2E',c'P8C'            ProDOS 8 code module 
3653 003329 0078 2E 50 54 50             dc   h'2E',c'PTP'            Point-to-Point drivers 
3654 00332D 007C 2E 50 54 50             dc   h'2E',c'PTP'            Point-to-Point code 
3655 003331 0080 40 44 49 43             dc   h'40',c'DIC'            Dictionary file 
3656 003335 0084 42 46 54 44             dc   h'42',c'FTD'            File Type Names 
3657 003339 0088 50 47 57 50             dc   h'50',c'GWP'            Apple IIgs Word Processor 
3658 00333D 008C 51 47 53 53             dc   h'51',c'GSS'            Apple IIgs Spreadsheet 
3659 003341 0090 52 47 44 42             dc   h'52',c'GDB'            Apple IIgs Data Base 
3660 003345 0094 53 44 52 57             dc   h'53',c'DRW'            Drawing 
3661 003349 0098 54 47 44 50             dc   h'54',c'GDP'            Desktop Publishing 
3662 00334D 009C 55 48 4D 44             dc   h'55',c'HMD'            Hypermedia 
3663 003351 00A0 56 45 44 55             dc   h'56',c'EDU'            Educational Data 
3664 003355 00A4 57 53 54 4E             dc   h'57',c'STN'            Stationery 
3665 003359 00A8 58 48 4C 50             dc   h'58',c'HLP'            Help File 
3666 00335D 00AC 59 43 4F 4D             dc   h'59',c'COM'            Communications File 
3667 003361 00B0 5A 43 46 47             dc   h'5A',c'CFG'            Configuration file 
3668 003365 00B4 5A 50 54 50             dc   h'5A',c'PTP'            Point-to-Point 
3669 003369 00B8 5B 41 4E 4D             dc   h'5B',c'ANM'            Animation file 
3670 00336D 00BC 5C 4D 55 4D             dc   h'5C',c'MUM'            Multimedia document 
3671 003371 00C0 5D 45 4E 54             dc   h'5D',c'ENT'            Game/Entertainment 
3672 003375 00C4 5E 44 56 55             dc   h'5E',c'DVU'            Development utility 
3673 003379 00C8 5F 46 49 4E             dc   h'5F',c'FIN'            Financial document 
3674 00337D 00CC 6B 42 49 4F             dc   h'6B',c'BIO'            PC Transporter BIOS 
3675 003381 00D0 6D 54 44 52             dc   h'6D',c'TDR'            PC Transporter driver 
3676 003385 00D4 6E 50 52 45             dc   h'6E',c'PRE'            PC Transporter pre-boot 
3677 003389 00D8 6F 48 44 56             dc   h'6F',c'HDV'            PC Transporter volume 
3678 00338D 00DC A0 57 50 20             dc   h'A0',c'WP '            WordPerfect document 
3679 003391 00E0 AB 47 53 42             dc   h'AB',c'GSB'            Apple IIgs BASIC program 
3680 003395 00E4 AC 54 44 46             dc   h'AC',c'TDF'            Apple IIgs BASIC TDF 
3681 003399 00E8 AD 42 44 46             dc   h'AD',c'BDF'            Apple IIgs BASIC data 
3682 00339D 00EC B0 53 52 43             dc   h'B0',c'SRC'            Apple IIgs  source code 
3683 0033A1 00F0 B1 4F 42 4A             dc   h'B1',c'OBJ'            Apple IIgs object code 
3684 0033A5 00F4 B2 4C 49 42             dc   h'B2',c'LIB'            Apple IIgs Library file 
3685 0033A9 00F8 B3 53 31 36             dc   h'B3',c'S16'            GS/OS application 
3686 0033AD 00FC B4 52 54 4C             dc   h'B4',c'RTL'            GS/OS Run-Time Library 
3687 0033B1 0100 B5 45 58 45             dc   h'B5',c'EXE'            GS/OS Shell application 
3688 0033B5 0104 B6 50 49 46             dc   h'B6',c'PIF'            Permanent initialization 
3689 0033B9 0108 B7 54 49 46             dc   h'B7',c'TIF'            Temporary initialization 
3690 0033BD 010C B8 4E 44 41             dc   h'B8',c'NDA'            New desk accessory 
3691 0033C1 0110 B9 43 44 41             dc   h'B9',c'CDA'            Classic desk accessory 
3692 0033C5 0114 BA 54 4F 4C             dc   h'BA',c'TOL'            Tool 
3693 0033C9 0118 BB 44 56 52             dc   h'BB',c'DVR'            Apple IIgs Device Driver 
3694 0033CD 011C BC 4C 44 46             dc   h'BC',c'LDF'            Load file (generic) 
3695 0033D1 0120 BD 46 53 54             dc   h'BD',c'FST'            GS/OS File System 
3696 0033D5 0124 BF 44 4F 43             dc   h'BF',c'DOC'            GS/OS document 
3697 0033D9 0128 C0 50 4E 54             dc   h'C0',c'PNT'            Packed Super Hi-Res 
3698 0033DD 012C C1 50 49 43             dc   h'C1',c'PIC'            Super Hi-Res picture 
3699 0033E1 0130 C2 41 4E 49             dc   h'C2',c'ANI'            Paintworks animation 
3700 0033E5 0134 C3 50 41 4C             dc   h'C3',c'PAL'            Paintworks palette 
3701 0033E9 0138 C5 4F 4F 47             dc   h'C5',c'OOG'            Object-oriented graphics 
3702 0033ED 013C C6 53 43 52             dc   h'C6',c'SCR'            Script 
3703 0033F1 0140 C7 43 44 56             dc   h'C7',c'CDV'            Control Panel document 
3704 0033F5 0144 C8 46 4F 4E             dc   h'C8',c'FON'            Font 
3705 0033F9 0148 C9 46 4E 44             dc   h'C9',c'FND'            Finder data 
3706 0033FD 014C CA 49 43 4E             dc   h'CA',c'ICN'            Icons 
3707 003401 0150 D5 4D 55 53             dc   h'D5',c'MUS'            Music sequence 
3708 003405 0154 D6 49 4E 53             dc   h'D6',c'INS'            Instrument 
3709 003409 0158 D7 4D 44 49             dc   h'D7',c'MDI'            MIDI data 
3710 00340D 015C D8 53 4E 44             dc   h'D8',c'SND'            Sampled sound 
3711 003411 0160 DB 44 42 4D             dc   h'DB',c'DBM'            DB Master document 
3712 003415 0164 E0 4C 42 52             dc   h'E0',c'LBR'            Archival library 
3713 003419 0168 E2 41 54 4B             dc   h'E2',c'ATK'            AppleTalk data 
3714 00341D 016C EE 52 31 36             dc   h'EE',c'R16'            EDASM 816 relocatable file 
3715 003421 0170 EF 50 41 53             dc   h'EF',c'PAS'            Pascal area 
3716 003425 0174 F0 43 4D 44             dc   h'F0',c'CMD'            BASIC command 
3717 003429 0178 F9 4F 53 20             dc   h'F9',c'OS '            GS/OS System file 
3718 00342D 017C FA 49 4E 54             dc   h'FA',c'INT'            Integer BASIC program 
3719 003431 0180 FB 49 56 52             dc   h'FB',c'IVR'            Integer BASIC variables 
3720 003435 0184 FC 42 41 53             dc   h'FC',c'BAS'            AppleSoft BASIC program 
3721 003439 0188 FD 56 41 52             dc   h'FD',c'VAR'            AppleSoft BASIC variables 
3722 00343D 018C FE 52 45 4C             dc   h'FE',c'REL'            Relocatable code 
3723 003441 0190 FF 53 59 53             dc   h'FF',c'SYS'            ProDOS 8 application 
3724 003445 0194               
3725 003445 0194              FileTypesE anop 
3726 003445 0194               
3727 003445 0194                         End 
 
 
 
Local  Symbols
 
FILETYPESE 000194   
3728 003445 0000                         Copy PathDDL.s 
3729 003445 0000              * 
3730 003445 0000              * Path drop down list 
3731 003445 0000              * 
3732 003445 0000               
3733 003445 0000              PathDDL    Start 
3734 003445 0000                         Using Menu1Vars 
3735 003445 0000               
3736 003445 0000 AD 00 08                lda  Prefix 
3737 003448 0003 8D 40 00                sta  InitPrefix 
3738 00344B 0006 D0 01                   bne  HavePrefix 
3739 00344D 0008               
3740 00344D 0008 60                      rts 
3741 00344E 0009               
3742 00344E 0009              HavePrefix anop 
3743 00344E 0009               
3744 00344E 0009 A9 00                   lda  #TabOnly 
3745 003450 000B 8D 00 80                sta  RC 
3746 003453 000E 9C 41 00                stz  NumLevels 
3747 003456 0011 A9 01                   lda  #1 
3748 003458 0013 8D 52 00                sta  SelLine 
3749 00345B 0016               
3750 00345B 0016 20 55 00                jsr  CalcLevels 
3751 00345E 0019               
3752 00345E 0019 20 C7 02                jsr  SaveScreen 
3753 003461 001C               
3754 003461 001C              Loop       anop 
3755 003461 001C               
3756 003461 001C 20 7E 00                jsr  ShowDDL 
3757 003464 001F 20 BA 01                jsr  DDLUI 
3758 003467 0022               
3759 003467 0022 AD 53 00                lda  DDLRC 
3760 00346A 0025 D0 F5                   bne  Loop 
3761 00346C 0027               
3762 00346C 0027 AD 00 08                lda  Prefix 
3763 00346F 002A CD 40 00                cmp  InitPrefix 
3764 003472 002D F0 0A                   beq  NoChange 
3765 003474 002F               
3766 003474 002F A9 00                   lda  #OpenBtn 
3767 003476 0031 8D 00 80                sta  TabIndex 
3768 003479 0034               
3769 003479 0034 A9 00                   lda  #DirChange 
3770 00347B 0036 8D 00 80                sta  RC 
3771 00347E 0039               
3772 00347E 0039              NoChange   anop 
3773 00347E 0039               
3774 00347E 0039 20 CE 02                jsr  RestScreen 
3775 003481 003C               
3776 003481 003C 20 00 80                jsr  PlotMouse 
3777 003484 003F               
3778 003484 003F 60                      rts 
3779 003485 0040               
3780 003485 0040 00           InitPrefix ds   1 
3781 003486 0041 00           NumLevels  ds   1 
3782 003487 0042 00 00 00 00  LevelsPosn ds   16 
3783 003497 0052 00           SelLine    ds   1 
3784 003498 0053 00           DDLRC      ds   1 
3785 003499 0054 00           LastLine   ds   1 
3786 00349A 0055               
3787 00349A 0055              CalcLevels anop 
3788 00349A 0055               
3789 00349A 0055 AE 00 08                ldx  Prefix                  Get prefix length 
3790 00349D 0058 A0 00                   ldy  #$00                    Zero LevelPosn index 
3791 00349F 005A               
3792 00349F 005A              CL01       anop 
3793 00349F 005A               
3794 00349F 005A BD 00 08                lda  Prefix,x                Get prefix character 
3795 0034A2 005D C9 2F                   cmp  #'/'                    Is it a '/'? 
3796 0034A4 005F D0 0D                   bne  CL02                    No, move to next character 
3797 0034A6 0061               
3798 0034A6 0061 8A                      txa 
3799 0034A7 0062 99 42 00                sta  LevelsPosn,y            Save prefix ending position 
3800 0034AA 0065               
3801 0034AA 0065 E0 01                   cpx  #1                      At root? 
3802 0034AC 0067 F0 08                   beq  CL03 
3803 0034AE 0069               
3804 0034AE 0069 C0 0F                   cpy  #15                     Move than 15 subdirectories? 
3805 0034B0 006B F0 04                   beq  CL03 
3806 0034B2 006D               
3807 0034B2 006D C8                      iny                          Increment index 
3808 0034B3 006E               
3809 0034B3 006E              CL02       anop 
3810 0034B3 006E               
3811 0034B3 006E CA                      dex                          Move to next path character 
3812 0034B4 006F D0 E9                   bne  CL01                    If not zero then loop 
3813 0034B6 0071               
3814 0034B6 0071              CL03       anop 
3815 0034B6 0071               
3816 0034B6 0071 8C 41 00                sty  NumLevels               Save the number of directory levels 
3817 0034B9 0074               
3818 0034B9 0074 18                      clc 
3819 0034BA 0075 A9 0A                   lda  #10 
3820 0034BC 0077 6D 41 00                adc  NumLevels 
3821 0034BF 007A 8D 54 00                sta  LastLine 
3822 0034C2 007D               
3823 0034C2 007D 60                      rts 
3824 0034C3 007E               
3825 0034C3 007E              * Display drop down list 
3826 0034C3 007E               
3827 0034C3 007E              ShowDDL    anop 
3828 0034C3 007E               
3829 0034C3 007E A9 07                   lda  #8-1 
3830 0034C5 0080 85 25                   sta  VTab 
3831 0034C7 0082 A9 17                   lda  #24-1 
3832 0034C9 0084 85 24                   sta  HTab 
3833 0034CB 0086               
3834 0034CB 0086 20 00 80                jsr  SetVTab 
3835 0034CE 0089               
3836 0034CE 0089 A9 1B                   lda  #MouseText 
3837 0034D0 008B 20 00 80                jsr  cout 
3838 0034D3 008E               
3839 0034D3 008E A9 5A                   lda  #'Z' 
3840 0034D5 0090 20 00 80                jsr  cout 
3841 0034D8 0093               
3842 0034D8 0093 A2 14                   ldx  #20 
3843 0034DA 0095 A9 4C                   lda  #'L' 
3844 0034DC 0097               
3845 0034DC 0097              SDDL01     anop 
3846 0034DC 0097               
3847 0034DC 0097 20 00 80                jsr  cout 
3848 0034DF 009A CA                      dex 
3849 0034E0 009B D0 FA                   bne  SDDL01 
3850 0034E2 009D               
3851 0034E2 009D A9 5F                   lda  #'_' 
3852 0034E4 009F 20 00 80                jsr  cout 
3853 0034E7 00A2               
3854 0034E7 00A2 A2 00                   ldx  #0 
3855 0034E9 00A4               
3856 0034E9 00A4              SDDL02     anop 
3857 0034E9 00A4               
3858 0034E9 00A4 E8                      inx 
3859 0034EA 00A5               
3860 0034EA 00A5 E6 25                   inc  VTab 
3861 0034EC 00A7 A9 17                   lda  #24-1 
3862 0034EE 00A9 85 24                   sta  HTab 
3863 0034F0 00AB               
3864 0034F0 00AB 20 00 80                jsr  SetVTab 
3865 0034F3 00AE               
3866 0034F3 00AE A9 5A                   lda  #'Z' 
3867 0034F5 00B0 20 00 80                jsr  cout 
3868 0034F8 00B3               
3869 0034F8 00B3 BC 42 00                ldy  LevelsPosn,x 
3870 0034FB 00B6 C8                      iny 
3871 0034FC 00B7               
3872 0034FC 00B7 C0 02                   cpy  #2                      At root? 
3873 0034FE 00B9 F0 11                   beq  SDDL03 
3874 003500 00BB               
3875 003500 00BB A9 A0                   lda  #' '+$80 
3876 003502 00BD 20 00 80                jsr  cout 
3877 003505 00C0               
3878 003505 00C0 A9 58                   lda  #'X' 
3879 003507 00C2 20 00 80                jsr  cout 
3880 00350A 00C5               
3881 00350A 00C5 A9 59                   lda  #'Y' 
3882 00350C 00C7 20 00 80                jsr  cout 
3883 00350F 00CA               
3884 00350F 00CA 80 0F                   bra  SDDL04 
3885 003511 00CC               
3886 003511 00CC              SDDL03     anop 
3887 003511 00CC               
3888 003511 00CC A9 5A                   lda  #'Z' 
3889 003513 00CE 20 00 80                jsr  cout 
3890 003516 00D1               
3891 003516 00D1 A9 5C                   lda  #'\' 
3892 003518 00D3 20 00 80                jsr  cout 
3893 00351B 00D6               
3894 00351B 00D6 A9 5E                   lda  #'^' 
3895 00351D 00D8 20 00 80                jsr  cout 
3896 003520 00DB               
3897 003520 00DB              SDDL04     anop 
3898 003520 00DB               
3899 003520 00DB A9 A0                   lda  #' '+$80 
3900 003522 00DD 20 00 80                jsr  cout 
3901 003525 00E0               
3902 003525 00E0 EC 52 00                cpx  SelLine 
3903 003528 00E3 D0 0A                   bne  SDDL04a 
3904 00352A 00E5               
3905 00352A 00E5 A9 18                   lda  #StdText 
3906 00352C 00E7 20 00 80                jsr  cout 
3907 00352F 00EA               
3908 00352F 00EA A9 0F                   lda  #Inverse 
3909 003531 00EC 20 00 80                jsr  cout 
3910 003534 00EF               
3911 003534 00EF              SDDL04a    anop 
3912 003534 00EF               
3913 003534 00EF DA                      phx 
3914 003535 00F0               
3915 003535 00F0 A2 0F                   ldx  #15 
3916 003537 00F2               
3917 003537 00F2              SDDL05     anop 
3918 003537 00F2               
3919 003537 00F2 B9 00 08                lda  Prefix,y 
3920 00353A 00F5 C9 2F                   cmp  #'/' 
3921 00353C 00F7 F0 0B                   beq  SDDL06 
3922 00353E 00F9 09 80                   ora  #$80 
3923 003540 00FB               
3924 003540 00FB 20 00 80                jsr  cout 
3925 003543 00FE               
3926 003543 00FE C8                      iny 
3927 003544 00FF CA                      dex 
3928 003545 0100 D0 F0                   bne  SDDL05 
3929 003547 0102 80 08                   bra  SDDL07 
3930 003549 0104               
3931 003549 0104              SDDL06     anop 
3932 003549 0104               
3933 003549 0104 A9 A0                   lda  #' '+$80 
3934 00354B 0106 20 00 80                jsr  cout 
3935 00354E 0109 CA                      dex 
3936 00354F 010A D0 F8                   bne  SDDL06 
3937 003551 010C               
3938 003551 010C              SDDL07     anop 
3939 003551 010C               
3940 003551 010C A9 0E                   lda  #Normal 
3941 003553 010E 20 00 80                jsr  cout 
3942 003556 0111               
3943 003556 0111 A9 1B                   lda  #MouseText 
3944 003558 0113 20 00 80                jsr  cout 
3945 00355B 0116               
3946 00355B 0116 A9 A0                   lda  #' '+$80 
3947 00355D 0118 20 00 80                jsr  cout 
3948 003560 011B               
3949 003560 011B A9 5F                   lda  #'_' 
3950 003562 011D 20 00 80                jsr  cout 
3951 003565 0120               
3952 003565 0120 FA                      plx 
3953 003566 0121 EC 41 00                cpx  NumLevels 
3954 003569 0124 B0 03                   bcs  SDDL07a 
3955 00356B 0126 4C A4 00                jmp  SDDL02 
3956 00356E 0129               
3957 00356E 0129              SDDL07a    anop 
3958 00356E 0129               
3959 00356E 0129 E8                      inx 
3960 00356F 012A               
3961 00356F 012A AD 41 00                lda  NumLevels 
3962 003572 012D C9 0F                   cmp  #15 
3963 003574 012F F0 66                   beq  SDDL09 
3964 003576 0131               
3965 003576 0131 E6 25                   inc  VTab 
3966 003578 0133 A9 17                   lda  #24-1 
3967 00357A 0135 85 24                   sta  HTab 
3968 00357C 0137               
3969 00357C 0137 20 00 80                jsr  SetVTab 
3970 00357F 013A               
3971 00357F 013A A9 5A                   lda  #'Z' 
3972 003581 013C 20 00 80                jsr  cout 
3973 003584 013F               
3974 003584 013F A9 A0                   lda  #' '+$80 
3975 003586 0141 20 00 80                jsr  cout 
3976 003589 0144               
3977 003589 0144 A9 5B                   lda  #'[' 
3978 00358B 0146 20 00 80                jsr  cout 
3979 00358E 0149 20 00 80                jsr  cout 
3980 003591 014C               
3981 003591 014C A9 A0                   lda  #' '+$80 
3982 003593 014E 20 00 80                jsr  cout 
3983 003596 0151               
3984 003596 0151 EC 52 00                cpx  SelLine 
3985 003599 0154 D0 0A                   bne  SDDL07b 
3986 00359B 0156               
3987 00359B 0156 A9 18                   lda  #StdText 
3988 00359D 0158 20 00 80                jsr  cout 
3989 0035A0 015B               
3990 0035A0 015B A9 0F                   lda  #Inverse 
3991 0035A2 015D 20 00 80                jsr  cout 
3992 0035A5 0160               
3993 0035A5 0160              SDDL07b    anop 
3994 0035A5 0160               
3995 0035A5 0160 A9 C4                   lda  #'D'+$80 
3996 0035A7 0162 20 00 80                jsr  cout 
3997 0035AA 0165 A9 E9                   lda  #'i'+$80 
3998 0035AC 0167 20 00 80                jsr  cout 
3999 0035AF 016A A9 F3                   lda  #'s'+$80 
4000 0035B1 016C 20 00 80                jsr  cout 
4001 0035B4 016F A9 EB                   lda  #'k'+$80 
4002 0035B6 0171 20 00 80                jsr  cout 
4003 0035B9 0174 A9 F3                   lda  #'s'+$80 
4004 0035BB 0176 20 00 80                jsr  cout 
4005 0035BE 0179               
4006 0035BE 0179 A2 0A                   ldx  #10 
4007 0035C0 017B               
4008 0035C0 017B A9 A0                   lda  #' '+$80 
4009 0035C2 017D               
4010 0035C2 017D              SDDL08     anop 
4011 0035C2 017D               
4012 0035C2 017D 20 00 80                jsr  cout 
4013 0035C5 0180 CA                      dex 
4014 0035C6 0181 D0 FA                   bne  SDDL08 
4015 0035C8 0183               
4016 0035C8 0183 A9 0E                   lda  #Normal 
4017 0035CA 0185 20 00 80                jsr  cout 
4018 0035CD 0188               
4019 0035CD 0188 A9 1B                   lda  #MouseText 
4020 0035CF 018A 20 00 80                jsr  cout 
4021 0035D2 018D               
4022 0035D2 018D A9 A0                   lda  #' '+$80 
4023 0035D4 018F 20 00 80                jsr  cout 
4024 0035D7 0192               
4025 0035D7 0192 A9 5F                   lda  #'_' 
4026 0035D9 0194 20 00 80                jsr  cout 
4027 0035DC 0197               
4028 0035DC 0197              SDDL09     anop 
4029 0035DC 0197               
4030 0035DC 0197 E6 25                   inc  VTab 
4031 0035DE 0199 A9 17                   lda  #24-1 
4032 0035E0 019B 85 24                   sta  HTab 
4033 0035E2 019D               
4034 0035E2 019D 20 00 80                jsr  SetVTab 
4035 0035E5 01A0               
4036 0035E5 01A0 A9 5A                   lda  #'Z' 
4037 0035E7 01A2 20 00 80                jsr  cout 
4038 0035EA 01A5               
4039 0035EA 01A5 A2 14                   ldx  #20 
4040 0035EC 01A7 A9 DF                   lda  #'_'+$80 
4041 0035EE 01A9               
4042 0035EE 01A9              SDDL10    anop 
4043 0035EE 01A9               
4044 0035EE 01A9 20 00 80                jsr  cout 
4045 0035F1 01AC CA                      dex 
4046 0035F2 01AD D0 FA                   bne  SDDL10 
4047 0035F4 01AF               
4048 0035F4 01AF A9 5F                   lda  #'_' 
4049 0035F6 01B1 20 00 80                jsr  cout 
4050 0035F9 01B4               
4051 0035F9 01B4 A9 18                   lda  #StdText 
4052 0035FB 01B6 20 00 80                jsr  cout 
4053 0035FE 01B9               
4054 0035FE 01B9 60                      rts 
4055 0035FF 01BA               
4056 0035FF 01BA              * Drop down list user interface. 
4057 0035FF 01BA               
4058 0035FF 01BA              DDLUI      anop 
4059 0035FF 01BA               
4060 0035FF 01BA 9C 10 C0                stz  ClearKbd 
4061 003602 01BD 9C 53 00                stz  DDLRC 
4062 003605 01C0               
4063 003605 01C0              PollDev    anop 
4064 003605 01C0               
4065 003605 01C0 20 00 80                jsr  PlotMouse 
4066 003608 01C3               
4067 003608 01C3              PollDevLoop anop 
4068 003608 01C3               
4069 003608 01C3 AD 00 C0                lda  Keyboard 
4070 00360B 01C6 10 03                   bpl  PollMouse 
4071 00360D 01C8 4C 35 02                jmp  KeyDev 
4072 003610 01CB               
4073 003610 01CB              PollMouse  anop 
4074 003610 01CB               
4075 003610 01CB 20 00 80                jsr  ReadMouse 
4076 003613 01CE 4E 84 08                lsr  MouseX 
4077 003616 01D1 4E 86 08                lsr  MouseY 
4078 003619 01D4 AD 8C 08                lda  MouseStat 
4079 00361C 01D7 89 20                   bit  #MouseMove 
4080 00361E 01D9 D0 0A                   bne  MouseDev1 
4081 003620 01DB 89 80                   bit  #CurrButton 
4082 003622 01DD D0 0C                   bne  MouseDev2 
4083 003624 01DF 89 40                   bit  #PrevButton 
4084 003626 01E1 D0 25                   bne  MouseDev3 
4085 003628 01E3               
4086 003628 01E3 80 DE                   bra  PollDevLoop 
4087 00362A 01E5               
4088 00362A 01E5              * Mouse movement 
4089 00362A 01E5               
4090 00362A 01E5              MouseDev1  anop 
4091 00362A 01E5               
4092 00362A 01E5 20 00 80                jsr  MoveMouse 
4093 00362D 01E8 4C C3 01                jmp  PollDevLoop 
4094 003630 01EB               
4095 003630 01EB              * Mouse button pressed 
4096 003630 01EB               
4097 003630 01EB              MouseDev2  anop 
4098 003630 01EB               
4099 003630 01EB AD 86 08                lda  MouseY 
4100 003633 01EE C9 07                   cmp  #8-1 
4101 003635 01F0 90 16                   bcc  MouseDev3 
4102 003637 01F2 CD 54 00                cmp  LastLine 
4103 00363A 01F5 B0 11                   bcs  MouseDev3 
4104 00363C 01F7               
4105 00363C 01F7 AD 84 08                lda  MouseX 
4106 00363F 01FA C9 16                   cmp  #23-1 
4107 003641 01FC 90 0A                   bcc  MouseDev3 
4108 003643 01FE C9 2D                   cmp  #46-1 
4109 003645 0200 B0 06                   bcs  MouseDev3 
4110 003647 0202               
4111 003647 0202 20 09 02                jsr  ChangePosn 
4112 00364A 0205               
4113 00364A 0205 4C C3 01                jmp  PollDevLoop 
4114 00364D 0208               
4115 00364D 0208              * Mouse button release 
4116 00364D 0208               
4117 00364D 0208              MouseDev3  anop 
4118 00364D 0208               
4119 00364D 0208 60                      rts 
4120 00364E 0209               
4121 00364E 0209              * Change pointer to a different directory 
4122 00364E 0209               
4123 00364E 0209              ChangePosn anop 
4124 00364E 0209               
4125 00364E 0209 38                      sec 
4126 00364F 020A AD 86 08                lda  MouseY 
4127 003652 020D E9 08                   sbc  #9-1                    First line 
4128 003654 020F 1A                      inc  a                       Make one based 
4129 003655 0210 D0 01                   bne  NotZero                 In case he's above the first line 
4130 003657 0212 1A                      inc  a 
4131 003658 0213               
4132 003658 0213              NotZero    anop 
4133 003658 0213               
4134 003658 0213 CD 41 00                cmp  NumLevels               If he's pointing beyond the last line, 
4135 00365B 0216 90 0A                   bcc  InRange                 set it to the last line. 
4136 00365D 0218 F0 08                   beq  InRange 
4137 00365F 021A               
4138 00365F 021A AD 41 00                lda  NumLevels 
4139 003662 021D C9 0F                   cmp  #15 
4140 003664 021F F0 01                   beq  InRange 
4141 003666 0221 1A                      inc  a 
4142 003667 0222               
4143 003667 0222              InRange    anop 
4144 003667 0222               
4145 003667 0222 CD 52 00                cmp  SelLine 
4146 00366A 0225 D0 01                   bne  Changed 
4147 00366C 0227 60                      rts 
4148 00366D 0228               
4149 00366D 0228              Changed    anop 
4150 00366D 0228               
4151 00366D 0228 8D 52 00                sta  SelLine 
4152 003670 022B 20 7C 02                jsr  SetPrefix 
4153 003673 022E 20 7E 00                jsr  ShowDDL 
4154 003676 0231 20 00 80                jsr  PlotMouse 
4155 003679 0234               
4156 003679 0234 60                      rts 
4157 00367A 0235               
4158 00367A 0235               
4159 00367A 0235              * Keyboard routine 
4160 00367A 0235               
4161 00367A 0235              UpArrow    equ  $8B 
4162 00367A 0235              DownArrow  equ  $8A 
4163 00367A 0235              LeftArrow  equ  $88 
4164 00367A 0235              RightArrow equ  $95 
4165 00367A 0235              ReturnKey  equ  $8D 
4166 00367A 0235              TabKey     equ  $89 
4167 00367A 0235               
4168 00367A 0235              KeyDev     anop 
4169 00367A 0235               
4170 00367A 0235 9C 10 C0                stz  ClearKbd 
4171 00367D 0238               
4172 00367D 0238              NextKey01  anop 
4173 00367D 0238               
4174 00367D 0238 C9 8A                   cmp  #DownArrow 
4175 00367F 023A F0 06                   beq  DA1 
4176 003681 023C C9 95                   cmp  #RightArrow 
4177 003683 023E F0 02                   beq  DA1 
4178 003685 0240 80 14                   bra  NextKey02 
4179 003687 0242               
4180 003687 0242              DA1        anop 
4181 003687 0242               
4182 003687 0242 AD 41 00                lda  NumLevels 
4183 00368A 0245 C9 0F                   cmp  #15 
4184 00368C 0247 F0 01                   beq  DA2 
4185 00368E 0249               
4186 00368E 0249 1A                      inc  a 
4187 00368F 024A               
4188 00368F 024A              DA2        anop 
4189 00368F 024A               
4190 00368F 024A CD 52 00                cmp  SelLine 
4191 003692 024D F0 03                   beq  DA3 
4192 003694 024F               
4193 003694 024F EE 52 00                inc  SelLine 
4194 003697 0252               
4195 003697 0252              DA3        anop 
4196 003697 0252               
4197 003697 0252 EE 53 00                inc  DDLRC 
4198 00369A 0255               
4199 00369A 0255 60                      rts 
4200 00369B 0256               
4201 00369B 0256              NextKey02  anop 
4202 00369B 0256               
4203 00369B 0256 C9 8B                   cmp  #UpArrow 
4204 00369D 0258 F0 06                   beq  UA1 
4205 00369F 025A C9 88                   cmp  #LeftArrow 
4206 0036A1 025C F0 02                   beq  UA1 
4207 0036A3 025E 80 0E                   bra  NextKey03 
4208 0036A5 0260               
4209 0036A5 0260              UA1        anop 
4210 0036A5 0260               
4211 0036A5 0260 AD 52 00                lda  SelLine 
4212 0036A8 0263 C9 01                   cmp  #1 
4213 0036AA 0265 F0 03                   beq  UA2 
4214 0036AC 0267               
4215 0036AC 0267 CE 52 00                dec  SelLine 
4216 0036AF 026A               
4217 0036AF 026A              UA2        anop 
4218 0036AF 026A               
4219 0036AF 026A EE 53 00                inc  DDLRC 
4220 0036B2 026D               
4221 0036B2 026D 60                      rts 
4222 0036B3 026E               
4223 0036B3 026E              NextKey03  anop 
4224 0036B3 026E               
4225 0036B3 026E C9 8D                   cmp  #ReturnKey 
4226 0036B5 0270 D0 04                   bne  BadKey 
4227 0036B7 0272               
4228 0036B7 0272 20 7C 02                jsr  SetPrefix 
4229 0036BA 0275               
4230 0036BA 0275 60                      rts 
4231 0036BB 0276               
4232 0036BB 0276              BadKey     anop 
4233 0036BB 0276               
4234 0036BB 0276 20 00 80                jsr  Beep 
4235 0036BE 0279 4C C3 01                jmp  PollDevLoop 
4236 0036C1 027C               
4237 0036C1 027C               
4238 0036C1 027C              * Set the prefix based upon line number selected. 
4239 0036C1 027C               
4240 0036C1 027C              SetPrefix  anop 
4241 0036C1 027C               
4242 0036C1 027C AD 41 00                lda  NumLevels 
4243 0036C4 027F CD 52 00                cmp  SelLine 
4244 0036C7 0282               
4245 0036C7 0282 B0 04                   bcs  CR01 
4246 0036C9 0284               
4247 0036C9 0284 9C 00 08                stz  Prefix 
4248 0036CC 0287               
4249 0036CC 0287 60                      rts 
4250 0036CD 0288               
4251 0036CD 0288              CR01       anop 
4252 0036CD 0288               
4253 0036CD 0288 AE 52 00                ldx  SelLine 
4254 0036D0 028B BD 41 00                lda  LevelsPosn-1,x 
4255 0036D3 028E               
4256 0036D3 028E 8D 00 08                sta  Prefix 
4257 0036D6 0291               
4258 0036D6 0291 60                      rts 
4259 0036D7 0292               
4260 0036D7 0292               
4261 0036D7 0292              * Save / Restore Screen routine. 
4262 0036D7 0292               
4263 0036D7 0292              TextLine   anop                         Text screen line starting addresses 
4264 0036D7 0292               
4265 0036D7 0292 00 04        TextLine00 dc   i'$0400' 
4266 0036D9 0294 80 04        TextLine01 dc   i'$0480' 
4267 0036DB 0296 00 05        TextLine02 dc   i'$0500' 
4268 0036DD 0298 80 05        TextLine03 dc   i'$0580' 
4269 0036DF 029A 00 06        TextLine04 dc   i'$0600' 
4270 0036E1 029C 80 06        TextLine05 dc   i'$0680' 
4271 0036E3 029E 00 07        TextLine06 dc   i'$0700' 
4272 0036E5 02A0 80 07        TextLine07 dc   i'$0780' 
4273 0036E7 02A2 28 04        TextLine08 dc   i'$0428' 
4274 0036E9 02A4 A8 04        TextLine09 dc   i'$04A8' 
4275 0036EB 02A6 28 05        TextLine10 dc   i'$0528' 
4276 0036ED 02A8 A8 05        TextLine11 dc   i'$05A8' 
4277 0036EF 02AA 28 06        TextLine12 dc   i'$0628' 
4278 0036F1 02AC A8 06        TextLine13 dc   i'$06A8' 
4279 0036F3 02AE 28 07        TextLine14 dc   i'$0728' 
4280 0036F5 02B0 A8 07        TextLine15 dc   i'$07A8' 
4281 0036F7 02B2 50 04        TextLine16 dc   i'$0450' 
4282 0036F9 02B4 D0 04        TextLine17 dc   i'$04D0' 
4283 0036FB 02B6 50 05        TextLine18 dc   i'$0550' 
4284 0036FD 02B8 D0 05        TextLine19 dc   i'$05D0' 
4285 0036FF 02BA 50 06        TextLine20 dc   i'$0650' 
4286 003701 02BC D0 06        TextLine21 dc   i'$06D0' 
4287 003703 02BE 50 07        TextLine22 dc   i'$0750' 
4288 003705 02C0 D0 07        TextLine23 dc   i'$07D0' 
4289 003707 02C2               
4290 003707 02C2              On80Store  equ  $C001 
4291 003707 02C2              Page1      equ  $C054 
4292 003707 02C2              Page2      equ  $C055 
4293 003707 02C2               
4294 003707 02C2 00           SaveRtn    ds   1 
4295 003708 02C3               
4296 003708 02C3 00           StartHTab  ds   1 
4297 003709 02C4 00           EndHTab    ds   1 
4298 00370A 02C5 00           StartVTab  ds   1 
4299 00370B 02C6 00           CurrLine   ds   1 
4300 00370C 02C7               
4301 00370C 02C7              * 
4302 00370C 02C7              * SaveScreen - save screen data under list box 
4303 00370C 02C7              * RestScreen - restore screen data under messagebox 
4304 00370C 02C7              * 
4305 00370C 02C7              * Ptr1 = screen data : Ptr2 = save buffer 
4306 00370C 02C7              * 
4307 00370C 02C7               
4308 00370C 02C7              SaveScreen anop 
4309 00370C 02C7               
4310 00370C 02C7 A9 01                   lda  #1 
4311 00370E 02C9 8D C2 02                sta  SaveRtn 
4312 003711 02CC 80 03                   bra  StartRtn 
4313 003713 02CE               
4314 003713 02CE              RestScreen anop 
4315 003713 02CE               
4316 003713 02CE 9C C2 02                stz  SaveRtn 
4317 003716 02D1               
4318 003716 02D1              StartRtn   anop 
4319 003716 02D1               
4320 003716 02D1 8D 01 C0                sta  On80Store               Make sure 80STORE is on. 
4321 003719 02D4               
4322 003719 02D4 18                      clc 
4323 00371A 02D5 A9 17                   lda  #24-1                   HTab start 
4324 00371C 02D7 8D C3 02                sta  StartHTab 
4325 00371F 02DA 69 16                   adc  #22                     # char wide 
4326 003721 02DC 8D C4 02                sta  EndHTab                 Ending HTab 
4327 003724 02DF               
4328 003724 02DF 38                      sec 
4329 003725 02E0 A9 07                   lda  #8-1                    Base VTab 
4330 003727 02E2 8D C5 02                sta  StartVTab 
4331 00372A 02E5 8D C6 02                sta  CurrLine 
4332 00372D 02E8               
4333 00372D 02E8 A9 00                   lda  #MessageBuf             Set save buffer address 
4334 00372F 02EA 85 80                   sta  Ptr2 
4335 003731 02EC A9 12                   lda  #>MessageBuf 
4336 003733 02EE 85 81                   sta  Ptr2+1 
4337 003735 02F0               
4338 003735 02F0 A2 12                   ldx  #15+3                   Max # of line + 2 for borders + 1 for 
4339 003737 02F2              *                                        being zero base. 
4340 003737 02F2              SSLoop1    anop 
4341 003737 02F2               
4342 003737 02F2 AD C6 02                lda  CurrLine 
4343 00373A 02F5 0A                      asl  a 
4344 00373B 02F6 A8                      tay 
4345 00373C 02F7 B9 92 02                lda  TextLine,y 
4346 00373F 02FA 85 06                   sta  Ptr1 
4347 003741 02FC C8                      iny 
4348 003742 02FD B9 92 02                lda  TextLine,y 
4349 003745 0300 85 07                   sta  Ptr1+1 
4350 003747 0302               
4351 003747 0302 AC C3 02                ldy  StartHTab 
4352 00374A 0305               
4353 00374A 0305              SSLoop2    anop 
4354 00374A 0305               
4355 00374A 0305 5A                      phy 
4356 00374B 0306 98                      tya 
4357 00374C 0307 4A                      lsr  a 
4358 00374D 0308 B0 05                   bcs  FromMain 
4359 00374F 030A               
4360 00374F 030A              FromAux    anop 
4361 00374F 030A               
4362 00374F 030A 8D 55 C0                sta  Page2 
4363 003752 030D 80 03                   bra  GetChar 
4364 003754 030F               
4365 003754 030F              FromMain   anop 
4366 003754 030F               
4367 003754 030F 8D 54 C0                sta  Page1 
4368 003757 0312               
4369 003757 0312              GetChar    anop 
4370 003757 0312               
4371 003757 0312 A8                      tay 
4372 003758 0313 AD C2 02                lda  SaveRtn 
4373 00375B 0316 F0 06                   beq  Restore 
4374 00375D 0318               
4375 00375D 0318 B1 06                   lda  (Ptr1),y 
4376 00375F 031A 92 80                   sta  (Ptr2) 
4377 003761 031C 80 04                   bra  Continue 
4378 003763 031E               
4379 003763 031E              Restore    anop 
4380 003763 031E               
4381 003763 031E B2 80                   lda  (Ptr2) 
4382 003765 0320 91 06                   sta  (Ptr1),y 
4383 003767 0322               
4384 003767 0322              Continue   anop 
4385 003767 0322               
4386 003767 0322 7A                      ply 
4387 003768 0323               
4388 003768 0323 E6 80                   inc  Ptr2                    Increment save buffer pointer 
4389 00376A 0325 D0 02                   bne  NoOF 
4390 00376C 0327               
4391 00376C 0327 E6 81                   inc  Ptr2+1 
4392 00376E 0329               
4393 00376E 0329              NoOF       anop                         No overflow 
4394 00376E 0329               
4395 00376E 0329 C8                      iny 
4396 00376F 032A CC C4 02                cpy  EndHTab                 If y <= EndHTab, SSLoop2 to continue 
4397 003772 032D 90 D6                   bcc  SSLoop2                  saving this line 
4398 003774 032F F0 D4                   beq  SSLoop2 
4399 003776 0331               
4400 003776 0331 EE C6 02                inc  CurrLine                Move to next line 
4401 003779 0334 CA                      dex                          Another line? 
4402 00377A 0335 D0 BB                   bne  SSLoop1 
4403 00377C 0337               
4404 00377C 0337 AD 54 C0                lda  Page1                   Set back to Main for exit. 
4405 00377F 033A               
4406 00377F 033A 60                      rts 
4407 003780 033B               
4408 003780 033B                         End 
 
 
 
Local  Symbols
 
BADKEY     000276  CALCLEVELS 000055  CHANGED    000228  CHANGEPOSN 000209   
CL01       00005A  CL02       00006E  CL03       000071  CONTINUE   000322   
CR01       000288  CURRLINE   0002C6  DA1        000242  DA2        00024A   
DA3        000252  DDLRC      000053  DDLUI      0001BA  DOWNARROW  00008A   
ENDHTAB    0002C4  FROMAUX    00030A  FROMMAIN   00030F  GETCHAR    000312   
HAVEPREFIX 000009  INITPREFIX 000040  INRANGE    000222  KEYDEV     000235   
LASTLINE   000054  LEFTARROW  000088  LEVELSPOSN 000042  LOOP       00001C   
MOUSEDEV1  0001E5  MOUSEDEV2  0001EB  MOUSEDEV3  000208  NEXTKEY01  000238   
NEXTKEY02  000256  NEXTKEY03  00026E  NOCHANGE   000039  NOOF       000329   
NOTZERO    000213  NUMLEVELS  000041  ON80STORE  00C001  PAGE1      00C054   
PAGE2      00C055  POLLDEV    0001C0  POLLDEVLOO 0001C3  POLLMOUSE  0001CB   
RESTORE    00031E  RESTSCREEN 0002CE  RETURNKEY  00008D  RIGHTARROW 000095   
SAVERTN    0002C2  SAVESCREEN 0002C7  SDDL01     000097  SDDL02     0000A4   
SDDL03     0000CC  SDDL04     0000DB  SDDL04A    0000EF  SDDL05     0000F2   
SDDL06     000104  SDDL07     00010C  SDDL07A    000129  SDDL07B    000160   
SDDL08     00017D  SDDL09     000197  SDDL10     0001A9  SELLINE    000052   
SETPREFIX  00027C  SHOWDDL    00007E  SSLOOP1    0002F2  SSLOOP2    000305   
STARTHTAB  0002C3  STARTRTN   0002D1  STARTVTAB  0002C5  TABKEY     000089   
TEXTLINE   000292  TEXTLINE00 000292  TEXTLINE01 000294  TEXTLINE02 000296   
TEXTLINE03 000298  TEXTLINE04 00029A  TEXTLINE05 00029C  TEXTLINE06 00029E   
TEXTLINE07 0002A0  TEXTLINE08 0002A2  TEXTLINE09 0002A4  TEXTLINE10 0002A6   
TEXTLINE11 0002A8  TEXTLINE12 0002AA  TEXTLINE13 0002AC  TEXTLINE14 0002AE   
TEXTLINE15 0002B0  TEXTLINE16 0002B2  TEXTLINE17 0002B4  TEXTLINE18 0002B6   
TEXTLINE19 0002B8  TEXTLINE20 0002BA  TEXTLINE21 0002BC  TEXTLINE22 0002BE   
TEXTLINE23 0002C0  UA1        000260  UA2        00026A  UPARROW    00008B   
4409 003780 0000               
4410 003780 0000              *          Menu2 
4411 003780 0000               
4412 003780 0000                         Copy Menu2.s 
4413 003780 0000              * 
4414 003780 0000              * Selecting disk image target 
4415 003780 0000              * 
4416 003780 0000               
4417 003780 0000              Menu2      Start 
4418 003780 0000                         Using Menu2Vars 
4419 003780 0000               
4420 003780 0000 20 00 80                jsr  SetImgType              Look at file and set image type 
4421 003783 0003 20 EF 01                jsr  GetImgSize              Set an image size based on that type. 
4422 003786 0006               
4423 003786 0006 20 00 80                jsr  PaintMenu2              Paint basic screen frame 
4424 003789 0009               
4425 003789 0009 A9 01                   lda  #1 
4426 00378B 000B 8D 00 80                sta  TabIndex2               Start with "Skip" as default. 
4427 00378E 000E               
4428 00378E 000E              Menu2_01   anop 
4429 00378E 000E               
4430 00378E 000E 20 00 80                jsr  LoadDevs                Get device info 
4431 003791 0011               
4432 003791 0011 20 44 00                jsr  Init2                   Initialize screen 
4433 003794 0014               
4434 003794 0014              Menu2_02   anop 
4435 003794 0014               
4436 003794 0014 20 6F 00                jsr  ListDevs                List devices 5 at a time 
4437 003797 0017               
4438 003797 0017              Menu2_03   anop 
4439 003797 0017               
4440 003797 0017 20 81 01                jsr  Refresh2Btn             Refresh command buttons. 
4441 00379A 001A               
4442 00379A 001A 20 00 80                jsr  Menu2UI                 Menu 2 user interface 
4443 00379D 001D               
4444 00379D 001D AD 00 80                lda  RC2 
4445 0037A0 0020 C9 00                   cmp  #Quit2 
4446 0037A2 0022 F0 1C                   beq  Menu2Exit 
4447 0037A4 0024               
4448 0037A4 0024 C9 00                   cmp  #ReloadDevs 
4449 0037A6 0026 F0 E6                   beq  Menu2_01 
4450 0037A8 0028               
4451 0037A8 0028 C9 00                   cmp  #UpdDevLst 
4452 0037AA 002A F0 E8                   beq  Menu2_02 
4453 0037AC 002C               
4454 0037AC 002C C9 00                   cmp  #Nothing 
4455 0037AE 002E F0 E7                   beq  Menu2_03 
4456 0037B0 0030               
4457 0037B0 0030 20 00 80                jsr  ClearMenu2 
4458 0037B3 0033 20 00 80                jsr  ProcessImg              He's making a disk! 
4459 0037B6 0036               
4460 0037B6 0036 AD 00 80                lda  RC2 
4461 0037B9 0039 C9 00                   cmp  #Quit2 
4462 0037BB 003B F0 03                   beq  Menu2Exit 
4463 0037BD 003D               
4464 0037BD 003D 4C 00 80                jmp  Menu2 
4465 0037C0 0040               
4466 0037C0 0040              Menu2Exit  anop 
4467 0037C0 0040               
4468 0037C0 0040 20 00 80                jsr  ClearMenu2              Clear screen prior to return 
4469 0037C3 0043               
4470 0037C3 0043 60                      rts 
4471 0037C4 0044               
4472 0037C4 0044              * 
4473 0037C4 0044              * Initialize menu2 variables 
4474 0037C4 0044              * 
4475 0037C4 0044               
4476 0037C4 0044              Init2      anop 
4477 0037C4 0044               
4478 0037C4 0044 A9 00                   lda  #Buffer8K 
4479 0037C6 0046 85 06                   sta  Ptr1 
4480 0037C8 0048 8D 00 80                sta  FstAddr 
4481 0037CB 004B A9 80                   lda  #>Buffer8K 
4482 0037CD 004D 85 07                   sta  Ptr1+1 
4483 0037CF 004F 8D 01 80                sta  FstAddr+1 
4484 0037D2 0052               
4485 0037D2 0052 9C 00 80                stz  Above 
4486 0037D5 0055               
4487 0037D5 0055 38                      sec 
4488 0037D6 0056 AD 00 80                lda  DevEntCnt 
4489 0037D9 0059 E9 05                   sbc  #5 
4490 0037DB 005B 8D 00 80                sta  Below 
4491 0037DE 005E 10 03                   bpl  GT5 
4492 0037E0 0060               
4493 0037E0 0060 9C 00 80                stz  Below 
4494 0037E3 0063               
4495 0037E3 0063              GT5        anop 
4496 0037E3 0063               
4497 0037E3 0063 A9 01                   lda  #1 
4498 0037E5 0065 8D 00 80                sta  SelLine 
4499 0037E8 0068               
4500 0037E8 0068 A9 18                   lda  #StdText 
4501 0037EA 006A 20 00 80                jsr  cout 
4502 0037ED 006D               
4503 0037ED 006D 60                      rts 
4504 0037EE 006E               
4505 0037EE 006E              * 
4506 0037EE 006E              * List devices to screen 
4507 0037EE 006E              * 
4508 0037EE 006E               
4509 0037EE 006E 00           LineCount  ds   1 
4510 0037EF 006F               
4511 0037EF 006F              ListDevs   anop 
4512 0037EF 006F               
4513 0037EF 006F A9 12                   lda  #19-1 
4514 0037F1 0071 85 24                   sta  HTab 
4515 0037F3 0073 A9 0A                   lda  #11-1 
4516 0037F5 0075 85 25                   sta  VTab 
4517 0037F7 0077 20 00 80                jsr  SetVtab 
4518 0037FA 007A               
4519 0037FA 007A AD 00 80                lda  SelLine 
4520 0037FD 007D D0 05                   bne  NotUp 
4521 0037FF 007F               
4522 0037FF 007F 20 64 01                jsr  ScrollUp 
4523 003802 0082 80 07                   bra  NoScrollDn 
4524 003804 0084               
4525 003804 0084              NotUp      anop 
4526 003804 0084               
4527 003804 0084 C9 06                   cmp  #6 
4528 003806 0086 90 03                   bcc  NoScrollDn 
4529 003808 0088               
4530 003808 0088 20 47 01                jsr  ScrollDown 
4531 00380B 008B               
4532 00380B 008B              NoScrollDn anop 
4533 00380B 008B               
4534 00380B 008B AD 00 80                lda  FstAddr                 Setup first line address 
4535 00380E 008E 85 06                   sta  Ptr1 
4536 003810 0090 AD 01 80                lda  FstAddr+1 
4537 003813 0093 85 07                   sta  Ptr1+1 
4538 003815 0095               
4539 003815 0095 9C 6E 00                stz  LineCount 
4540 003818 0098               
4541 003818 0098 AD 00 80                lda  DevEntCnt               See if there are any lines to print. 
4542 00381B 009B D0 03                   bne  ListDev01 
4543 00381D 009D               
4544 00381D 009D 4C 27 01                jmp  ListDev90               Nope, so exit. 
4545 003820 00A0               
4546 003820 00A0              ListDev01  anop 
4547 003820 00A0               
4548 003820 00A0 EE 6E 00                inc  LineCount 
4549 003823 00A3 AD 6E 00                lda  LineCount 
4550 003826 00A6 CD 00 80                cmp  SelLine 
4551 003829 00A9 D0 0F                   bne  ListDev02 
4552 00382B 00AB               
4553 00382B 00AB A9 0F                   lda  #Inverse 
4554 00382D 00AD 20 00 80                jsr  cout 
4555 003830 00B0               
4556 003830 00B0 A5 06                   lda  Ptr1 
4557 003832 00B2 8D 00 80                sta  SelAddr 
4558 003835 00B5 A5 07                   lda  Ptr1+1 
4559 003837 00B7 8D 01 80                sta  SelAddr+1 
4560 00383A 00BA               
4561 00383A 00BA              ListDev02  anop 
4562 00383A 00BA               
4563 00383A 00BA A0 00                   ldy  #oSlot 
4564 00383C 00BC B1 06                   lda  (Ptr1),y 
4565 00383E 00BE 20 00 80                jsr  cout 
4566 003841 00C1 A9 AC                   lda  #','+$80 
4567 003843 00C3 20 00 80                jsr  cout 
4568 003846 00C6 A0 00                   ldy  #oDrive 
4569 003848 00C8 B1 06                   lda  (Ptr1),y 
4570 00384A 00CA 20 00 80                jsr  cout 
4571 00384D 00CD               
4572 00384D 00CD A9 A0                   lda  #' '+$80 
4573 00384F 00CF 20 00 80                jsr  cout 
4574 003852 00D2               
4575 003852 00D2 A2 0F                   ldx  #15 
4576 003854 00D4 A0 00                   ldy  #oVolume 
4577 003856 00D6               
4578 003856 00D6              ListDev03  anop 
4579 003856 00D6               
4580 003856 00D6 B1 06                   lda  (Ptr1),y 
4581 003858 00D8 20 00 80                jsr  cout 
4582 00385B 00DB C8                      iny 
4583 00385C 00DC CA                      dex 
4584 00385D 00DD D0 F7                   bne  ListDev03 
4585 00385F 00DF               
4586 00385F 00DF A9 A0                   lda  #' '+$80 
4587 003861 00E1 20 00 80                jsr  cout 
4588 003864 00E4               
4589 003864 00E4 A2 04                   ldx  #4 
4590 003866 00E6 A0 00                   ldy  #oSize 
4591 003868 00E8               
4592 003868 00E8              ListDev04  anop 
4593 003868 00E8               
4594 003868 00E8 B1 06                   lda  (Ptr1),y 
4595 00386A 00EA 20 00 80                jsr  cout 
4596 00386D 00ED C8                      iny 
4597 00386E 00EE CA                      dex 
4598 00386F 00EF D0 F7                   bne  ListDev04 
4599 003871 00F1               
4600 003871 00F1 A9 A0                   lda  #' '+$80 
4601 003873 00F3 20 00 80                jsr  cout 
4602 003876 00F6               
4603 003876 00F6 A0 00                   ldy  #oUnit 
4604 003878 00F8 B1 06                   lda  (Ptr1),y 
4605 00387A 00FA 20 00 80                jsr  cout 
4606 00387D 00FD               
4607 00387D 00FD A9 0E                   lda  #Normal 
4608 00387F 00FF 20 00 80                jsr  cout 
4609 003882 0102               
4610 003882 0102 A9 12                   lda  #19-1 
4611 003884 0104 85 24                   sta  HTab 
4612 003886 0106 E6 25                   inc  VTab 
4613 003888 0108 20 00 80                jsr  SetVTab 
4614 00388B 010B               
4615 00388B 010B AD 6E 00                lda  LineCount 
4616 00388E 010E C9 05                   cmp  #5                      5 lines max per screen 
4617 003890 0110 F0 34                   beq  ListDev99 
4618 003892 0112 CD 00 80                cmp  DevEntCnt               End of screen with < 5 lines? 
4619 003895 0115 F0 10                   beq  ListDev90 
4620 003897 0117               
4621 003897 0117 18                      clc 
4622 003898 0118 A5 06                   lda  Ptr1 
4623 00389A 011A 69 00                   adc  #oEntryLen 
4624 00389C 011C 85 06                   sta  Ptr1 
4625 00389E 011E A5 07                   lda  Ptr1+1 
4626 0038A0 0120 69 00                   adc  #0 
4627 0038A2 0122 85 07                   sta  Ptr1+1 
4628 0038A4 0124 4C A0 00                jmp  ListDev01 
4629 0038A7 0127               
4630 0038A7 0127              ListDev90  anop 
4631 0038A7 0127               
4632 0038A7 0127 38                      sec                          Calculate blank lines required. 
4633 0038A8 0128 A9 05                   lda  #5 
4634 0038AA 012A ED 6E 00                sbc  LineCount 
4635 0038AD 012D AA                      tax 
4636 0038AE 012E F0 16                   beq  ListDev99               No blank lines required. 
4637 0038B0 0130               
4638 0038B0 0130              ListDev92  anop                         Each line 
4639 0038B0 0130               
4640 0038B0 0130 A9 A0                   lda  #' '+$80                Space character 
4641 0038B2 0132 A0 1A                   ldy  #26                     Spaces per line 
4642 0038B4 0134               
4643 0038B4 0134              ListDev94  anop                         Each character in line 
4644 0038B4 0134               
4645 0038B4 0134 20 00 80                jsr  cout 
4646 0038B7 0137 88                      dey 
4647 0038B8 0138 D0 FA                   bne  ListDev94 
4648 0038BA 013A               
4649 0038BA 013A A9 12                   lda  #19-1                   Set back to start of next line 
4650 0038BC 013C 85 24                   sta  HTab 
4651 0038BE 013E E6 25                   inc  VTab 
4652 0038C0 0140 20 00 80                jsr  SetVTab 
4653 0038C3 0143               
4654 0038C3 0143 CA                      dex                          More lines to wipt out? 
4655 0038C4 0144 D0 EA                   bne  ListDev92 
4656 0038C6 0146               
4657 0038C6 0146              ListDev99  anop 
4658 0038C6 0146               
4659 0038C6 0146 60                      rts 
4660 0038C7 0147               
4661 0038C7 0147              * 
4662 0038C7 0147              * Move dev pointer to next dev 
4663 0038C7 0147              * 
4664 0038C7 0147               
4665 0038C7 0147              ScrollDown anop 
4666 0038C7 0147               
4667 0038C7 0147 A9 05                   lda  #5 
4668 0038C9 0149 8D 00 80                sta  SelLine 
4669 0038CC 014C               
4670 0038CC 014C EE 00 80                inc  Above 
4671 0038CF 014F CE 00 80                dec  Below 
4672 0038D2 0152               
4673 0038D2 0152 18                      clc 
4674 0038D3 0153 AD 00 80                lda  FstAddr 
4675 0038D6 0156 69 00                   adc  #oEntryLen 
4676 0038D8 0158 8D 00 80                sta  FstAddr 
4677 0038DB 015B AD 01 80                lda  FstAddr+1 
4678 0038DE 015E 69 00                   adc  #0 
4679 0038E0 0160 8D 01 80                sta  FstAddr+1 
4680 0038E3 0163               
4681 0038E3 0163 60                      rts 
4682 0038E4 0164               
4683 0038E4 0164              * 
4684 0038E4 0164              * Move dev pointer to previous entry 
4685 0038E4 0164              * 
4686 0038E4 0164               
4687 0038E4 0164              ScrollUp   anop 
4688 0038E4 0164               
4689 0038E4 0164 A9 01                   lda  #1 
4690 0038E6 0166 8D 00 80                sta  SelLine 
4691 0038E9 0169               
4692 0038E9 0169 CE 00 80                dec  Above 
4693 0038EC 016C EE 00 80                inc  Below 
4694 0038EF 016F               
4695 0038EF 016F 38                      sec 
4696 0038F0 0170 AD 00 80                lda  FstAddr 
4697 0038F3 0173 E9 00                   sbc  #oEntryLen 
4698 0038F5 0175 8D 00 80                sta  FstAddr 
4699 0038F8 0178 AD 01 80                lda  FstAddr+1 
4700 0038FB 017B E9 00                   sbc  #0 
4701 0038FD 017D 8D 01 80                sta  FstAddr+1 
4702 003900 0180               
4703 003900 0180 60                      rts 
4704 003901 0181               
4705 003901 0181              * 
4706 003901 0181              * Refresh command buttons based on TabIndex2 setting 
4707 003901 0181              * 
4708 003901 0181               
4709 003901 0181              Refresh2Btn Entry 
4710 003901 0181               
4711 003901 0181 A9 00                   lda  #M2BtnText              Set button text address in Ptr1 
4712 003903 0183 85 06                   sta  Ptr1 
4713 003905 0185 A9 80                   lda  #>M2BtnText 
4714 003907 0187 85 07                   sta  Ptr1+1 
4715 003909 0189               
4716 003909 0189 A9 0E                   lda  #Normal                 Make sure inverse is off 
4717 00390B 018B 20 00 80                jsr  cout 
4718 00390E 018E A9 18                   lda  #StdText                Mousetext off 
4719 003910 0190 20 00 80                jsr  cout 
4720 003913 0193               
4721 003913 0193 A2 00                   ldx  #0                      Index 
4722 003915 0195               
4723 003915 0195              Refresh01  anop 
4724 003915 0195               
4725 003915 0195 EC 00 80                cpx  TabIndex2               Is this our active button? 
4726 003918 0198 D0 05                   bne  Refresh02               No so print it normal 
4727 00391A 019A               
4728 00391A 019A A9 0F                   lda  #Inverse                Inverse button 
4729 00391C 019C 20 00 80                jsr  cout 
4730 00391F 019F               
4731 00391F 019F              Refresh02  anop 
4732 00391F 019F               
4733 00391F 019F DA                      phx                          Save current button 
4734 003920 01A0               
4735 003920 01A0 A9 32                   lda  #51-1 
4736 003922 01A2 85 24                   sta  HTab                    HTab 51 
4737 003924 01A4 B2 06                   lda  (Ptr1)                  VTab from table 
4738 003926 01A6 85 25                   sta  VTab 
4739 003928 01A8 20 00 80                jsr  SetVTab 
4740 00392B 01AB               
4741 00392B 01AB A0 01                   ldy  #1                      Starting position index 
4742 00392D 01AD A2 0B                   ldx  #11                     Text length index 
4743 00392F 01AF               
4744 00392F 01AF              Refresh03  anop 
4745 00392F 01AF               
4746 00392F 01AF B1 06                   lda  (Ptr1),y                Get character 
4747 003931 01B1 20 00 80                jsr  cout                    Print 
4748 003934 01B4 C8                      iny                          Move to next character 
4749 003935 01B5 CA                      dex                          Count it as printed 
4750 003936 01B6 D0 F7                   bne  Refresh03               More? 
4751 003938 01B8               
4752 003938 01B8 A9 0E                   lda  #Normal                 Reset to normal text 
4753 00393A 01BA 20 00 80                jsr  cout 
4754 00393D 01BD               
4755 00393D 01BD FA                      plx                          Get index from stack 
4756 00393E 01BE E8                      inx                          Move to next button 
4757 00393F 01BF E0 03                   cpx  #3                      Button 3?  We're done... 
4758 003941 01C1 F0 0F                   beq  Refresh05 
4759 003943 01C3               
4760 003943 01C3 18                      clc                          Add 12 to button text pointer 
4761 003944 01C4 A5 06                   lda  Ptr1                    to setup next button print. 
4762 003946 01C6 69 0C                   adc  #12 
4763 003948 01C8 85 06                   sta  Ptr1 
4764 00394A 01CA A5 07                   lda  Ptr1+1 
4765 00394C 01CC 69 00                   adc  #0 
4766 00394E 01CE 85 07                   sta  Ptr1+1 
4767 003950 01D0 80 C3                   bra  Refresh01               Print next button. 
4768 003952 01D2               
4769 003952 01D2              Refresh05  anop 
4770 003952 01D2               
4771 003952 01D2 EC 00 80                cpx  TabIndex2 
4772 003955 01D5 D0 05                   bne  Refresh06 
4773 003957 01D7               
4774 003957 01D7 A9 0F                   lda  #Inverse 
4775 003959 01D9 20 00 80                jsr  Cout 
4776 00395C 01DC               
4777 00395C 01DC              Refresh06  anop 
4778 00395C 01DC               
4779 00395C 01DC A9 10                   lda  #17-1 
4780 00395E 01DE 85 25                   sta  VTab 
4781 003960 01E0 20 00 80                jsr  SetVTab 
4782 003963 01E3 20 00 80                jsr  PrtImgType 
4783 003966 01E6 A9 0E                   lda  #Normal 
4784 003968 01E8 20 00 80                jsr  cout 
4785 00396B 01EB               
4786 00396B 01EB              Refresh07  anop 
4787 00396B 01EB               
4788 00396B 01EB 20 00 80                jsr  PrtSameSize 
4789 00396E 01EE               
4790 00396E 01EE              Refresh99  anop 
4791 00396E 01EE               
4792 00396E 01EE 60                      rts 
4793 00396F 01EF               
4794 00396F 01EF              * 
4795 00396F 01EF              * Get Disk Image Size 
4796 00396F 01EF              * 
4797 00396F 01EF               
4798 00396F 01EF              GetImgSize Entry 
4799 00396F 01EF               
4800 00396F 01EF 9C 00 80                stz  ImageSize 
4801 003972 01F2 9C 01 80                stz  ImageSize+1 
4802 003975 01F5               
4803 003975 01F5 AD 00 80                lda  ImageType 
4804 003978 01F8               
4805 003978 01F8 C9 00                   cmp  #Type_2IMG              2IMG check. 
4806 00397A 01FA F0 0E                   beq  T_2Img 
4807 00397C 01FC               
4808 00397C 01FC C9 00                   cmp  #Type_DC                Diskcopy 4.2 check. 
4809 00397E 01FE F0 42                   beq  T_DC 
4810 003980 0200               
4811 003980 0200 C9 00                   cmp  #Type_DC6               Diskcopy 6 check 
4812 003982 0202 F0 7C                   beq  T_DC6 
4813 003984 0204               
4814 003984 0204 C9 00                   cmp  #Type_PO                ProDOS Order check 
4815 003986 0206 F0 7C                   beq  T_PO 
4816 003988 0208               
4817 003988 0208 80 7E                   bra  T_DO                    Assume DOS Order if it got here. 
4818 00398A 020A               
4819 00398A 020A              T_2Img     anop                         2IMG image 
4820 00398A 020A               
4821 00398A 020A              *          Use header for image size 
4822 00398A 020A               
4823 00398A 020A 20 00 80                jsr  MLIOpen1 
4824 00398D 020D AD FC 08                lda  openRef1 
4825 003990 0210 8D F0 08                sta  setMarkRef 
4826 003993 0213 8D FD 08                sta  readRef 
4827 003996 0216 8D FF 08                sta  closeRef 
4828 003999 0219               
4829 003999 0219 A9 14                   lda  #$14                    Image size offset 
4830 00399B 021B 8D F1 08                sta  setMarkPos 
4831 00399E 021E 9C F2 08                stz  setMarkPos+1 
4832 0039A1 0221 9C F3 08                stz  setMarkPos+2 
4833 0039A4 0224               
4834 0039A4 0224 20 00 80                jsr  MLISetMark 
4835 0039A7 0227               
4836 0039A7 0227 A9 04                   lda  #4                      Bytes to read 
4837 0039A9 0229 8D F8 08                sta  readRequest 
4838 0039AC 022C 9C F9 08                stz  readRequest+1 
4839 0039AF 022F               
4840 0039AF 022F 20 00 80                jsr  MLIRead 
4841 0039B2 0232               
4842 0039B2 0232 20 00 80                jsr  MLIClose 
4843 0039B5 0235               
4844 0039B5 0235 AD 00 10                lda  readBuf 
4845 0039B8 0238 8D 00 80                sta  ImageSize 
4846 0039BB 023B AD 01 10                lda  readBuf+1 
4847 0039BE 023E 8D 01 80                sta  ImageSize+1 
4848 0039C1 0241               
4849 0039C1 0241 60                      rts 
4850 0039C2 0242               
4851 0039C2 0242              T_DC       anop                         Diskcopy 4.2 image 
4852 0039C2 0242               
4853 0039C2 0242              *          Use header for image size 
4854 0039C2 0242               
4855 0039C2 0242 20 00 80                jsr  MLIOpen1 
4856 0039C5 0245 AD FC 08                lda  openRef1 
4857 0039C8 0248 8D F0 08                sta  setMarkRef 
4858 0039CB 024B 8D FD 08                sta  readRef 
4859 0039CE 024E 8D FF 08                sta  closeRef 
4860 0039D1 0251               
4861 0039D1 0251 A9 40                   lda  #64                     Image size offset 
4862 0039D3 0253 8D F1 08                sta  setMarkPos 
4863 0039D6 0256 9C F2 08                stz  setMarkPos+1 
4864 0039D9 0259 9C F3 08                stz  setMarkPos+2 
4865 0039DC 025C               
4866 0039DC 025C 20 00 80                jsr  MLISetMark 
4867 0039DF 025F               
4868 0039DF 025F A9 04                   lda  #4                      Bytes to read 
4869 0039E1 0261 8D F8 08                sta  readRequest 
4870 0039E4 0264 9C F9 08                stz  readRequest+1 
4871 0039E7 0267               
4872 0039E7 0267 20 00 80                jsr  MLIRead 
4873 0039EA 026A               
4874 0039EA 026A 20 00 80                jsr  MLIClose 
4875 0039ED 026D               
4876 0039ED 026D              *          Convert from image size in bytes to blocks. 
4877 0039ED 026D               
4878 0039ED 026D AD 02 10                lda  readBuf+2 
4879 0039F0 0270 8D 00 80                sta  ImageSize 
4880 0039F3 0273 AD 01 10                lda  readBuf+1 
4881 0039F6 0276 8D 01 80                sta  ImageSize+1 
4882 0039F9 0279               
4883 0039F9 0279 4E 01 80                lsr  ImageSize+1 
4884 0039FC 027C 6E 00 80                ror  ImageSize 
4885 0039FF 027F               
4886 0039FF 027F 60                      rts 
4887 003A00 0280               
4888 003A00 0280              T_DC6      anop                         Diskcopy 6 image 
4889 003A00 0280               
4890 003A00 0280              *          Get image size from file size. 
4891 003A00 0280               
4892 003A00 0280 20 8C 02                jsr  GetFileSize 
4893 003A03 0283               
4894 003A03 0283 60                      rts 
4895 003A04 0284               
4896 003A04 0284              T_PO       anop                         ProDOS Order image 
4897 003A04 0284               
4898 003A04 0284              *          Get image size from file size. 
4899 003A04 0284               
4900 003A04 0284 20 8C 02                jsr  GetFileSize 
4901 003A07 0287               
4902 003A07 0287 60                      rts 
4903 003A08 0288               
4904 003A08 0288              T_DO       anop                         DOS Order image 
4905 003A08 0288               
4906 003A08 0288              *          Get image size from file size. 
4907 003A08 0288               
4908 003A08 0288 20 8C 02                jsr  GetFileSize 
4909 003A0B 028B               
4910 003A0B 028B 60                      rts 
4911 003A0C 028C               
4912 003A0C 028C              * Call MLIGetEOF the retrieve file size 
4913 003A0C 028C               
4914 003A0C 028C              GetFileSize anop 
4915 003A0C 028C               
4916 003A0C 028C 20 00 80                jsr  MLIOpen1 
4917 003A0F 028F AD FC 08                lda  openRef1 
4918 003A12 0292 8D FE 08                sta  geteofRef 
4919 003A15 0295 8D FF 08                sta  closeRef 
4920 003A18 0298 20 00 80                jsr  MLIGetEOF 
4921 003A1B 029B 20 00 80                jsr  MLIClose 
4922 003A1E 029E               
4923 003A1E 029E AD F5 08                lda  geteofEOF+1 
4924 003A21 02A1 8D 00 80                sta  ImageSize 
4925 003A24 02A4 AD F6 08                lda  geteofEOF+2 
4926 003A27 02A7 8D 01 80                sta  ImageSize+1 
4927 003A2A 02AA               
4928 003A2A 02AA 4E 00 80                lsr  ImageSize 
4929 003A2D 02AD 6E 01 80                ror  ImageSize+1 
4930 003A30 02B0               
4931 003A30 02B0 60                      rts 
4932 003A31 02B1               
4933 003A31 02B1                         End 
 
 
 
Local  Symbols
 
GETFILESIZ 00028C  GETIMGSIZE 0001EF  GT5        000063  INIT2      000044   
LINECOUNT  00006E  LISTDEV01  0000A0  LISTDEV02  0000BA  LISTDEV03  0000D6   
LISTDEV04  0000E8  LISTDEV90  000127  LISTDEV92  000130  LISTDEV94  000134   
LISTDEV99  000146  LISTDEVS   00006F  MENU2EXIT  000040  MENU2_01   00000E   
MENU2_02   000014  MENU2_03   000017  NOSCROLLDN 00008B  NOTUP      000084   
REFRESH01  000195  REFRESH02  00019F  REFRESH03  0001AF  REFRESH05  0001D2   
REFRESH06  0001DC  REFRESH07  0001EB  REFRESH2BT 000181  REFRESH99  0001EE   
SCROLLDOWN 000147  SCROLLUP   000164  T_2IMG     00020A  T_DC       000242   
T_DC6      000280  T_DO       000288  T_PO       000284   
4934 003A31 0000                         Copy Menu2Vars.s 
4935 003A31 0000              Menu2Vars  Data 
4936 003A31 0000               
4937 003A31 0000              * Online devices offsets 
4938 003A31 0000               
4939 003A31 0000              oSlot      equ  0  - 0 
4940 003A31 0000              oDrive     equ  1  - 1 
4941 003A31 0000              oVolume    equ  2  - 16 
4942 003A31 0000              oSize      equ  17 - 20 
4943 003A31 0000              oUnit      equ  21 - 21 
4944 003A31 0000              oUnitNo    equ  22 - 22 
4945 003A31 0000              oSizeHex   equ  23 - 24 
4946 003A31 0000              oDevType   equ  25 - 25 
4947 003A31 0000              oEntryLen  equ  26 
4948 003A31 0000               
4949 003A31 0000              * oDevType settings 
4950 003A31 0000               
4951 003A31 0000              DiskIIDev  equ  0 
4952 003A31 0000              SmartDev   equ  1 
4953 003A31 0000              RemapDev   equ  2 
4954 003A31 0000               
4955 003A31 0000              * Shared variables 
4956 003A31 0000               
4957 003A31 0000 00           DevEntCnt  ds   1                       Total number of valid devices 
4958 003A32 0001 00           Above      ds   1 
4959 003A33 0002 00           Below      ds   1 
4960 003A34 0003 00 00        FstAddr    ds   2 
4961 003A36 0005 00           SelLine    ds   1 
4962 003A37 0006 00 00        SelAddr    ds   2 
4963 003A39 0008 00           TabIndex2  ds   1 
4964 003A3A 0009 00           RC2        ds   1 
4965 003A3B 000A               
4966 003A3B 000A              AboutBtn   equ  0 
4967 003A3B 000A              SkipBtn    equ  1 
4968 003A3B 000A              MakeBtn    equ  2 
4969 003A3B 000A              ImgTypeBox equ  3 
4970 003A3B 000A              SameSize   equ  4 
4971 003A3B 000A              LoopBack2  equ  5 
4972 003A3B 000A               
4973 003A3B 000A              Quit2      equ  1 
4974 003A3B 000A              ReloadDevs equ  2 
4975 003A3B 000A              UpdDevLst  equ  3 
4976 003A3B 000A              Nothing    equ  4 
4977 003A3B 000A              MakingDisk equ  5 
4978 003A3B 000A               
4979 003A3B 000A                        Msb  On 
4980 003A3B 000A               
4981 003A3B 000A              M2BtnText  anop 
4982 003A3B 000A 0A A0 C1 E2  AboutText  dc   h'0A',c' About...  ' 
4983 003A47 0016 0C A0 A0 A0  SkipText   dc   h'0C',c'   Back    ' 
4984 003A53 0022 0E A0 CD E1  MakeText   dc   h'0E',c' Make Disk ' 
4985 003A5F 002E               
4986 003A5F 002E B0 B1 B2 B3  AscIITable dc   c'0123456789ABCDEF' 
4987 003A6F 003E               
4988 003A6F 003E              * Disk image type flag with settings 
4989 003A6F 003E               
4990 003A6F 003E 00           ImageType  ds   1 
4991 003A70 003F               
4992 003A70 003F              Type_2IMG  equ  0 
4993 003A70 003F              Type_DC    equ  1 
4994 003A70 003F              Type_DC6   equ  2 
4995 003A70 003F              Type_PO    equ  3 
4996 003A70 003F              Type_DO    equ  4 
4997 003A70 003F               
4998 003A70 003F 00 00        ImageSize  ds   2                       Image size in number of blocks. 
4999 003A72 0041 00 00        EndBlock   ds   2                       Number of blocks to write. 
5000 003A74 0043 00 00        CurrBlock  ds   2                       Current block pointer 
5001 003A76 0045               
5002 003A76 0045              * Same-size disks variables 
5003 003A76 0045               
5004 003A76 0045 01           blnSize    dc   h'01'                   0 = off; 1 = on 
5005 003A77 0046               
5006 003A77 0046              * Format 5.25 buffer areas. 
5007 003A77 0046               
5008 003A77 0046              * TrkBuf     ds   $1940 
5009 003A77 0046              * TrkBufEnd  anop 
5010 003A77 0046               
5011 003A77 0046              * EOFMarker  dc   h'00'                   End of buffer marker. 
5012 003A77 0046               
5013 003A77 0046              Buffer8K   equ  $9000 
5014 003A77 0046              * VfyBuf     ds   $2000 
5015 003A77 0046              * VfyBufEnd  anop 
5016 003A77 0046               
5017 003A77 0046               
5018 003A77 0046                         Msb  Off 
5019 003A77 0046               
5020 003A77 0046                         End 
 
 
 
Local  Symbols
 
ABOUTBTN   000000  ABOUTTEXT  00000A  ABOVE      000001  ASCIITABLE 00002E   
BELOW      000002  BLNSIZE    000045  BUFFER8K   009000  CURRBLOCK  000043   
DEVENTCNT  000000  DISKIIDEV  000000  ENDBLOCK   000041  FSTADDR    000003   
IMAGESIZE  00003F  IMAGETYPE  00003E  IMGTYPEBOX 000003  LOOPBACK2  000005   
M2BTNTEXT  00000A  MAKEBTN    000002  MAKETEXT   000022  MAKINGDISK 000005   
NOTHING    000004  ODEVTYPE   000019  ODRIVE     000001  OENTRYLEN  00001A   
OSIZE      000011  OSIZEHEX   000017  OSLOT      000000  OUNIT      000015   
OUNITNO    000016  OVOLUME    000002  QUIT2      000001  RC2        000009   
RELOADDEVS 000002  REMAPDEV   000002  SAMESIZE   000004  SELADDR    000006   
SELLINE    000005  SKIPBTN    000001  SKIPTEXT   000016  SMARTDEV   000001   
TABINDEX2  000008  TYPE_2IMG  000000  TYPE_DC    000001  TYPE_DC6   000002   
TYPE_DO    000004  TYPE_PO    000003  UPDDEVLST  000003   
5021 003A77 0000                         Copy SetImageType.s 
5022 003A77 0000              * 
5023 003A77 0000              * Set default disk image type 
5024 003A77 0000              * 
5025 003A77 0000               
5026 003A77 0000              SetImgType Start 
5027 003A77 0000                         Using Menu2Vars 
5028 003A77 0000               
5029 003A77 0000              * First check file type / auxtype 
5030 003A77 0000              * 
5031 003A77 0000              * $E0 / $0005 = DiskCopy 4.2 
5032 003A77 0000              * $E0 / $0130 = Universal Disk Image 
5033 003A77 0000              * $E0 / $0120 = DiskCopy 6 
5034 003A77 0000              * $E0 / $0121 = ProDOS order image 
5035 003A77 0000               
5036 003A77 0000 A9 00                   lda  #Type_PO                Default type 
5037 003A79 0002 8D 00 80                sta  ImageType 
5038 003A7C 0005               
5039 003A7C 0005 AD 80 08                lda  FileType 
5040 003A7F 0008 C9 E0                   cmp  #$E0 
5041 003A81 000A F0 03                   beq  Next00 
5042 003A83 000C 4C 65 00                jmp  TryExtension 
5043 003A86 000F               
5044 003A86 000F              Next00     anop 
5045 003A86 000F               
5046 003A86 000F AD 82 08                lda  AuxType+1               Check for DiskCopy 4.2 type 
5047 003A89 0012 D0 0F                   bne  Next01 
5048 003A8B 0014 AD 81 08                lda  AuxType 
5049 003A8E 0017 C9 05                   cmp  #$05 
5050 003A90 0019 D0 08                   bne  Next01 
5051 003A92 001B               
5052 003A92 001B A9 00                   lda  #Type_DC 
5053 003A94 001D 8D 00 80                sta  ImageType 
5054 003A97 0020 4C 65 00                jmp  TryExtension 
5055 003A9A 0023               
5056 003A9A 0023              Next01     anop 
5057 003A9A 0023               
5058 003A9A 0023 AD 82 08                lda  AuxType+1               Check for Universal Disk Image 
5059 003A9D 0026 C9 01                   cmp  #$01 
5060 003A9F 0028 D0 0F                   bne  Next02 
5061 003AA1 002A AD 81 08                lda  AuxType 
5062 003AA4 002D C9 30                   cmp  #$30 
5063 003AA6 002F D0 08                   bne  Next02 
5064 003AA8 0031               
5065 003AA8 0031 A9 00                   lda  #Type_2IMG 
5066 003AAA 0033 8D 00 80                sta  ImageType 
5067 003AAD 0036 4C 65 00                jmp  TryExtension 
5068 003AB0 0039               
5069 003AB0 0039              Next02     anop 
5070 003AB0 0039               
5071 003AB0 0039 AD 82 08                lda  AuxType+1               Check for DiskCopy 6 
5072 003AB3 003C C9 01                   cmp  #$01 
5073 003AB5 003E D0 0F                   bne  Next03 
5074 003AB7 0040 AD 81 08                lda  AuxType 
5075 003ABA 0043 C9 20                   cmp  #$20 
5076 003ABC 0045 D0 08                   bne  Next03 
5077 003ABE 0047               
5078 003ABE 0047 A9 00                   lda  #Type_DC6 
5079 003AC0 0049 8D 00 80                sta  ImageType 
5080 003AC3 004C 4C 65 00                jmp  TryExtension 
5081 003AC6 004F               
5082 003AC6 004F              Next03     anop 
5083 003AC6 004F               
5084 003AC6 004F AD 82 08                lda  AuxType+1               Check for ProDOS order image 
5085 003AC9 0052 C9 01                   cmp  #$01 
5086 003ACB 0054 D0 0F                   bne  Next04 
5087 003ACD 0056 AD 81 08                lda  AuxType 
5088 003AD0 0059 C9 21                   cmp  #$21 
5089 003AD2 005B D0 08                   bne  Next04 
5090 003AD4 005D               
5091 003AD4 005D A9 00                   lda  #Type_PO 
5092 003AD6 005F 8D 00 80                sta  ImageType 
5093 003AD9 0062 4C 65 00                jmp  TryExtension 
5094 003ADC 0065               
5095 003ADC 0065              Next04     anop 
5096 003ADC 0065               
5097 003ADC 0065              * 
5098 003ADC 0065              * Next check file extension. 
5099 003ADC 0065              * 
5100 003ADC 0065              * .dc, .img  = DiskCopy 4.2 
5101 003ADC 0065              * .dc6, .dmg = DiskCopy 6 
5102 003ADC 0065              * .2mg       = Universal Disk Image 
5103 003ADC 0065              * .po        = ProDOS Order Disk Image 
5104 003ADC 0065              * .do, .dsk  = DOS Order Disk Image 
5105 003ADC 0065               
5106 003ADC 0065              TryExtension anop 
5107 003ADC 0065               
5108 003ADC 0065 AD 40 08                lda  Path 
5109 003ADF 0068 8D 1C 02                sta  FileLen 
5110 003AE2 006B AA                      tax 
5111 003AE3 006C               
5112 003AE3 006C              NextChar   anop 
5113 003AE3 006C               
5114 003AE3 006C BD 40 08                lda  Path,x 
5115 003AE6 006F C9 2E                   cmp  #'.' 
5116 003AE8 0071 F0 06                   beq  FoundPeriod 
5117 003AEA 0073 CA                      dex 
5118 003AEB 0074 D0 F6                   bne  NextChar 
5119 003AED 0076               
5120 003AED 0076 4C BD 01                jmp  CheckHeader             Falls to here if no extension. 
5121 003AF0 0079               
5122 003AF0 0079              FoundPeriod anop 
5123 003AF0 0079               
5124 003AF0 0079 E8                      inx                          Move 1 past period 
5125 003AF1 007A 8E 1D 02                stx  ExtStart 
5126 003AF4 007D EC 1C 02                cpx  FileLen 
5127 003AF7 0080 D0 03                   bne  OkExt 
5128 003AF9 0082 4C BD 01                jmp  CheckHeader             Period at end of filename. 
5129 003AFC 0085               
5130 003AFC 0085              OkExt      anop 
5131 003AFC 0085               
5132 003AFC 0085 38                      sec 
5133 003AFD 0086 AD 1C 02                lda  FileLen 
5134 003B00 0089 ED 1D 02                sbc  ExtStart 
5135 003B03 008C 1A                      inc  a 
5136 003B04 008D 8D 1E 02                sta  ExtLen 
5137 003B07 0090 C9 02                   cmp  #2                      An extension length of 2? 
5138 003B09 0092 D0 1A                   bne  TryIMG 
5139 003B0B 0094               
5140 003B0B 0094 AE 1D 02                ldx  ExtStart 
5141 003B0E 0097 BD 40 08                lda  Path,x 
5142 003B11 009A C9 44                   cmp  #'D' 
5143 003B13 009C D0 10                   bne  TryIMG 
5144 003B15 009E E8                      inx 
5145 003B16 009F BD 40 08                lda  Path,x 
5146 003B19 00A2 C9 43                   cmp  #'C' 
5147 003B1B 00A4 D0 08                   bne  TryImg 
5148 003B1D 00A6               
5149 003B1D 00A6 A9 00                   lda  #Type_DC 
5150 003B1F 00A8 8D 00 80                sta  ImageType 
5151 003B22 00AB 4C BD 01                jmp  CheckHeader 
5152 003B25 00AE               
5153 003B25 00AE              TryIMG     anop 
5154 003B25 00AE               
5155 003B25 00AE AD 1E 02                lda  ExtLen 
5156 003B28 00B1 C9 03                   cmp  #3                      An extension length of 2? 
5157 003B2A 00B3 D0 22                   bne  TryDC6 
5158 003B2C 00B5               
5159 003B2C 00B5 AE 1D 02                ldx  ExtStart 
5160 003B2F 00B8 BD 40 08                lda  Path,x 
5161 003B32 00BB C9 49                   cmp  #'I' 
5162 003B34 00BD D0 18                   bne  TryDC6 
5163 003B36 00BF E8                      inx 
5164 003B37 00C0 BD 40 08                lda  Path,x 
5165 003B3A 00C3 C9 4D                   cmp  #'M' 
5166 003B3C 00C5 D0 10                   bne  TryDC6 
5167 003B3E 00C7 E8                      inx 
5168 003B3F 00C8 BD 40 08                lda  Path,x 
5169 003B42 00CB C9 47                   cmp  #'G' 
5170 003B44 00CD D0 08                   bne  TryDC6 
5171 003B46 00CF               
5172 003B46 00CF A9 00                   lda  #Type_DC 
5173 003B48 00D1 8D 00 80                sta  ImageType 
5174 003B4B 00D4 4C BD 01                jmp  CheckHeader 
5175 003B4E 00D7               
5176 003B4E 00D7              TryDC6     anop 
5177 003B4E 00D7               
5178 003B4E 00D7 AD 1E 02                lda  ExtLen 
5179 003B51 00DA C9 03                   cmp  #3                      An extension length of 2? 
5180 003B53 00DC D0 22                   bne  TryDMG 
5181 003B55 00DE               
5182 003B55 00DE AE 1D 02                ldx  ExtStart 
5183 003B58 00E1 BD 40 08                lda  Path,x 
5184 003B5B 00E4 C9 44                   cmp  #'D' 
5185 003B5D 00E6 D0 18                   bne  TryDMG 
5186 003B5F 00E8 E8                      inx 
5187 003B60 00E9 BD 40 08                lda  Path,x 
5188 003B63 00EC C9 43                   cmp  #'C' 
5189 003B65 00EE D0 10                   bne  TryDMG 
5190 003B67 00F0 E8                      inx 
5191 003B68 00F1 BD 40 08                lda  Path,x 
5192 003B6B 00F4 C9 36                   cmp  #'6' 
5193 003B6D 00F6 D0 08                   bne  TryDMG 
5194 003B6F 00F8               
5195 003B6F 00F8 A9 00                   lda  #Type_DC6 
5196 003B71 00FA 8D 00 80                sta  ImageType 
5197 003B74 00FD 4C BD 01                jmp  CheckHeader 
5198 003B77 0100               
5199 003B77 0100              TryDMG     anop 
5200 003B77 0100               
5201 003B77 0100 AD 1E 02                lda  ExtLen 
5202 003B7A 0103 C9 03                   cmp  #3                      An extension length of 2? 
5203 003B7C 0105 D0 22                   bne  Try2MG 
5204 003B7E 0107               
5205 003B7E 0107 AE 1D 02                ldx  ExtStart 
5206 003B81 010A BD 40 08                lda  Path,x 
5207 003B84 010D C9 44                   cmp  #'D' 
5208 003B86 010F D0 18                   bne  Try2MG 
5209 003B88 0111 E8                      inx 
5210 003B89 0112 BD 40 08                lda  Path,x 
5211 003B8C 0115 C9 4D                   cmp  #'M' 
5212 003B8E 0117 D0 10                   bne  Try2MG 
5213 003B90 0119 E8                      inx 
5214 003B91 011A BD 40 08                lda  Path,x 
5215 003B94 011D C9 47                   cmp  #'G' 
5216 003B96 011F D0 08                   bne  Try2MG 
5217 003B98 0121               
5218 003B98 0121 A9 00                   lda  #Type_DC6 
5219 003B9A 0123 8D 00 80                sta  ImageType 
5220 003B9D 0126 4C BD 01                jmp  CheckHeader 
5221 003BA0 0129               
5222 003BA0 0129              Try2MG     anop 
5223 003BA0 0129               
5224 003BA0 0129 AD 1E 02                lda  ExtLen 
5225 003BA3 012C C9 03                   cmp  #3                      An extension length of 2? 
5226 003BA5 012E D0 22                   bne  TryPO 
5227 003BA7 0130               
5228 003BA7 0130 AE 1D 02                ldx  ExtStart 
5229 003BAA 0133 BD 40 08                lda  Path,x 
5230 003BAD 0136 C9 32                   cmp  #'2' 
5231 003BAF 0138 D0 18                   bne  TryPO 
5232 003BB1 013A E8                      inx 
5233 003BB2 013B BD 40 08                lda  Path,x 
5234 003BB5 013E C9 4D                   cmp  #'M' 
5235 003BB7 0140 D0 10                   bne  TryPO 
5236 003BB9 0142 E8                      inx 
5237 003BBA 0143 BD 40 08                lda  Path,x 
5238 003BBD 0146 C9 47                   cmp  #'G' 
5239 003BBF 0148 D0 08                   bne  TryPO 
5240 003BC1 014A               
5241 003BC1 014A A9 00                   lda  #Type_2IMG 
5242 003BC3 014C 8D 00 80                sta  ImageType 
5243 003BC6 014F 4C BD 01                jmp  CheckHeader 
5244 003BC9 0152               
5245 003BC9 0152              TryPO      anop 
5246 003BC9 0152               
5247 003BC9 0152 AD 1E 02                lda  ExtLen 
5248 003BCC 0155 C9 02                   cmp  #2                      An extension length of 2? 
5249 003BCE 0157 D0 1A                   bne  TryDSK 
5250 003BD0 0159               
5251 003BD0 0159 AE 1D 02                ldx  ExtStart 
5252 003BD3 015C BD 40 08                lda  Path,x 
5253 003BD6 015F C9 50                   cmp  #'P' 
5254 003BD8 0161 D0 10                   bne  TryDSK 
5255 003BDA 0163 E8                      inx 
5256 003BDB 0164 BD 40 08                lda  Path,x 
5257 003BDE 0167 C9 4F                   cmp  #'O' 
5258 003BE0 0169 D0 08                   bne  TryDSK 
5259 003BE2 016B               
5260 003BE2 016B A9 00                   lda  #Type_PO 
5261 003BE4 016D 8D 00 80                sta  ImageType 
5262 003BE7 0170 4C BD 01                jmp  CheckHeader 
5263 003BEA 0173               
5264 003BEA 0173               
5265 003BEA 0173              TryDSK     anop 
5266 003BEA 0173               
5267 003BEA 0173 AD 1E 02                lda  ExtLen 
5268 003BED 0176 C9 03                   cmp  #3                      An extension length of 2? 
5269 003BEF 0178 D0 22                   bne  TryDO 
5270 003BF1 017A               
5271 003BF1 017A AE 1D 02                ldx  ExtStart 
5272 003BF4 017D BD 40 08                lda  Path,x 
5273 003BF7 0180 C9 44                   cmp  #'D' 
5274 003BF9 0182 D0 18                   bne  TryDO 
5275 003BFB 0184 E8                      inx 
5276 003BFC 0185 BD 40 08                lda  Path,x 
5277 003BFF 0188 C9 53                   cmp  #'S' 
5278 003C01 018A D0 10                   bne  TryDO 
5279 003C03 018C E8                      inx 
5280 003C04 018D BD 40 08                lda  Path,x 
5281 003C07 0190 C9 4B                   cmp  #'K' 
5282 003C09 0192 D0 08                   bne  TryDO 
5283 003C0B 0194               
5284 003C0B 0194 A9 00                   lda  #Type_DO 
5285 003C0D 0196 8D 00 80                sta  ImageType 
5286 003C10 0199 4C BD 01                jmp  CheckHeader 
5287 003C13 019C               
5288 003C13 019C              TryDO      anop 
5289 003C13 019C               
5290 003C13 019C AD 1E 02                lda  ExtLen 
5291 003C16 019F C9 02                   cmp  #2                      An extension length of 2? 
5292 003C18 01A1 D0 1A                   bne  TryUnk 
5293 003C1A 01A3               
5294 003C1A 01A3 AE 1D 02                ldx  ExtStart 
5295 003C1D 01A6 BD 40 08                lda  Path,x 
5296 003C20 01A9 C9 44                   cmp  #'D' 
5297 003C22 01AB D0 10                   bne  TryUnk 
5298 003C24 01AD E8                      inx 
5299 003C25 01AE BD 40 08                lda  Path,x 
5300 003C28 01B1 C9 4F                   cmp  #'O' 
5301 003C2A 01B3 D0 08                   bne  TryUnk 
5302 003C2C 01B5               
5303 003C2C 01B5 A9 00                   lda  #Type_DO 
5304 003C2E 01B7 8D 00 80                sta  ImageType 
5305 003C31 01BA 4C BD 01                jmp  CheckHeader 
5306 003C34 01BD               
5307 003C34 01BD              TryUnk     anop                         Unknown extension 
5308 003C34 01BD               
5309 003C34 01BD              CheckHeader anop                        Check file header 
5310 003C34 01BD               
5311 003C34 01BD 20 00 80                jsr  MLIOpen1 
5312 003C37 01C0               
5313 003C37 01C0 AD FC 08                lda  openRef1 
5314 003C3A 01C3 8D FD 08                sta  readRef 
5315 003C3D 01C6 8D FF 08                sta  closeRef 
5316 003C40 01C9               
5317 003C40 01C9 A9 04                   lda  #4 
5318 003C42 01CB 8D F8 08                sta  readRequest 
5319 003C45 01CE 9C F9 08                stz  readRequest+1 
5320 003C48 01D1               
5321 003C48 01D1 20 00 80                jsr  MLIRead 
5322 003C4B 01D4               
5323 003C4B 01D4 20 00 80                jsr  MLIClose 
5324 003C4E 01D7               
5325 003C4E 01D7              Try2IMG    anop 
5326 003C4E 01D7               
5327 003C4E 01D7 AD 00 10                lda  readBuf 
5328 003C51 01DA C9 32                   cmp  #'2' 
5329 003C53 01DC D0 1C                   bne  TryGMI2 
5330 003C55 01DE               
5331 003C55 01DE AD 01 10                lda  readBuf+1 
5332 003C58 01E1 C9 49                   cmp  #'I' 
5333 003C5A 01E3 D0 36                   bne  ExitRtn 
5334 003C5C 01E5               
5335 003C5C 01E5 AD 02 10                lda  readBuf+2 
5336 003C5F 01E8 C9 4D                   cmp  #'M' 
5337 003C61 01EA D0 2F                   bne  ExitRtn 
5338 003C63 01EC               
5339 003C63 01EC AD 03 10                lda  readBuf+3 
5340 003C66 01EF C9 47                   cmp  #'G' 
5341 003C68 01F1 D0 28                   bne  ExitRtn 
5342 003C6A 01F3               
5343 003C6A 01F3 A9 00                   lda  #Type_2IMG 
5344 003C6C 01F5 8D 00 80                sta  ImageType 
5345 003C6F 01F8 80 21                   bra  ExitRtn 
5346 003C71 01FA               
5347 003C71 01FA              TryGMI2    anop 
5348 003C71 01FA               
5349 003C71 01FA AD 00 10                lda  readBuf 
5350 003C74 01FD C9 47                   cmp  #'G' 
5351 003C76 01FF D0 1A                   bne  ExitRtn 
5352 003C78 0201               
5353 003C78 0201 AD 01 10                lda  readBuf+1 
5354 003C7B 0204 C9 4D                   cmp  #'M' 
5355 003C7D 0206 D0 13                   bne  ExitRtn 
5356 003C7F 0208               
5357 003C7F 0208 AD 02 10                lda  readBuf+2 
5358 003C82 020B C9 49                   cmp  #'I' 
5359 003C84 020D D0 0C                   bne  ExitRtn 
5360 003C86 020F               
5361 003C86 020F AD 03 10                lda  readBuf+3 
5362 003C89 0212 C9 32                   cmp  #'2' 
5363 003C8B 0214 D0 05                   bne  ExitRtn 
5364 003C8D 0216               
5365 003C8D 0216 A9 00                   lda  #Type_2IMG 
5366 003C8F 0218 8D 00 80                sta  ImageType 
5367 003C92 021B               
5368 003C92 021B              ExitRtn    anop 
5369 003C92 021B               
5370 003C92 021B 60                      rts 
5371 003C93 021C               
5372 003C93 021C 00           FileLen    ds   1 
5373 003C94 021D 00           ExtStart   ds   1 
5374 003C95 021E 00           ExtLen     ds   1 
5375 003C96 021F               
5376 003C96 021F                         End 
 
 
 
Local  Symbols
 
CHECKHEADE 0001BD  EXITRTN    00021B  EXTLEN     00021E  EXTSTART   00021D   
FILELEN    00021C  FOUNDPERIO 000079  NEXT00     00000F  NEXT01     000023   
NEXT02     000039  NEXT03     00004F  NEXT04     000065  NEXTCHAR   00006C   
OKEXT      000085  TRY2IMG    0001D7  TRY2MG     000129  TRYDC6     0000D7   
TRYDMG     000100  TRYDO      00019C  TRYDSK     000173  TRYEXTENSI 000065   
TRYGMI2    0001FA  TRYIMG     0000AE  TRYPO      000152  TRYUNK     0001BD   
5377 003C96 0000                         Copy PaintMenu2.s 
5378 003C96 0000              * 
5379 003C96 0000              * Paint basic frame for menu 2 
5380 003C96 0000              * 
5381 003C96 0000               
5382 003C96 0000              PaintMenu2 Start 
5383 003C96 0000                         Using Menu2Vars 
5384 003C96 0000               
5385 003C96 0000              *   L i n e   8 
5386 003C96 0000               
5387 003C96 0000 A9 07                   lda  #8-1 
5388 003C98 0002 85 25                   sta  VTab 
5389 003C9A 0004 A9 0F                   lda  #16-1 
5390 003C9C 0006 85 24                   sta  HTab 
5391 003C9E 0008 20 00 80                jsr  SetVTab 
5392 003CA1 000B               
5393 003CA1 000B A9 1B                   lda  #MouseText 
5394 003CA3 000D 20 00 80                jsr  cout 
5395 003CA6 0010               
5396 003CA6 0010 A9 5A                   lda  #'Z' 
5397 003CA8 0012 20 00 80                jsr  cout                    Left | 
5398 003CAB 0015               
5399 003CAB 0015 A2 30                   ldx  #48 
5400 003CAD 0017 A9 4C                   lda  #'L'                    Top of box 
5401 003CAF 0019               
5402 003CAF 0019              L8Loop1    anop 
5403 003CAF 0019               
5404 003CAF 0019 20 00 80                jsr  cout 
5405 003CB2 001C CA                      dex 
5406 003CB3 001D D0 FA                   bne  L8Loop1 
5407 003CB5 001F               
5408 003CB5 001F A9 5F                   lda  #'_' 
5409 003CB7 0021 20 00 80                jsr  cout                    Right | 
5410 003CBA 0024               
5411 003CBA 0024              *   L i n e   9 
5412 003CBA 0024               
5413 003CBA 0024 E6 25                   inc  VTab 
5414 003CBC 0026 A9 0F                   lda  #16-1 
5415 003CBE 0028 85 24                   sta  HTab 
5416 003CC0 002A 20 00 80                jsr  SetVTab 
5417 003CC3 002D               
5418 003CC3 002D A9 5A                   lda  #'Z' 
5419 003CC5 002F 20 00 80                jsr  cout                    Left side | 
5420 003CC8 0032               
5421 003CC8 0032 A9 11                   lda  #18-1                   Skip a space 
5422 003CCA 0034 85 24                   sta  HTab 
5423 003CCC 0036               
5424 003CCC 0036 A0 00                   ldy  #0 
5425 003CCE 0038 A2 1C                   ldx  #Line9TextE-Line9Text 
5426 003CD0 003A               
5427 003CD0 003A              L9Loop1    anop 
5428 003CD0 003A               
5429 003CD0 003A B9 11 03                lda  Line9Text,y 
5430 003CD3 003D 20 00 80                jsr  cout 
5431 003CD6 0040 C8                      iny 
5432 003CD7 0041 CA                      dex 
5433 003CD8 0042 D0 F6                   bne  L9Loop1 
5434 003CDA 0044               
5435 003CDA 0044 A9 2E                   lda  #47-1 
5436 003CDC 0046 85 24                   sta  HTab                    Skip a space 
5437 003CDE 0048               
5438 003CDE 0048 A9 A7                   lda  #"'"+$80                Quote 
5439 003CE0 004A 20 00 80                jsr  cout 
5440 003CE3 004D               
5441 003CE3 004D AE 40 08                ldx  Path 
5442 003CE6 0050 A0 00                   ldy  #0 
5443 003CE8 0052               
5444 003CE8 0052              L9Loop2    anop 
5445 003CE8 0052               
5446 003CE8 0052 C8                      iny 
5447 003CE9 0053 B9 40 08                lda  Path,y 
5448 003CEC 0056 09 80                   ora  #$80 
5449 003CEE 0058 20 00 80                jsr  cout 
5450 003CF1 005B CA                      dex 
5451 003CF2 005C D0 F4                   bne  L9Loop2 
5452 003CF4 005E               
5453 003CF4 005E A9 A7                   lda  #"'"+$80                Quote 
5454 003CF6 0060 20 00 80                jsr  cout 
5455 003CF9 0063               
5456 003CF9 0063 A9 40                   lda  #65-1 
5457 003CFB 0065 85 24                   sta  HTab                    Skip a space 
5458 003CFD 0067               
5459 003CFD 0067 A9 5F                   lda  #'_' 
5460 003CFF 0069 20 00 80                jsr  cout                    Right side | 
5461 003D02 006C               
5462 003D02 006C              *   L i n e   1 0 
5463 003D02 006C               
5464 003D02 006C A9 0F                   lda  #16-1 
5465 003D04 006E 85 24                   sta  HTab 
5466 003D06 0070 E6 25                   inc  VTab 
5467 003D08 0072 20 00 80                jsr  SetVTab 
5468 003D0B 0075               
5469 003D0B 0075 A9 5A                   lda  #'Z' 
5470 003D0D 0077 20 00 80                jsr  cout                    Left side | 
5471 003D10 007A               
5472 003D10 007A A9 11                   lda  #18-1 
5473 003D12 007C 85 24                   sta  HTab 
5474 003D14 007E               
5475 003D14 007E A2 1D                   ldx  #29 
5476 003D16 0080 A9 DF                   lda  #'_'+$80                Underscore 
5477 003D18 0082               
5478 003D18 0082              L10Loop1   anop 
5479 003D18 0082               
5480 003D18 0082 20 00 80                jsr  cout 
5481 003D1B 0085 CA                      dex 
5482 003D1C 0086 D0 FA                   bne  L10Loop1 
5483 003D1E 0088               
5484 003D1E 0088 A9 31                   lda  #50-1 
5485 003D20 008A 85 24                   sta  HTab 
5486 003D22 008C               
5487 003D22 008C A2 0D                   ldx  #13 
5488 003D24 008E A9 DF                   lda  #'_'+$80 
5489 003D26 0090               
5490 003D26 0090              L10Loop2   anop 
5491 003D26 0090               
5492 003D26 0090 20 00 80                jsr  cout 
5493 003D29 0093 CA                      dex 
5494 003D2A 0094 D0 FA                   bne  L10Loop2 
5495 003D2C 0096               
5496 003D2C 0096 A9 40                   lda  #65-1 
5497 003D2E 0098 85 24                   sta  HTab 
5498 003D30 009A               
5499 003D30 009A A9 5F                   lda  #'_' 
5500 003D32 009C 20 00 80                jsr  cout                    Right side | 
5501 003D35 009F               
5502 003D35 009F              *   L i n e   1 1 
5503 003D35 009F               
5504 003D35 009F A9 0A                   lda  #11-1 
5505 003D37 00A1 85 25                   sta  VTab 
5506 003D39 00A3 A9 0F                   lda  #16-1 
5507 003D3B 00A5 85 24                   sta  HTab 
5508 003D3D 00A7 20 00 80                jsr  SetVTab 
5509 003D40 00AA               
5510 003D40 00AA A9 5A                   lda  #'Z' 
5511 003D42 00AC 20 00 80                jsr  cout 
5512 003D45 00AF               
5513 003D45 00AF A9 11                   lda  #18-1 
5514 003D47 00B1 85 24                   sta  HTab 
5515 003D49 00B3               
5516 003D49 00B3 A9 5F                   lda  #'_' 
5517 003D4B 00B5 20 00 80                jsr  cout 
5518 003D4E 00B8               
5519 003D4E 00B8 A9 2C                   lda  #45-1 
5520 003D50 00BA 85 24                   sta  HTab 
5521 003D52 00BC               
5522 003D52 00BC A9 5A                   lda  #'Z' 
5523 003D54 00BE 20 00 80                jsr  cout 
5524 003D57 00C1               
5525 003D57 00C1 A9 52                   lda  #'R' 
5526 003D59 00C3 20 00 80                jsr  cout 
5527 003D5C 00C6               
5528 003D5C 00C6 A9 30                   lda  #49-1 
5529 003D5E 00C8 85 24                   sta  HTab 
5530 003D60 00CA               
5531 003D60 00CA A9 5A                   lda  #'Z' 
5532 003D62 00CC 20 00 80                jsr  cout 
5533 003D65 00CF               
5534 003D65 00CF A9 18                   lda  #StdText 
5535 003D67 00D1 20 00 80                jsr  cout 
5536 003D6A 00D4 A9 20                   lda  #' ' 
5537 003D6C 00D6 20 00 80                jsr  cout 
5538 003D6F 00D9               
5539 003D6F 00D9 A2 0B                   ldx  #11 
5540 003D71 00DB A0 01                   ldy  #1 
5541 003D73 00DD               
5542 003D73 00DD              L11Loop1   anop 
5543 003D73 00DD               
5544 003D73 00DD B9 00 80                lda  AboutText,y 
5545 003D76 00E0 20 00 80                jsr  cout 
5546 003D79 00E3 C8                      iny 
5547 003D7A 00E4 CA                      dex 
5548 003D7B 00E5 D0 F6                   bne  L11Loop1 
5549 003D7D 00E7               
5550 003D7D 00E7 A9 20                   lda  #' ' 
5551 003D7F 00E9 20 00 80                jsr  cout 
5552 003D82 00EC               
5553 003D82 00EC A9 1B                   lda  #MouseText 
5554 003D84 00EE 20 00 80                jsr  cout 
5555 003D87 00F1               
5556 003D87 00F1 A9 5F                   lda  #'_' 
5557 003D89 00F3 20 00 80                jsr  cout 
5558 003D8C 00F6               
5559 003D8C 00F6 A9 40                   lda  #65-1 
5560 003D8E 00F8 85 24                   sta  HTab 
5561 003D90 00FA               
5562 003D90 00FA A9 5F                   lda  #'_' 
5563 003D92 00FC 20 00 80                jsr  cout 
5564 003D95 00FF               
5565 003D95 00FF              *   L i n e   1 2 
5566 003D95 00FF               
5567 003D95 00FF A9 0B                   lda  #12-1 
5568 003D97 0101 85 25                   sta  VTab 
5569 003D99 0103 A9 0F                   lda  #16-1 
5570 003D9B 0105 85 24                   sta  HTab 
5571 003D9D 0107 20 00 80                jsr  SetVTab 
5572 003DA0 010A               
5573 003DA0 010A A9 5A                   lda  #'Z' 
5574 003DA2 010C 20 00 80                jsr  cout 
5575 003DA5 010F               
5576 003DA5 010F A9 11                   lda  #18-1 
5577 003DA7 0111 85 24                   sta  HTab 
5578 003DA9 0113               
5579 003DA9 0113 A9 5F                   lda  #'_' 
5580 003DAB 0115 20 00 80                jsr  cout 
5581 003DAE 0118               
5582 003DAE 0118 A9 2C                   lda  #45-1 
5583 003DB0 011A 85 24                   sta  HTab 
5584 003DB2 011C               
5585 003DB2 011C A9 5A                   lda  #'Z' 
5586 003DB4 011E 20 00 80                jsr  cout 
5587 003DB7 0121               
5588 003DB7 0121 A9 56                   lda  #'V' 
5589 003DB9 0123 20 00 80                jsr  cout 
5590 003DBC 0126               
5591 003DBC 0126 A9 31                   lda  #50-1 
5592 003DBE 0128 85 24                   sta  HTab 
5593 003DC0 012A               
5594 003DC0 012A A2 0D                   ldx  #13 
5595 003DC2 012C A9 5C                   lda  #'\' 
5596 003DC4 012E               
5597 003DC4 012E              L12Loop1   anop 
5598 003DC4 012E               
5599 003DC4 012E 20 00 80                jsr  cout 
5600 003DC7 0131 CA                      dex 
5601 003DC8 0132 D0 FA                   bne  L12Loop1 
5602 003DCA 0134               
5603 003DCA 0134 A9 40                   lda  #65-1 
5604 003DCC 0136 85 24                   sta  HTab 
5605 003DCE 0138               
5606 003DCE 0138 A9 5F                   lda  #'_' 
5607 003DD0 013A 20 00 80                jsr  cout 
5608 003DD3 013D               
5609 003DD3 013D              *   L i n e   1 3 
5610 003DD3 013D               
5611 003DD3 013D A9 0C                   lda  #13-1 
5612 003DD5 013F 85 25                   sta  VTab 
5613 003DD7 0141 A9 0F                   lda  #16-1 
5614 003DD9 0143 85 24                   sta  HTab 
5615 003DDB 0145 20 00 80                jsr  SetVTab 
5616 003DDE 0148               
5617 003DDE 0148 A9 5A                   lda  #'Z' 
5618 003DE0 014A 20 00 80                jsr  cout 
5619 003DE3 014D               
5620 003DE3 014D A9 11                   lda  #18-1 
5621 003DE5 014F 85 24                   sta  HTab 
5622 003DE7 0151               
5623 003DE7 0151 A9 5F                   lda  #'_' 
5624 003DE9 0153 20 00 80                jsr  cout 
5625 003DEC 0156               
5626 003DEC 0156 A9 2C                   lda  #45-1 
5627 003DEE 0158 85 24                   sta  HTab 
5628 003DF0 015A               
5629 003DF0 015A A9 5A                   lda  #'Z' 
5630 003DF2 015C 20 00 80                jsr  cout 
5631 003DF5 015F               
5632 003DF5 015F A9 56                   lda  #'V' 
5633 003DF7 0161 20 00 80                jsr  cout 
5634 003DFA 0164               
5635 003DFA 0164 A9 30                   lda  #49-1 
5636 003DFC 0166 85 24                   sta  HTab 
5637 003DFE 0168               
5638 003DFE 0168 A9 5A                   lda  #'Z' 
5639 003E00 016A 20 00 80                jsr  cout 
5640 003E03 016D               
5641 003E03 016D A9 18                   lda  #StdText 
5642 003E05 016F 20 00 80                jsr  cout 
5643 003E08 0172 A9 20                   lda  #' ' 
5644 003E0A 0174 20 00 80                jsr  cout 
5645 003E0D 0177               
5646 003E0D 0177 A2 0B                   ldx  #11 
5647 003E0F 0179 A0 01                   ldy  #1 
5648 003E11 017B               
5649 003E11 017B              L13Loop1   anop 
5650 003E11 017B               
5651 003E11 017B B9 00 80                lda  SkipText,y 
5652 003E14 017E 20 00 80                jsr  cout 
5653 003E17 0181 C8                      iny 
5654 003E18 0182 CA                      dex 
5655 003E19 0183 D0 F6                   bne  L13Loop1 
5656 003E1B 0185               
5657 003E1B 0185 A9 20                   lda  #' ' 
5658 003E1D 0187 20 00 80                jsr  cout 
5659 003E20 018A               
5660 003E20 018A A9 1B                   lda  #MouseText 
5661 003E22 018C 20 00 80                jsr  cout 
5662 003E25 018F               
5663 003E25 018F A9 5F                   lda  #'_' 
5664 003E27 0191 20 00 80                jsr  cout 
5665 003E2A 0194               
5666 003E2A 0194 A9 40                   lda  #65-1 
5667 003E2C 0196 85 24                   sta  HTab 
5668 003E2E 0198               
5669 003E2E 0198 A9 5F                   lda  #'_' 
5670 003E30 019A 20 00 80                jsr  cout 
5671 003E33 019D               
5672 003E33 019D              *   L i n e   1 4 
5673 003E33 019D               
5674 003E33 019D A9 0D                   lda  #14-1 
5675 003E35 019F 85 25                   sta  VTab 
5676 003E37 01A1 A9 0F                   lda  #16-1 
5677 003E39 01A3 85 24                   sta  HTab 
5678 003E3B 01A5 20 00 80                jsr  SetVTab 
5679 003E3E 01A8               
5680 003E3E 01A8 A9 5A                   lda  #'Z' 
5681 003E40 01AA 20 00 80                jsr  cout 
5682 003E43 01AD               
5683 003E43 01AD A9 11                   lda  #18-1 
5684 003E45 01AF 85 24                   sta  HTab 
5685 003E47 01B1               
5686 003E47 01B1 A9 5F                   lda  #'_' 
5687 003E49 01B3 20 00 80                jsr  cout 
5688 003E4C 01B6               
5689 003E4C 01B6 A9 2C                   lda  #45-1 
5690 003E4E 01B8 85 24                   sta  HTab 
5691 003E50 01BA               
5692 003E50 01BA A9 5A                   lda  #'Z' 
5693 003E52 01BC 20 00 80                jsr  cout 
5694 003E55 01BF               
5695 003E55 01BF A9 56                   lda  #'V' 
5696 003E57 01C1 20 00 80                jsr  cout 
5697 003E5A 01C4               
5698 003E5A 01C4 A9 31                   lda  #50-1 
5699 003E5C 01C6 85 24                   sta  HTab 
5700 003E5E 01C8               
5701 003E5E 01C8 A2 0D                   ldx  #13 
5702 003E60 01CA A9 5C                   lda  #'\' 
5703 003E62 01CC               
5704 003E62 01CC              L14Loop1   anop 
5705 003E62 01CC               
5706 003E62 01CC 20 00 80                jsr  cout 
5707 003E65 01CF CA                      dex 
5708 003E66 01D0 D0 FA                   bne  L14Loop1 
5709 003E68 01D2               
5710 003E68 01D2 A9 40                   lda  #65-1 
5711 003E6A 01D4 85 24                   sta  HTab 
5712 003E6C 01D6               
5713 003E6C 01D6 A9 5F                   lda  #'_' 
5714 003E6E 01D8 20 00 80                jsr  cout 
5715 003E71 01DB               
5716 003E71 01DB              *   L i n e   1 5 
5717 003E71 01DB               
5718 003E71 01DB A9 0E                   lda  #15-1 
5719 003E73 01DD 85 25                   sta  VTab 
5720 003E75 01DF A9 0F                   lda  #16-1 
5721 003E77 01E1 85 24                   sta  HTab 
5722 003E79 01E3 20 00 80                jsr  SetVTab 
5723 003E7C 01E6               
5724 003E7C 01E6 A9 5A                   lda  #'Z' 
5725 003E7E 01E8 20 00 80                jsr  cout 
5726 003E81 01EB               
5727 003E81 01EB A9 11                   lda  #18-1 
5728 003E83 01ED 85 24                   sta  HTab 
5729 003E85 01EF               
5730 003E85 01EF A9 5F                   lda  #'_' 
5731 003E87 01F1 20 00 80                jsr  cout 
5732 003E8A 01F4               
5733 003E8A 01F4 A9 2C                   lda  #45-1 
5734 003E8C 01F6 85 24                   sta  HTab 
5735 003E8E 01F8               
5736 003E8E 01F8 A9 5A                   lda  #'Z' 
5737 003E90 01FA 20 00 80                jsr  cout 
5738 003E93 01FD               
5739 003E93 01FD A9 51                   lda  #'Q' 
5740 003E95 01FF 20 00 80                jsr  cout 
5741 003E98 0202               
5742 003E98 0202 A9 30                   lda  #49-1 
5743 003E9A 0204 85 24                   sta  HTab 
5744 003E9C 0206               
5745 003E9C 0206 A9 5A                   lda  #'Z' 
5746 003E9E 0208 20 00 80                jsr  cout 
5747 003EA1 020B               
5748 003EA1 020B A9 18                   lda  #StdText 
5749 003EA3 020D 20 00 80                jsr  cout 
5750 003EA6 0210 A9 20                   lda  #' ' 
5751 003EA8 0212 20 00 80                jsr  cout 
5752 003EAB 0215               
5753 003EAB 0215 A2 0B                   ldx  #11 
5754 003EAD 0217 A0 01                   ldy  #1 
5755 003EAF 0219               
5756 003EAF 0219              L15Loop1   anop 
5757 003EAF 0219               
5758 003EAF 0219 B9 00 80                lda  MakeText,y 
5759 003EB2 021C 20 00 80                jsr  cout 
5760 003EB5 021F C8                      iny 
5761 003EB6 0220 CA                      dex 
5762 003EB7 0221 D0 F6                   bne  L15Loop1 
5763 003EB9 0223               
5764 003EB9 0223 A9 20                   lda  #' ' 
5765 003EBB 0225 20 00 80                jsr  cout 
5766 003EBE 0228               
5767 003EBE 0228 A9 1B                   lda  #MouseText 
5768 003EC0 022A 20 00 80                jsr  cout 
5769 003EC3 022D               
5770 003EC3 022D A9 5F                   lda  #'_' 
5771 003EC5 022F 20 00 80                jsr  cout 
5772 003EC8 0232               
5773 003EC8 0232 A9 40                   lda  #65-1 
5774 003ECA 0234 85 24                   sta  HTab 
5775 003ECC 0236               
5776 003ECC 0236 A9 5F                   lda  #'_' 
5777 003ECE 0238 20 00 80                jsr  cout 
5778 003ED1 023B               
5779 003ED1 023B              *   L i n e   16 
5780 003ED1 023B               
5781 003ED1 023B A9 0F                   lda  #16-1 
5782 003ED3 023D 85 25                   sta  VTab 
5783 003ED5 023F A9 0F                   lda  #16-1 
5784 003ED7 0241 85 24                   sta  HTab 
5785 003ED9 0243 20 00 80                jsr  SetVTab 
5786 003EDC 0246               
5787 003EDC 0246 A9 5A                   lda  #'Z' 
5788 003EDE 0248 20 00 80                jsr  cout 
5789 003EE1 024B               
5790 003EE1 024B A9 11                   lda  #18-1 
5791 003EE3 024D 85 24                   sta  HTab 
5792 003EE5 024F               
5793 003EE5 024F A2 16                   ldx  #22 
5794 003EE7 0251 A9 5C                   lda  #'\' 
5795 003EE9 0253               
5796 003EE9 0253              L16Loop1   anop 
5797 003EE9 0253               
5798 003EE9 0253 20 00 80                jsr  cout 
5799 003EEC 0256 CA                      dex 
5800 003EED 0257 D0 FA                   bne  L16Loop1 
5801 003EEF 0259               
5802 003EEF 0259 A9 4C                   lda  #'L' 
5803 003EF1 025B 20 00 80                jsr  cout 
5804 003EF4 025E 20 00 80                jsr  cout 
5805 003EF7 0261               
5806 003EF7 0261 A9 5C                   lda  #'\' 
5807 003EF9 0263 20 00 80                jsr  cout 
5808 003EFC 0266               
5809 003EFC 0266 A2 04                   ldx  #4 
5810 003EFE 0268 A9 4C                   lda  #'L' 
5811 003F00 026A               
5812 003F00 026A              L16Loop2   anop 
5813 003F00 026A               
5814 003F00 026A 20 00 80                jsr  cout 
5815 003F03 026D CA                      dex 
5816 003F04 026E D0 FA                   bne  L16Loop2 
5817 003F06 0270               
5818 003F06 0270 A9 31                   lda  #50-1 
5819 003F08 0272 85 24                   sta  HTab 
5820 003F0A 0274               
5821 003F0A 0274 A2 0D                   ldx  #13 
5822 003F0C 0276 A9 4C                   lda  #'L' 
5823 003F0E 0278               
5824 003F0E 0278              L16Loop3   anop 
5825 003F0E 0278               
5826 003F0E 0278 20 00 80                jsr  cout 
5827 003F11 027B CA                      dex 
5828 003F12 027C D0 FA                   bne  L16Loop3 
5829 003F14 027E               
5830 003F14 027E A9 40                   lda  #65-1 
5831 003F16 0280 85 24                   sta  HTab 
5832 003F18 0282               
5833 003F18 0282 A9 5F                   lda  #'_' 
5834 003F1A 0284 20 00 80                jsr  cout 
5835 003F1D 0287               
5836 003F1D 0287              *   L i n e   1 7 
5837 003F1D 0287               
5838 003F1D 0287 A9 10                   lda  #17-1 
5839 003F1F 0289 85 25                   sta  VTab 
5840 003F21 028B A9 0F                   lda  #16-1 
5841 003F23 028D 85 24                   sta  HTab 
5842 003F25 028F 20 00 80                jsr  SetVTab 
5843 003F28 0292               
5844 003F28 0292 A9 5A                   lda  #'Z' 
5845 003F2A 0294 20 00 80                jsr  cout 
5846 003F2D 0297               
5847 003F2D 0297 A9 11                   lda  #18-1 
5848 003F2F 0299 85 24                   sta  HTab 
5849 003F31 029B               
5850 003F31 029B A9 5F                   lda  #'_' 
5851 003F33 029D 20 00 80                jsr  cout 
5852 003F36 02A0               
5853 003F36 02A0 20 00 80                jsr  PrtImgType 
5854 003F39 02A3               
5855 003F39 02A3 A9 26                   lda  #39-1 
5856 003F3B 02A5 85 24                   sta  HTab 
5857 003F3D 02A7               
5858 003F3D 02A7 A9 5A                   lda  #'Z' 
5859 003F3F 02A9 20 00 80                jsr  cout 
5860 003F42 02AC               
5861 003F42 02AC A9 28                   lda  #41-1 
5862 003F44 02AE 85 24                   sta  HTab 
5863 003F46 02B0               
5864 003F46 02B0 A9 5A                   lda  #'Z' 
5865 003F48 02B2 20 00 80                jsr  cout 
5866 003F4B 02B5               
5867 003F4B 02B5 A9 2A                   lda  #43-1 
5868 003F4D 02B7 85 24                   sta  HTab 
5869 003F4F 02B9               
5870 003F4F 02B9 A9 5F                   lda  #'_' 
5871 003F51 02BB 20 00 80                jsr  cout 
5872 003F54 02BE               
5873 003F54 02BE A0 00                   ldy  #0 
5874 003F56 02C0 A2 14                   ldx  #Line17TexE-Line17Text 
5875 003F58 02C2               
5876 003F58 02C2              L17Loop1   anop 
5877 003F58 02C2               
5878 003F58 02C2 B9 2D 03                lda  Line17Text,y 
5879 003F5B 02C5 20 00 80                jsr  cout 
5880 003F5E 02C8 C8                      iny 
5881 003F5F 02C9 CA                      dex 
5882 003F60 02CA D0 F6                   bne  L17Loop1 
5883 003F62 02CC               
5884 003F62 02CC A9 40                   lda  #65-1 
5885 003F64 02CE 85 24                   sta  HTab 
5886 003F66 02D0               
5887 003F66 02D0 A9 5F                   lda  #'_' 
5888 003F68 02D2 20 00 80                jsr  cout 
5889 003F6B 02D5               
5890 003F6B 02D5              *   L i n e   1 8 
5891 003F6B 02D5               
5892 003F6B 02D5 A9 11                   lda  #18-1 
5893 003F6D 02D7 85 25                   sta  VTab 
5894 003F6F 02D9 A9 0F                   lda  #16-1 
5895 003F71 02DB 85 24                   sta  HTab 
5896 003F73 02DD 20 00 80                jsr  SetVTab 
5897 003F76 02E0               
5898 003F76 02E0 A9 5A                   lda  #'Z' 
5899 003F78 02E2 20 00 80                jsr  cout 
5900 003F7B 02E5               
5901 003F7B 02E5 A9 DF                   lda  #'_'+$80 
5902 003F7D 02E7 20 00 80                jsr  cout 
5903 003F80 02EA               
5904 003F80 02EA A2 16                   ldx  #22 
5905 003F82 02EC A9 5C                   lda  #'\' 
5906 003F84 02EE               
5907 003F84 02EE              L18Loop1   anop 
5908 003F84 02EE               
5909 003F84 02EE 20 00 80                jsr  cout 
5910 003F87 02F1 CA                      dex 
5911 003F88 02F2 D0 FA                   bne  L18Loop1 
5912 003F8A 02F4               
5913 003F8A 02F4 A9 DF                   lda  #'_'+$80 
5914 003F8C 02F6 20 00 80                jsr  cout 
5915 003F8F 02F9 20 00 80                jsr  cout 
5916 003F92 02FC               
5917 003F92 02FC A9 5C                   lda  #'\' 
5918 003F94 02FE 20 00 80                jsr  cout 
5919 003F97 0301               
5920 003F97 0301 A2 16                   ldx  #22 
5921 003F99 0303 A9 DF                   lda  #'_'+$80 
5922 003F9B 0305               
5923 003F9B 0305              L18Loop2   anop 
5924 003F9B 0305               
5925 003F9B 0305 20 00 80                jsr  cout 
5926 003F9E 0308 CA                      dex 
5927 003F9F 0309 D0 FA                   bne  L18Loop2 
5928 003FA1 030B               
5929 003FA1 030B A9 5F                   lda  #'_' 
5930 003FA3 030D 20 00 80                jsr  cout 
5931 003FA6 0310               
5932 003FA6 0310 60                      rts 
5933 003FA7 0311               
5934 003FA7 0311                         Msb  On 
5935 003FA7 0311               
5936 003FA7 0311 D3 E5 EC E5  Line9Text  dc   c'Select target for the image:' 
5937 003FC3 032D              Line9TextE anop 
5938 003FC3 032D               
5939 003FC3 032D D3 E1 ED E5  Line17Text dc   c'Same-size disks only' 
5940 003FD7 0341              Line17TexE anop 
5941 003FD7 0341               
5942 003FD7 0341                         Msb  Off 
5943 003FD7 0341               
5944 003FD7 0341              * 
5945 003FD7 0341              * Clear menu2 data area 
5946 003FD7 0341              * 
5947 003FD7 0341               
5948 003FD7 0341              ClearMenu2 Entry 
5949 003FD7 0341               
5950 003FD7 0341 A9 0F                   lda  #16-1                   Start at HTab 16 
5951 003FD9 0343 85 24                   sta  HTab 
5952 003FDB 0345 A9 07                   lda  #8-1                    Start at VTab 8 
5953 003FDD 0347 85 25                   sta  VTab 
5954 003FDF 0349 20 00 80                jsr  SetVTab 
5955 003FE2 034C               
5956 003FE2 034C A0 0B                   ldy  #11                     Total lines to wipe out 
5957 003FE4 034E               
5958 003FE4 034E              NextLine   anop 
5959 003FE4 034E               
5960 003FE4 034E 5A                      phy                          Save y register 
5961 003FE5 034F A9 A0                   lda  #' '+$80                Space character 
5962 003FE7 0351 A2 32                   ldx  #50                     Character per line to wipe out 
5963 003FE9 0353               
5964 003FE9 0353              NextChar   anop 
5965 003FE9 0353               
5966 003FE9 0353 20 00 80                jsr  cout                    Print space 
5967 003FEC 0356 CA                      dex                          Count space printed 
5968 003FED 0357 D0 FA                   bne  NextChar                More? 
5969 003FEF 0359               
5970 003FEF 0359 A9 0F                   lda  #16-1                   Line complete 
5971 003FF1 035B 85 24                   sta  HTab                    Set HTab back to 17 
5972 003FF3 035D E6 25                   inc  VTab                    Bump up VTAB 
5973 003FF5 035F 20 00 80                jsr  SetVTab 
5974 003FF8 0362               
5975 003FF8 0362 7A                      ply                          Restore y register 
5976 003FF9 0363 88                      dey                          Count line printed 
5977 003FFA 0364 D0 E8                   bne  NextLine                More 
5978 003FFC 0366               
5979 003FFC 0366 60                      rts                          Return 
5980 003FFD 0367               
5981 003FFD 0367                         End 
 
 
 
Local  Symbols
 
CLEARMENU2 000341  L10LOOP1   000082  L10LOOP2   000090  L11LOOP1   0000DD   
L12LOOP1   00012E  L13LOOP1   00017B  L14LOOP1   0001CC  L15LOOP1   000219   
L16LOOP1   000253  L16LOOP2   00026A  L16LOOP3   000278  L17LOOP1   0002C2   
L18LOOP1   0002EE  L18LOOP2   000305  L8LOOP1    000019  L9LOOP1    00003A   
L9LOOP2    000052  LINE17TEXE 000341  LINE17TEXT 00032D  LINE9TEXT  000311   
LINE9TEXTE 00032D  NEXTCHAR   000353  NEXTLINE   00034E   
5982 003FFD 0000                         Copy LoadDevs.s 
5983 003FFD 0000              * 
5984 003FFD 0000              * Load information on devices 
5985 003FFD 0000              * 
5986 003FFD 0000               
5987 003FFD 0000              LoadDevs   Start 
5988 003FFD 0000                         Using Menu2Vars 
5989 003FFD 0000               
5990 003FFD 0000 A9 00                   lda  #Buffer8K 
5991 003FFF 0002 85 06                   sta  Ptr1 
5992 004001 0004 A9 80                   lda  #>Buffer8K 
5993 004003 0006 85 07                   sta  Ptr1+1 
5994 004005 0008               
5995 004005 0008 9C 00 80                stz  DevEntCnt 
5996 004008 000B               
5997 004008 000B A9 07                   lda  #7                      7 slots to scan 
5998 00400A 000D 8D 60 00                sta  Slot 
5999 00400D 0010               
6000 00400D 0010              SetUnitNo  anop 
6001 00400D 0010               
6002 00400D 0010 0A                      asl  a                       Setup unit number by shifting slot 
6003 00400E 0011 0A                      asl  a                        number to left nibble. 
6004 00400F 0012 0A                      asl  a 
6005 004010 0013 0A                      asl  a 
6006 004011 0014               
6007 004011 0014 A2 00                   ldx  #RemapDev               Default to a remapped Smartport dev. 
6008 004013 0016 8E 63 00                stx  DevType 
6009 004016 0019               
6010 004016 0019              NextDrive  anop 
6011 004016 0019               
6012 004016 0019 8D F7 08                sta  onlineUnit              Setup unit no for call. 
6013 004019 001C 20 00 80                jsr  MLIOnline               Call MLI Online 
6014 00401C 001F               
6015 00401C 001F C9 28                   cmp  #$28                    Device not connected error 
6016 00401E 0021 F0 2B                   beq  Skip 
6017 004020 0023               
6018 004020 0023 20 64 00                jsr  IsNetwork               Is this an Appleshare volume? 
6019 004023 0026 B0 26                   bcs  Skip 
6020 004025 0028               
6021 004025 0028 20 7D 00                jsr  GetDevSize              Get valid device block size 
6022 004028 002B               
6023 004028 002B AD 61 00                lda  DevSize                 Couldn't find size so skip. 
6024 00402B 002E 0D 62 00                ora  DevSize+1 
6025 00402E 0031 F0 1B                   beq  Skip 
6026 004030 0033               
6027 004030 0033 AD 00 80                lda  blnSize                 See if Same Size checkbox is on 
6028 004033 0036 F0 10                   beq  SizeOk                  No, so process save device info. 
6029 004035 0038               
6030 004035 0038 AD 01 80                lda  ImageSize+1             Check to see if the device size 
6031 004038 003B CD 62 00                cmp  DevSize+1               matches the image size we have. 
6032 00403B 003E D0 0E                   bne  Skip 
6033 00403D 0040               
6034 00403D 0040 AD 00 80                lda  ImageSize 
6035 004040 0043 CD 61 00                cmp  DevSize 
6036 004043 0046 D0 06                   bne  Skip 
6037 004045 0048               
6038 004045 0048              SizeOk     anop 
6039 004045 0048               
6040 004045 0048 EE 00 80                inc  DevEntCnt               Valid device, count it. 
6041 004048 004B 20 6E 02                jsr  SaveDevInfo             Save device data to buffer. 
6042 00404B 004E               
6043 00404B 004E              Skip       anop 
6044 00404B 004E               
6045 00404B 004E AD F7 08                lda  onlineUnit              Have we tested drive 2 for this slot? 
6046 00404E 0051 30 04                   bmi  NextSlot                Yes so go to next slot. 
6047 004050 0053               
6048 004050 0053 09 80                   ora  #%10000000              Set to drive 2 and 
6049 004052 0055 80 C2                   bra  NextDrive                test device. 
6050 004054 0057               
6051 004054 0057              NextSlot   anop 
6052 004054 0057               
6053 004054 0057 CE 60 00                dec  Slot                    Move to next slot. 
6054 004057 005A AD 60 00                lda  Slot                    Are we now at slot 0? 
6055 00405A 005D D0 B1                   bne  SetUnitno               No so test for device. 
6056 00405C 005F               
6057 00405C 005F 60                      rts 
6058 00405D 0060               
6059 00405D 0060 00           Slot       ds   1 
6060 00405E 0061 00 00        DevSize    ds   2 
6061 004060 0063 00           DevType    ds   1 
6062 004061 0064               
6063 004061 0064              * Check to see if we have an Appleshare unit number in accumulator. 
6064 004061 0064               
6065 004061 0064              IsNetwork  anop 
6066 004061 0064               
6067 004061 0064 A0 00                   ldy  #0 
6068 004063 0066 AE DE 08                ldx  NetDevCnt 
6069 004066 0069 F0 10                   beq  IN95                    No network volumes 
6070 004068 006B               
6071 004068 006B              IN01       anop 
6072 004068 006B               
6073 004068 006B B9 DF 08                lda  NetDevs,y 
6074 00406B 006E CD F7 08                cmp  onlineUnit 
6075 00406E 0071 F0 06                   beq  IN90 
6076 004070 0073               
6077 004070 0073 C8                      iny 
6078 004071 0074 CA                      dex 
6079 004072 0075 D0 F4                   bne  IN01 
6080 004074 0077 80 02                   bra  IN95 
6081 004076 0079               
6082 004076 0079              In90       anop 
6083 004076 0079               
6084 004076 0079 38                      sec 
6085 004077 007A 60                      rts 
6086 004078 007B               
6087 004078 007B              IN95       anop 
6088 004078 007B               
6089 004078 007B 18                      clc 
6090 004079 007C 60                      rts 
6091 00407A 007D               
6092 00407A 007D              GetDevSize anop 
6093 00407A 007D               
6094 00407A 007D A9 C0                   lda  #$C0                    Set up slot address 
6095 00407C 007F 0D 60 00                ora  Slot 
6096 00407F 0082 85 81                   sta  Ptr2+1 
6097 004081 0084               
6098 004081 0084 A9 01                   lda  #$01                    1st ID byte 
6099 004083 0086 85 80                   sta  Ptr2 
6100 004085 0088 B2 80                   lda  (Ptr2) 
6101 004087 008A C9 20                   cmp  #$20 
6102 004089 008C F0 03                   beq  Ok1 
6103 00408B 008E 4C EA 00                jmp  ProStatus 
6104 00408E 0091               
6105 00408E 0091              Ok1        anop 
6106 00408E 0091               
6107 00408E 0091 A9 03                   lda  #$03                    2nd ID byte 
6108 004090 0093 85 80                   sta  Ptr2 
6109 004092 0095 B2 80                   lda  (Ptr2) 
6110 004094 0097 F0 03                   beq  Ok2 
6111 004096 0099 4C EA 00                jmp  ProStatus 
6112 004099 009C               
6113 004099 009C              Ok2        anop 
6114 004099 009C               
6115 004099 009C A9 05                   lda  #$05                    3rd ID byte 
6116 00409B 009E 85 80                   sta  Ptr2 
6117 00409D 00A0 B2 80                   lda  (Ptr2) 
6118 00409F 00A2 C9 03                   cmp  #$03 
6119 0040A1 00A4 F0 03                   beq  BlockDev 
6120 0040A3 00A6 4C EA 00                jmp  ProStatus 
6121 0040A6 00A9               
6122 0040A6 00A9              * We have a block device of some sort here. 
6123 0040A6 00A9               
6124 0040A6 00A9              BlockDev   anop 
6125 0040A6 00A9               
6126 0040A6 00A9 A9 FF                   lda  #$FF 
6127 0040A8 00AB 85 80                   sta  Ptr2 
6128 0040AA 00AD B2 80                   lda  (Ptr2) 
6129 0040AC 00AF D0 10                   bne  NotDiskII 
6130 0040AE 00B1               
6131 0040AE 00B1              * It's a Disk ][ so hard code it's size to 280 ($0118) blocks. 
6132 0040AE 00B1               
6133 0040AE 00B1 A9 01                   lda  #$01 
6134 0040B0 00B3 8D 62 00                sta  DevSize+1 
6135 0040B3 00B6 A9 18                   lda  #$18 
6136 0040B5 00B8 8D 61 00                sta  DevSize 
6137 0040B8 00BB               
6138 0040B8 00BB A9 00                   lda  #DiskIIDev              Set device type to Disk ][ 
6139 0040BA 00BD 8D 63 00                sta  DevType 
6140 0040BD 00C0               
6141 0040BD 00C0 60                      rts 
6142 0040BE 00C1               
6143 0040BE 00C1              NotDiskII  anop 
6144 0040BE 00C1               
6145 0040BE 00C1 A9 00                   lda  #SmartDev               Smartport in this slot 
6146 0040C0 00C3 8D 63 00                sta  DevType 
6147 0040C3 00C6               
6148 0040C3 00C6 A9 07                   lda  #$07                    4th ID byte 
6149 0040C5 00C8 85 80                   sta  Ptr2 
6150 0040C7 00CA B2 80                   lda  (Ptr2) 
6151 0040C9 00CC F0 03                   beq  Smartport 
6152 0040CB 00CE 4C EA 00                jmp  ProStatus 
6153 0040CE 00D1               
6154 0040CE 00D1              Smartport  anop 
6155 0040CE 00D1               
6156 0040CE 00D1              * We have a Smartport device so get it's blocksize from $FC and $FD offset. 
6157 0040CE 00D1              * If this value is zeros then we must do a Smartport status call to get size. 
6158 0040CE 00D1               
6159 0040CE 00D1 A9 FC                   lda  #$FC 
6160 0040D0 00D3 85 80                   sta  Ptr2 
6161 0040D2 00D5 B2 80                   lda  (Ptr2) 
6162 0040D4 00D7 8D 61 00                sta  DevSize 
6163 0040D7 00DA E6 80                   inc  Ptr2 
6164 0040D9 00DC B2 80                   lda  (Ptr2) 
6165 0040DB 00DE 8D 62 00                sta  DevSize+1 
6166 0040DE 00E1 0D 61 00                ora  DevSize 
6167 0040E1 00E4 D0 03                   bne  GoodSize 
6168 0040E3 00E6 4C 94 01                jmp  SmartStatus 
6169 0040E6 00E9               
6170 0040E6 00E9              GoodSize   anop 
6171 0040E6 00E9               
6172 0040E6 00E9 60                      rts 
6173 0040E7 00EA               
6174 0040E7 00EA              * Do a ProDOS driver status call to retrieve device block size. 
6175 0040E7 00EA               
6176 0040E7 00EA              ProStatus  anop 
6177 0040E7 00EA               
6178 0040E7 00EA              DevAddr    equ  $BF10 
6179 0040E7 00EA               
6180 0040E7 00EA AD F7 08                lda  onlineUnit              Compute slot/drive offset by dividing 
6181 0040EA 00ED 4A                      lsr  a                       unit number by 16. 
6182 0040EB 00EE 4A                      lsr  a 
6183 0040EC 00EF 4A                      lsr  a 
6184 0040ED 00F0 AA                      tax                          Move offset to index. 
6185 0040EE 00F1               
6186 0040EE 00F1 BD 10 BF                lda  DevAddr,x               Get low byte of ProDOS driver address 
6187 0040F1 00F4 85 80                   sta  Ptr2 
6188 0040F3 00F6 E8                      inx 
6189 0040F4 00F7 BD 10 BF                lda  DevAddr,x               Get high byte of ProDOS driver address 
6190 0040F7 00FA 85 81                   sta  Ptr2+1 
6191 0040F9 00FC               
6192 0040F9 00FC 08                      php                          Save status 
6193 0040FA 00FD 78                      sei                          Interrupts off 
6194 0040FB 00FE               
6195 0040FB 00FE A9 00                   lda  #0 
6196 0040FD 0100 85 42                   sta  $42                     Status call 
6197 0040FF 0102               
6198 0040FF 0102 AD F7 08                lda  onlineUnit 
6199 004102 0105 85 43                   sta  $43                     Unit number 
6200 004104 0107               
6201 004104 0107 A9 00                   lda  #Buffer512 
6202 004106 0109 85 44                   sta  $44 
6203 004108 010B A9 09                   lda  #>Buffer512 
6204 00410A 010D 85 45                   sta  $45 
6205 00410C 010F               
6206 00410C 010F A9 00                   lda  #0 
6207 00410E 0111 85 46                   sta  $46 
6208 004110 0113 85 47                   sta  $47 
6209 004112 0115               
6210 004112 0115 AD 8B C0                lda  $C08B                   Read and write enable the language card 
6211 004115 0118 AD 8B C0                lda  $C08B                    with bank 1 on. 
6212 004118 011B               
6213 004118 011B 20 2B 01                jsr  CallDriver              Call ProDOS driver. 
6214 00411B 011E               
6215 00411B 011E 2C 82 C0                bit  $C082                   Put ROM back on-line 
6216 00411E 0121 B0 0B                   bcs  Error 
6217 004120 0123               
6218 004120 0123              OkError    anop 
6219 004120 0123               
6220 004120 0123 8E 61 00                stx  DevSize                 Save device size. 
6221 004123 0126 8C 62 00                sty  DevSize+1 
6222 004126 0129               
6223 004126 0129              NoMessage  anop 
6224 004126 0129               
6225 004126 0129 28                      plp                          Restore status 
6226 004127 012A               
6227 004127 012A 60                      rts 
6228 004128 012B               
6229 004128 012B              CallDriver anop 
6230 004128 012B               
6231 004128 012B 6C 80 00                jmp  (Ptr2) 
6232 00412B 012E               
6233 00412B 012E              Error      anop 
6234 00412B 012E               
6235 00412B 012E C9 2B                   cmp  #$2B                    Write protect error is ok. 
6236 00412D 0130 F0 F1                   beq  OKError 
6237 00412F 0132 C9 2F                   cmp  #$2F                    Disk offline error 
6238 004131 0134 F0 ED                   beq  OKError 
6239 004133 0136               
6240 004133 0136 9C 61 00                stz  DevSize                 Unknown size 
6241 004136 0139 9C 62 00                stz  DevSize+1 
6242 004139 013C               
6243 004139 013C C9 28                   cmp  #$28                    Device not connected error 
6244 00413B 013E F0 E9                   beq  NoMessage               (This error shouldn't happen here) 
6245 00413D 0140               
6246 00413D 0140 28                      plp                          Restore status 
6247 00413E 0141               
6248 00413E 0141 A8                      tay 
6249 00413F 0142 4A                      lsr  a 
6250 004140 0143 4A                      lsr  a 
6251 004141 0144 4A                      lsr  a 
6252 004142 0145 4A                      lsr  a 
6253 004143 0146 AA                      tax 
6254 004144 0147 BD 00 80                lda  AscIITable,x 
6255 004147 014A 8D 84 01                sta  E1Code 
6256 00414A 014D               
6257 00414A 014D 98                      tya 
6258 00414B 014E 29 0F                   and  #$0F 
6259 00414D 0150 AA                      tax 
6260 00414E 0151 BD 00 80                lda  AscIITable,x 
6261 004151 0154 8D 85 01                sta  E1Code+1 
6262 004154 0157               
6263 004154 0157 A9 63                   lda  #E1 
6264 004156 0159 85 82                   sta  MsgPtr 
6265 004158 015B A9 01                   lda  #>E1 
6266 00415A 015D 85 83                   sta  MsgPtr+1 
6267 00415C 015F 20 00 80                jsr  MsgOk 
6268 00415F 0162               
6269 00415F 0162 60                      rts 
6270 004160 0163               
6271 004160 0163                         Msb  On 
6272 004160 0163               
6273 004160 0163 D0 F2 EF C4  E1         dc   c'ProDOS driver status call',h'0D' 
6274 00417A 017D E5 F2 F2 EF             dc   c'error $' 
6275 004181 0184 B0 B0        E1Code     dc   c'00' 
6276 004183 0186 A0 E5 EE E3             dc   c' encountered.',h'00' 
6277 004191 0194               
6278 004191 0194                         Msb  Off 
6279 004191 0194               
6280 004191 0194              * Do a Smartport status call to retrieve device block size 
6281 004191 0194               
6282 004191 0194              Smartstatus anop 
6283 004191 0194               
6284 004191 0194 A9 FF                   lda  #$FF                    Setup Smartport dispatch address in Ptr2 
6285 004193 0196 85 80                   sta  Ptr2 
6286 004195 0198 B2 80                   lda  (Ptr2) 
6287 004197 019A 85 80                   sta  Ptr2 
6288 004199 019C               
6289 004199 019C 18                      clc 
6290 00419A 019D A5 80                   lda  Ptr2 
6291 00419C 019F 69 03                   adc  #3 
6292 00419E 01A1 85 80                   sta  Ptr2 
6293 0041A0 01A3               
6294 0041A0 01A3 AD F7 08                lda  onlineUnit              Is this drive 1 or 2? 
6295 0041A3 01A6 30 07                   bmi  SPD2 
6296 0041A5 01A8               
6297 0041A5 01A8              SPD1       anop 
6298 0041A5 01A8               
6299 0041A5 01A8 A9 01                   lda  #1 
6300 0041A7 01AA 8D FC 01                sta  SPUnitNo 
6301 0041AA 01AD 80 05                   bra  CallSP 
6302 0041AC 01AF               
6303 0041AC 01AF              SPD2       anop 
6304 0041AC 01AF               
6305 0041AC 01AF A9 02                   lda  #2 
6306 0041AE 01B1 8D FC 01                sta  SPUnitNo 
6307 0041B1 01B4               
6308 0041B1 01B4              CallSP     anop 
6309 0041B1 01B4               
6310 0041B1 01B4 20 F8 01                jsr  Dispatch 
6311 0041B4 01B7               
6312 0041B4 01B7 00           CmdNum     dc   h'00' 
6313 0041B5 01B8 FB 01        CmdList    dc   a'SPParms' 
6314 0041B7 01BA B0 5D                   bcs  SPError 
6315 0041B9 01BC AD 03 02                lda  DSB+3 
6316 0041BC 01BF F0 09                   beq  DSBSizeOk 
6317 0041BE 01C1               
6318 0041BE 01C1 A9 FF                   lda  #$FF 
6319 0041C0 01C3 8D 61 00                sta  DevSize 
6320 0041C3 01C6 8D 62 00                sta  DevSize+1 
6321 0041C6 01C9 60                      rts 
6322 0041C7 01CA               
6323 0041C7 01CA              DSBSizeOk  anop 
6324 0041C7 01CA               
6325 0041C7 01CA AD 01 02                lda  DSB+1                   Do we still have a zero byte device? 
6326 0041CA 01CD 0D 02 02                ora  DSB+2 
6327 0041CD 01D0 F0 0D                   beq  CheckType               Yes, check device type for Disk3.5 
6328 0041CF 01D2               
6329 0041CF 01D2 AD 01 02                lda  DSB+1                   Save size. 
6330 0041D2 01D5 8D 61 00                sta  DevSize 
6331 0041D5 01D8 AD 02 02                lda  DSB+2 
6332 0041D8 01DB 8D 62 00                sta  DevSize+1 
6333 0041DB 01DE               
6334 0041DB 01DE 60                      rts 
6335 0041DC 01DF               
6336 0041DC 01DF              CheckType  anop 
6337 0041DC 01DF               
6338 0041DC 01DF AD 15 02                lda  DSB+21                  If we have a 1 here then this is a 
6339 0041DF 01E2 C9 01                   cmp  #1                      Disk 3.5 (or Unidisk) so set default 
6340 0041E1 01E4 F0 07                   beq  Disk35                  value. 
6341 0041E3 01E6               
6342 0041E3 01E6 9C 61 00                stz  DevSize                 Not a Disk35 so I don't know what type 
6343 0041E6 01E9 9C 62 00                stz  DevSize+1               of device we have so set size to zero. 
6344 0041E9 01EC               
6345 0041E9 01EC 60                      rts 
6346 0041EA 01ED               
6347 0041EA 01ED              Disk35     anop 
6348 0041EA 01ED               
6349 0041EA 01ED A9 40                   lda  #$40                    Set Disk 3.5 default to 1600 ($0640) 
6350 0041EC 01EF 8D 61 00                sta  DevSize                  blocks. 
6351 0041EF 01F2 A9 06                   lda  #$06 
6352 0041F1 01F4 8D 62 00                sta  DevSize+1 
6353 0041F4 01F7               
6354 0041F4 01F7 60                      rts 
6355 0041F5 01F8               
6356 0041F5 01F8              Dispatch   anop 
6357 0041F5 01F8               
6358 0041F5 01F8 6C 80 00                jmp  (Ptr2) 
6359 0041F8 01FB               
6360 0041F8 01FB              SPParms    anop 
6361 0041F8 01FB 03           SPCount    dc   h'03' 
6362 0041F9 01FC 00           SPUnitNo   dc   h'00' 
6363 0041FA 01FD 00 02        SPListPtr  dc   a'DSB' 
6364 0041FC 01FF 03           SPCode     dc   h'03' 
6365 0041FD 0200               
6366 0041FD 0200 00 00 00 00  DSB        ds   25 
6367 004216 0219               
6368 004216 0219              SPError    anop 
6369 004216 0219               
6370 004216 0219 9C 61 00                stz  DevSize 
6371 004219 021C 9C 62 00                stz  DevSize+1 
6372 00421C 021F               
6373 00421C 021F A8                      tay 
6374 00421D 0220 4A                      lsr  a 
6375 00421E 0221 4A                      lsr  a 
6376 00421F 0222 4A                      lsr  a 
6377 004220 0223 4A                      lsr  a 
6378 004221 0224 AA                      tax 
6379 004222 0225 BD 00 80                lda  AscIITable,x 
6380 004225 0228 8D 5E 02                sta  E2Code 
6381 004228 022B               
6382 004228 022B 98                      tya 
6383 004229 022C 29 0F                   and  #$0F 
6384 00422B 022E AA                      tax 
6385 00422C 022F BD 00 80                lda  AscIITable,x 
6386 00422F 0232 8D 5F 02                sta  E2Code+1 
6387 004232 0235               
6388 004232 0235 A9 41                   lda  #E2 
6389 004234 0237 85 82                   sta  MsgPtr 
6390 004236 0239 A9 02                   lda  #>E2 
6391 004238 023B 85 83                   sta  MsgPtr+1 
6392 00423A 023D 20 00 80                jsr  MsgOk 
6393 00423D 0240               
6394 00423D 0240 60                      rts 
6395 00423E 0241               
6396 00423E 0241                         Msb  On 
6397 00423E 0241               
6398 00423E 0241 D3 ED E1 F2  E2         dc   c'Smartport status call error $' 
6399 00425B 025E B0 B0        E2Code     dc   c'00' 
6400 00425D 0260 A0 E5 EE E3             dc   c' encountered.',h'00' 
6401 00426B 026E               
6402 00426B 026E                         Msb  Off 
6403 00426B 026E               
6404 00426B 026E              * 
6405 00426B 026E              * Save valid device data to buffer. 
6406 00426B 026E              * 
6407 00426B 026E               
6408 00426B 026E              SaveDevInfo anop 
6409 00426B 026E               
6410 00426B 026E AE 60 00                ldx  Slot 
6411 00426E 0271 BD 00 80                lda  AscIITable,x 
6412 004271 0274 A0 00                   ldy  #oSlot 
6413 004273 0276 91 06                   sta  (Ptr1),y 
6414 004275 0278               
6415 004275 0278 A0 00                   ldy  #oDrive 
6416 004277 027A AD 00 0B                lda  onlineBuf 
6417 00427A 027D 30 04                   bmi  D2 
6418 00427C 027F               
6419 00427C 027F              D1         anop 
6420 00427C 027F               
6421 00427C 027F A9 B1                   lda  #'1'+$80 
6422 00427E 0281 80 02                   bra  SaveDrive 
6423 004280 0283               
6424 004280 0283              D2         anop 
6425 004280 0283               
6426 004280 0283 A9 B2                   lda  #'2'+$80 
6427 004282 0285               
6428 004282 0285              SaveDrive  anop 
6429 004282 0285               
6430 004282 0285 91 06                   sta  (Ptr1),y 
6431 004284 0287               
6432 004284 0287 A2 01                   ldx  #1 
6433 004286 0289 A0 00                   ldy  #oVolume 
6434 004288 028B               
6435 004288 028B AD 00 0B                lda  onlineBuf 
6436 00428B 028E 29 0F                   and  #$0F                    Keep volume name length 
6437 00428D 0290 8D B0 03                sta  NameLength 
6438 004290 0293 D0 03                   bne  NextChar 
6439 004292 0295 4C B3 03                jmp  DevMessage 
6440 004295 0298               
6441 004295 0298              NextChar   anop 
6442 004295 0298               
6443 004295 0298 BD 00 0B                lda  onlineBuf,x 
6444 004298 029B 09 80                   ora  #$80 
6445 00429A 029D 91 06                   sta  (Ptr1),y 
6446 00429C 029F C8                      iny 
6447 00429D 02A0 E8                      inx 
6448 00429E 02A1 EC B0 03                cpx  NameLength 
6449 0042A1 02A4 90 F2                   bcc  NextChar 
6450 0042A3 02A6 F0 F0                   beq  NextChar 
6451 0042A5 02A8               
6452 0042A5 02A8 E0 10                   cpx  #16 
6453 0042A7 02AA F0 0F                   beq  SaveUnitNo 
6454 0042A9 02AC               
6455 0042A9 02AC              PrtSpaces  anop 
6456 0042A9 02AC               
6457 0042A9 02AC 38                      sec 
6458 0042AA 02AD A9 0F                   lda  #15 
6459 0042AC 02AF ED B0 03                sbc  NameLength 
6460 0042AF 02B2 AA                      tax 
6461 0042B0 02B3 A9 A0                   lda  #' '+$80 
6462 0042B2 02B5               
6463 0042B2 02B5              AddSpace   anop 
6464 0042B2 02B5               
6465 0042B2 02B5 91 06                   sta  (Ptr1),y 
6466 0042B4 02B7 C8                      iny 
6467 0042B5 02B8 CA                      dex 
6468 0042B6 02B9 D0 FA                   bne  AddSpace 
6469 0042B8 02BB               
6470 0042B8 02BB              SaveUnitNo anop 
6471 0042B8 02BB               
6472 0042B8 02BB AD F7 08                lda  onlineUnit 
6473 0042BB 02BE A0 00                   ldy  #oUnitNo 
6474 0042BD 02C0 91 06                   sta  (Ptr1),y 
6475 0042BF 02C2               
6476 0042BF 02C2 AD 61 00                lda  DevSize 
6477 0042C2 02C5 A0 00                   ldy  #oSizeHex 
6478 0042C4 02C7 91 06                   sta  (Ptr1),y 
6479 0042C6 02C9               
6480 0042C6 02C9 AD 62 00                lda  DevSize+1 
6481 0042C9 02CC C8                      iny 
6482 0042CA 02CD 91 06                   sta  (Ptr1),y 
6483 0042CC 02CF               
6484 0042CC 02CF              SaveSize   anop 
6485 0042CC 02CF               
6486 0042CC 02CF AD 61 00                lda  DevSize 
6487 0042CF 02D2 0D 62 00                ora  DevSize+1 
6488 0042D2 02D5 D0 13                   bne  WeHaveASize 
6489 0042D4 02D7               
6490 0042D4 02D7 A9 BF                   lda  #'?'+$80 
6491 0042D6 02D9 A2 04                   ldx  #4 
6492 0042D8 02DB A0 00                   ldy  #oSize 
6493 0042DA 02DD               
6494 0042DA 02DD              SaveQuest  anop 
6495 0042DA 02DD               
6496 0042DA 02DD 91 06                   sta  (Ptr1),y 
6497 0042DC 02DF C8                      iny 
6498 0042DD 02E0 CA                      dex 
6499 0042DE 02E1 D0 FA                   bne  SaveQuest 
6500 0042E0 02E3               
6501 0042E0 02E3 A9 A0                   lda  #' '+$80 
6502 0042E2 02E5 A0 00                   ldy  #oUnit 
6503 0042E4 02E7 91 06                   sta  (Ptr1),y 
6504 0042E6 02E9 60                      rts 
6505 0042E7 02EA               
6506 0042E7 02EA              WeHaveASize anop 
6507 0042E7 02EA               
6508 0042E7 02EA 4E 62 00                lsr  DevSize+1               Divide DevSize by 2 to convert 
6509 0042EA 02ED 6E 61 00                ror  DevSize                 block into kilobytes. 
6510 0042ED 02F0 90 08                   bcc  NoRounding 
6511 0042EF 02F2               
6512 0042EF 02F2 EE 61 00                inc  DevSize 
6513 0042F2 02F5 D0 03                   bne  NoRounding 
6514 0042F4 02F7 EE 62 00                inc  DevSize+1 
6515 0042F7 02FA               
6516 0042F7 02FA              NoRounding anop 
6517 0042F7 02FA               
6518 0042F7 02FA AD 62 00                lda  DevSize+1 
6519 0042FA 02FD C9 04                   cmp  #$04                    See if size > 1024K ($0400) 
6520 0042FC 02FF 90 4B                   bcc  Kilobytes 
6521 0042FE 0301               
6522 0042FE 0301              MegaBytes  anop 
6523 0042FE 0301               
6524 0042FE 0301 A2 04                   ldx  #4                      First divide DevSize by 16 
6525 004300 0303               
6526 004300 0303              Loop1      anop 
6527 004300 0303               
6528 004300 0303 4E 62 00                lsr  DevSize+1 
6529 004303 0306 6E 61 00                ror  DevSize 
6530 004306 0309 CA                      dex 
6531 004307 030A D0 F7                   bne  Loop1 
6532 004309 030C               
6533 004309 030C AD 62 00                lda  DevSize+1 
6534 00430C 030F 8D B2 03                sta  Multiplier+1 
6535 00430F 0312 AD 61 00                lda  DevSize 
6536 004312 0315 8D B1 03                sta  Multiplier 
6537 004315 0318               
6538 004315 0318 0E 61 00                asl  DevSize                 Multiply by 5 doing a multiply by 4 and 
6539 004318 031B 2E 62 00                rol  DevSize+1                adding the original value another time. 
6540 00431B 031E 0E 61 00                asl  DevSize 
6541 00431E 0321 2E 62 00                rol  DevSize+1 
6542 004321 0324               
6543 004321 0324 18                      clc 
6544 004322 0325 AD 61 00                lda  DevSize 
6545 004325 0328 6D B1 03                adc  Multiplier 
6546 004328 032B 8D 61 00                sta  DevSize 
6547 00432B 032E AD 62 00                lda  DevSize+1 
6548 00432E 0331 6D B2 03                adc  Multiplier+1 
6549 004331 0334 8D 62 00                sta  DevSize+1 
6550 004334 0337               
6551 004334 0337 A2 05                   ldx  #5                      Divide by 32 for final result 
6552 004336 0339               
6553 004336 0339              Loop2      anop 
6554 004336 0339               
6555 004336 0339 4E 62 00                lsr  DevSize+1 
6556 004339 033C 6E 61 00                ror  DevSize 
6557 00433C 033F CA                      dex 
6558 00433D 0340 D0 F7                   bne  Loop2 
6559 00433F 0342               
6560 00433F 0342 A9 CD                   lda  #'M'+$80 
6561 004341 0344 A0 00                   ldy  #oUnit 
6562 004343 0346 91 06                   sta  (Ptr1),y 
6563 004345 0348 A2 03                   ldx  #3 
6564 004347 034A 80 08                   bra  ConvAscii 
6565 004349 034C               
6566 004349 034C              Kilobytes  anop 
6567 004349 034C               
6568 004349 034C A9 CB                   lda  #'K'+$80 
6569 00434B 034E A0 00                   ldy  #oUnit 
6570 00434D 0350 91 06                   sta  (Ptr1),y 
6571 00434F 0352 A2 04                   ldx  #4 
6572 004351 0354               
6573 004351 0354              ConvAscii  anop 
6574 004351 0354               
6575 004351 0354 8A                      txa 
6576 004352 0355 A8                      tay 
6577 004353 0356 AD 62 00                lda  DevSize+1 
6578 004356 0359 85 85                   sta  ACC+1 
6579 004358 035B AD 61 00                lda  DevSize 
6580 00435B 035E 85 84                   sta  ACC 
6581 00435D 0360               
6582 00435D 0360 64 87                   stz  AUX+1 
6583 00435F 0362 A9 0A                   lda  #10 
6584 004361 0364 85 86                   sta  AUX 
6585 004363 0366               
6586 004363 0366              Loop3      anop 
6587 004363 0366               
6588 004363 0366 A5 84                   lda  ACC 
6589 004365 0368 05 85                   ora  ACC+1 
6590 004367 036A D0 04                   bne  NotZero 
6591 004369 036C               
6592 004369 036C A9 A0                   lda  #' '+$80 
6593 00436B 036E 80 07                   bra  SaveValue 
6594 00436D 0370               
6595 00436D 0370              NotZero    anop 
6596 00436D 0370               
6597 00436D 0370 DA                      phx 
6598 00436E 0371 20 00 80                jsr  Divide 
6599 004371 0374 FA                      plx 
6600 004372 0375 A5 88                   lda  EXT 
6601 004374 0377               
6602 004374 0377              SaveValue  anop 
6603 004374 0377               
6604 004374 0377 48                      pha 
6605 004375 0378 CA                      dex 
6606 004376 0379 D0 EB                   bne  Loop3 
6607 004378 037B               
6608 004378 037B 98                      tya 
6609 004379 037C AA                      tax 
6610 00437A 037D A0 00                   ldy  #oSize 
6611 00437C 037F               
6612 00437C 037F              Loop4      anop 
6613 00437C 037F               
6614 00437C 037F 68                      pla 
6615 00437D 0380 C9 A0                   cmp  #' '+$80 
6616 00437F 0382 F0 06                   beq  LeadZero 
6617 004381 0384 5A                      phy 
6618 004382 0385 A8                      tay 
6619 004383 0386 B9 00 80                lda  AsciiTable,y 
6620 004386 0389 7A                      ply 
6621 004387 038A               
6622 004387 038A              LeadZero   anop 
6623 004387 038A               
6624 004387 038A 91 06                   sta  (Ptr1),y 
6625 004389 038C C8                      iny 
6626 00438A 038D CA                      dex 
6627 00438B 038E D0 EF                   bne  Loop4 
6628 00438D 0390               
6629 00438D 0390 C0 03                   cpy  #oSize+3 
6630 00438F 0392 D0 07                   bne  NoDecimal 
6631 004391 0394               
6632 004391 0394              Decimal    anop 
6633 004391 0394               
6634 004391 0394 91 06                   sta  (Ptr1),y 
6635 004393 0396 88                      dey 
6636 004394 0397 A9 AE                   lda  #'.'+$80 
6637 004396 0399 91 06                   sta  (Ptr1),y 
6638 004398 039B               
6639 004398 039B              NoDecimal  anop 
6640 004398 039B               
6641 004398 039B A0 00                   ldy  #oDevType               Save device type data 
6642 00439A 039D AD 63 00                lda  DevType 
6643 00439D 03A0               
6644 00439D 03A0 91 06                   sta  (Ptr1),y 
6645 00439F 03A2               
6646 00439F 03A2 18                      clc                          Setup buffer address for next record. 
6647 0043A0 03A3 A5 06                   lda  Ptr1 
6648 0043A2 03A5 69 00                   adc  #oEntryLen 
6649 0043A4 03A7 85 06                   sta  Ptr1 
6650 0043A6 03A9 A5 07                   lda  Ptr1+1 
6651 0043A8 03AB 69 00                   adc  #0 
6652 0043AA 03AD 85 07                   sta  Ptr1+1 
6653 0043AC 03AF               
6654 0043AC 03AF 60                      rts 
6655 0043AD 03B0               
6656 0043AD 03B0 00           NameLength ds   1 
6657 0043AE 03B1 00 00        Multiplier ds   2 
6658 0043B0 03B3               
6659 0043B0 03B3              * 
6660 0043B0 03B3              * Device messages when a volume not mounted 
6661 0043B0 03B3              * 
6662 0043B0 03B3               
6663 0043B0 03B3              DevMessage anop 
6664 0043B0 03B3               
6665 0043B0 03B3 AD 01 0B                lda  onlineBuf+1 
6666 0043B3 03B6 C9 27                   cmp  #$27                    IO Error on a Disk ][ 
6667 0043B5 03B8 F0 0B                   beq  NoDisk 
6668 0043B7 03BA C9 2F                   cmp  #$2F                    Device Off-line 
6669 0043B9 03BC F0 07                   beq  NoDisk 
6670 0043BB 03BE C9 52                   cmp  #$52                    Non-ProDOS 
6671 0043BD 03C0 F0 18                   beq  NonProDOS 
6672 0043BF 03C2 4C AC 02                jmp  PrtSpaces               Mystery error? 
6673 0043C2 03C5               
6674 0043C2 03C5              NoDisk     anop 
6675 0043C2 03C5               
6676 0043C2 03C5 A2 00                   ldx  #0 
6677 0043C4 03C7               
6678 0043C4 03C7              NoDisk01   anop 
6679 0043C4 03C7               
6680 0043C4 03C7 BD EF 03                lda  DevMes1,x 
6681 0043C7 03CA 91 06                   sta  (Ptr1),y 
6682 0043C9 03CC C8                      iny 
6683 0043CA 03CD E8                      inx 
6684 0043CB 03CE E0 09                   cpx  #DevMes1E-DevMes1 
6685 0043CD 03D0 90 F5                   bcc  NoDisk01 
6686 0043CF 03D2               
6687 0043CF 03D2 A9 09                   lda  #DevMes1E-DevMes1 
6688 0043D1 03D4 8D B0 03                sta  NameLength 
6689 0043D4 03D7 4C AC 02                jmp  PrtSpaces 
6690 0043D7 03DA               
6691 0043D7 03DA              NonProDOS  anop 
6692 0043D7 03DA               
6693 0043D7 03DA A2 00                   ldx  #0 
6694 0043D9 03DC               
6695 0043D9 03DC              NonProDOS1 anop 
6696 0043D9 03DC               
6697 0043D9 03DC BD F8 03                lda  DevMes2,x 
6698 0043DC 03DF 91 06                   sta  (Ptr1),y 
6699 0043DE 03E1 C8                      iny 
6700 0043DF 03E2 E8                      inx 
6701 0043E0 03E3 E0 0C                   cpx  #DevMes2E-DevMes2 
6702 0043E2 03E5 90 F5                   bcc  NonProDOS1 
6703 0043E4 03E7               
6704 0043E4 03E7 A9 0C                   lda  #DevMes2E-DevMes2 
6705 0043E6 03E9 8D B0 03                sta  NameLength 
6706 0043E9 03EC 4C AC 02                jmp  PrtSpaces 
6707 0043EC 03EF               
6708 0043EC 03EF                         Msb  On 
6709 0043EC 03EF               
6710 0043EC 03EF BC CE EF A0  DevMes1    dc   c'<No Disk>' 
6711 0043F5 03F8              DevMes1E   anop 
6712 0043F5 03F8 BC CE EF EE  DevMes2    dc   c'<Non ProDOS>' 
6713 004401 0404              DevMes2E   anop 
6714 004401 0404               
6715 004401 0404                         Msb  Off 
6716 004401 0404               
6717 004401 0404                         End 
 
 
 
Local  Symbols
 
ADDSPACE   0002B5  BLOCKDEV   0000A9  CALLDRIVER 00012B  CALLSP     0001B4   
CHECKTYPE  0001DF  CMDLIST    0001B8  CMDNUM     0001B7  CONVASCII  000354   
D1         00027F  D2         000283  DECIMAL    000394  DEVADDR    00BF10   
DEVMES1    0003EF  DEVMES1E   0003F8  DEVMES2    0003F8  DEVMES2E   000404   
DEVMESSAGE 0003B3  DEVSIZE    000061  DEVTYPE    000063  DISK35     0001ED   
DISPATCH   0001F8  DSB        000200  DSBSIZEOK  0001CA  E1         000163   
E1CODE     000184  E2         000241  E2CODE     00025E  ERROR      00012E   
GETDEVSIZE 00007D  GOODSIZE   0000E9  IN01       00006B  IN90       000079   
IN95       00007B  ISNETWORK  000064  KILOBYTES  00034C  LEADZERO   00038A   
LOOP1      000303  LOOP2      000339  LOOP3      000366  LOOP4      00037F   
MEGABYTES  000301  MULTIPLIER 0003B1  NAMELENGTH 0003B0  NEXTCHAR   000298   
NEXTDRIVE  000019  NEXTSLOT   000057  NODECIMAL  00039B  NODISK     0003C5   
NODISK01   0003C7  NOMESSAGE  000129  NONPRODOS  0003DA  NONPRODOS1 0003DC   
NOROUNDING 0002FA  NOTDISKII  0000C1  NOTZERO    000370  OK1        000091   
OK2        00009C  OKERROR    000123  PROSTATUS  0000EA  PRTSPACES  0002AC   
SAVEDEVINF 00026E  SAVEDRIVE  000285  SAVEQUEST  0002DD  SAVESIZE   0002CF   
SAVEUNITNO 0002BB  SAVEVALUE  000377  SETUNITNO  000010  SIZEOK     000048   
SKIP       00004E  SLOT       000060  SMARTPORT  0000D1  SMARTSTATU 000194   
SPCODE     0001FF  SPCOUNT    0001FB  SPD1       0001A8  SPD2       0001AF   
SPERROR    000219  SPLISTPTR  0001FD  SPPARMS    0001FB  SPUNITNO   0001FC   
WEHAVEASIZ 0002EA   
6718 004401 0000                         Copy ImageTypeBox.s 
6719 004401 0000              PrtImgType Start 
6720 004401 0000                         Using Menu2Vars 
6721 004401 0000               
6722 004401 0000 A9 12                   lda  #19-1                   Image type display starts at 
6723 004403 0002 85 24                   sta  HTab                    HTab 19. 
6724 004405 0004               
6725 004405 0004 AD 00 80                lda  ImageType               Setup index for text address retrieval 
6726 004408 0007 0A                      asl  a 
6727 004409 0008 AA                      tax 
6728 00440A 0009 BD 39 00                lda  TypeIndex,x             Get address of image type text 
6729 00440D 000C 85 06                   sta  Ptr1 
6730 00440F 000E E8                      inx 
6731 004410 000F BD 39 00                lda  TypeIndex,x 
6732 004413 0012 85 07                   sta  Ptr1+1 
6733 004415 0014               
6734 004415 0014 A0 00                   ldy  #0 
6735 004417 0016               
6736 004417 0016              IT01       anop 
6737 004417 0016               
6738 004417 0016 B1 06                   lda  (Ptr1),y 
6739 004419 0018 F0 06                   beq  IT02 
6740 00441B 001A 20 00 80                jsr  cout 
6741 00441E 001D C8                      iny 
6742 00441F 001E 80 F6                   bra  IT01 
6743 004421 0020               
6744 004421 0020              IT02       anop 
6745 004421 0020               
6746 004421 0020 C0 14                   cpy  #20 
6747 004423 0022 F0 12                   beq  IT04 
6748 004425 0024               
6749 004425 0024 8C 37 00                sty  NextChar 
6750 004428 0027               
6751 004428 0027 38                      sec 
6752 004429 0028 A9 14                   lda  #20 
6753 00442B 002A ED 37 00                sbc  NextChar 
6754 00442E 002D AA                      tax 
6755 00442F 002E A9 A0                   lda  #' '+$80 
6756 004431 0030               
6757 004431 0030              IT03       anop 
6758 004431 0030               
6759 004431 0030 20 00 80                jsr  cout 
6760 004434 0033 CA                      dex 
6761 004435 0034 D0 FA                   bne  IT03 
6762 004437 0036               
6763 004437 0036              IT04       anop 
6764 004437 0036               
6765 004437 0036 60                      rts 
6766 004438 0037               
6767 004438 0037 00           NextChar   ds   1 
6768 004439 0038 00           InitImgType ds  1 
6769 00443A 0039               
6770 00443A 0039 43 00 58 00  TypeIndex  dc   i'Type0',i'Type1',i'Type2',i'Type3',i'Type4' 
6771 004444 0043              TypeMax    equ  $04 
6772 004444 0043               
6773 004444 0043                         Msb  On 
6774 004444 0043 D5 EE E9 F6  Type0      dc   c'Universal Disk (2MG)',h'00' 
6775 004459 0058 C4 E9 F3 EB  Type1      dc   c'DiskCopy 4.2',h'00' 
6776 004466 0065 C4 E9 F3 EB  Type2      dc   c'DiskCopy 6',h'00' 
6777 004471 0070 D0 F2 EF C4  Type3      dc   c'ProDOS Order (PO)',h'00' 
6778 004483 0082 C4 CF D3 A0  Type4      dc   c'DOS Order (DSK/DO)',h'00' 
6779 004496 0095                         Msb  Off 
6780 004496 0095               
6781 004496 0095              * 
6782 004496 0095              * SelImgType : User selection of image type 
6783 004496 0095              * 
6784 004496 0095               
6785 004496 0095              SelImgType Entry 
6786 004496 0095               
6787 004496 0095 AD 00 80                lda  ImageType 
6788 004499 0098 8D 38 00                sta  InitImgType 
6789 00449C 009B               
6790 00449C 009B 20 AD 01                jsr  SaveScreen 
6791 00449F 009E               
6792 00449F 009E              Loop1      anop 
6793 00449F 009E               
6794 00449F 009E 20 C6 00                jsr  ShowBox 
6795 0044A2 00A1 20 24 02                jsr  BoxUI 
6796 0044A5 00A4               
6797 0044A5 00A4 AD 8B 02                lda  BoxRC 
6798 0044A8 00A7 D0 F5                   bne  Loop1 
6799 0044AA 00A9               
6800 0044AA 00A9 20 B4 01                jsr  RestScreen 
6801 0044AD 00AC               
6802 0044AD 00AC 20 00 80                jsr  PlotMouse               Refresh mouse data 
6803 0044B0 00AF               
6804 0044B0 00AF A9 10                   lda  #17-1 
6805 0044B2 00B1 85 25                   sta  VTab 
6806 0044B4 00B3 20 00 80                jsr  SetVTab 
6807 0044B7 00B6               
6808 0044B7 00B6 A9 0F                   lda  #Inverse 
6809 0044B9 00B8 20 00 80                jsr  cout 
6810 0044BC 00BB               
6811 0044BC 00BB 20 00 80                jsr  PrtImgType 
6812 0044BF 00BE               
6813 0044BF 00BE A9 0E                   lda  #Normal 
6814 0044C1 00C0 20 00 80                jsr  cout 
6815 0044C4 00C3               
6816 0044C4 00C3 60                      rts 
6817 0044C5 00C4               
6818 0044C5 00C4              * Open image type box 
6819 0044C5 00C4               
6820 0044C5 00C4 00           FirstLine  ds   1 
6821 0044C6 00C5 00           LastLine   ds   1 
6822 0044C7 00C6               
6823 0044C7 00C6              ShowBox    anop 
6824 0044C7 00C6               
6825 0044C7 00C6 A9 1B                   lda  #MouseText              Set mousetext on 
6826 0044C9 00C8 20 00 80                jsr  cout 
6827 0044CC 00CB               
6828 0044CC 00CB A9 10                   lda  #17-1                   HTab 17 
6829 0044CE 00CD 85 24                   sta  HTab 
6830 0044D0 00CF 38                      sec 
6831 0044D1 00D0 A9 0F                   lda  #16-1                   VTab 16 base. 
6832 0044D3 00D2 ED 38 00                sbc  InitImgType 
6833 0044D6 00D5 8D C4 00                sta  FirstLine 
6834 0044D9 00D8 EE C4 00                inc  FirstLine               Save VTab of first line 
6835 0044DC 00DB 85 25                   sta  VTab 
6836 0044DE 00DD 20 00 80                jsr  SetVTab 
6837 0044E1 00E0               
6838 0044E1 00E0 18                      clc 
6839 0044E2 00E1 AD C4 00                lda  FirstLine 
6840 0044E5 00E4 69 05                   adc  #TypeMax+1 
6841 0044E7 00E6 8D C5 00                sta  LastLine                Save VTab of last line 
6842 0044EA 00E9               
6843 0044EA 00E9              SB01       anop 
6844 0044EA 00E9               
6845 0044EA 00E9 A9 5A                   lda  #'Z' 
6846 0044EC 00EB 20 00 80                jsr  cout 
6847 0044EF 00EE               
6848 0044EF 00EE              SB02       anop 
6849 0044EF 00EE               
6850 0044EF 00EE A9 4C                   lda  #'L' 
6851 0044F1 00F0               
6852 0044F1 00F0              SB03       anop 
6853 0044F1 00F0               
6854 0044F1 00F0 A2 16                   ldx  #22 
6855 0044F3 00F2               
6856 0044F3 00F2              SB04       anop 
6857 0044F3 00F2               
6858 0044F3 00F2 20 00 80                jsr  cout 
6859 0044F6 00F5 CA                      dex 
6860 0044F7 00F6 D0 FA                   bne  SB04 
6861 0044F9 00F8               
6862 0044F9 00F8 A9 5F                   lda  #'_' 
6863 0044FB 00FA 20 00 80                jsr  cout 
6864 0044FE 00FD               
6865 0044FE 00FD 9C 77 01                stz  LineCount 
6866 004501 0100               
6867 004501 0100              SB05       anop 
6868 004501 0100               
6869 004501 0100 A9 10                   lda  #17-1 
6870 004503 0102 85 24                   sta  HTab 
6871 004505 0104 E6 25                   inc  VTab 
6872 004507 0106 20 00 80                jsr  SetVTab 
6873 00450A 0109               
6874 00450A 0109 A9 5A                   lda  #'Z' 
6875 00450C 010B 20 00 80                jsr  cout 
6876 00450F 010E               
6877 00450F 010E A9 A0                   lda  #' '+$80 
6878 004511 0110 20 00 80                jsr  cout 
6879 004514 0113               
6880 004514 0113 A9 18                   lda  #StdText 
6881 004516 0115 20 00 80                jsr  cout 
6882 004519 0118               
6883 004519 0118 AD 77 01                lda  LineCount 
6884 00451C 011B CD 00 80                cmp  ImageType 
6885 00451F 011E D0 05                   bne  SB06 
6886 004521 0120               
6887 004521 0120 A9 0F                   lda  #Inverse 
6888 004523 0122 20 00 80                jsr  cout 
6889 004526 0125               
6890 004526 0125              SB06       anop 
6891 004526 0125               
6892 004526 0125 AD 00 80                lda  ImageType 
6893 004529 0128 48                      pha 
6894 00452A 0129 AD 77 01                lda  LineCount 
6895 00452D 012C 8D 00 80                sta  ImageType 
6896 004530 012F               
6897 004530 012F 20 00 80                jsr  PrtImgType 
6898 004533 0132               
6899 004533 0132 68                      pla 
6900 004534 0133 8D 00 80                sta  ImageType 
6901 004537 0136               
6902 004537 0136 A9 0E                   lda  #Normal 
6903 004539 0138 20 00 80                jsr  cout 
6904 00453C 013B               
6905 00453C 013B A9 1B                   lda  #MouseText 
6906 00453E 013D 20 00 80                jsr  cout 
6907 004541 0140               
6908 004541 0140 A9 A0                   lda  #' '+$80 
6909 004543 0142 20 00 80                jsr  cout 
6910 004546 0145               
6911 004546 0145 A9 5F                   lda  #'_' 
6912 004548 0147 20 00 80                jsr  cout 
6913 00454B 014A               
6914 00454B 014A EE 77 01                inc  LineCount 
6915 00454E 014D AD 77 01                lda  LineCount 
6916 004551 0150 C9 05                   cmp  #TypeMax+1 
6917 004553 0152 D0 AC                   bne  SB05 
6918 004555 0154               
6919 004555 0154 A9 10                   lda  #17-1 
6920 004557 0156 85 24                   sta  HTab 
6921 004559 0158 E6 25                   inc  VTab 
6922 00455B 015A 20 00 80                jsr  SetVTab 
6923 00455E 015D               
6924 00455E 015D              SB07       anop 
6925 00455E 015D               
6926 00455E 015D A9 5A                   lda  #'Z' 
6927 004560 015F 20 00 80                jsr  cout 
6928 004563 0162               
6929 004563 0162              SB08       anop 
6930 004563 0162               
6931 004563 0162 A9 DF                   lda  #'_'+$80 
6932 004565 0164               
6933 004565 0164              SB09       anop 
6934 004565 0164               
6935 004565 0164 A2 16                   ldx  #22 
6936 004567 0166               
6937 004567 0166              SB10       anop 
6938 004567 0166               
6939 004567 0166 20 00 80                jsr  cout 
6940 00456A 0169 CA                      dex 
6941 00456B 016A D0 FA                   bne  SB10 
6942 00456D 016C               
6943 00456D 016C A9 5F                   lda  #'_' 
6944 00456F 016E 20 00 80                jsr  cout 
6945 004572 0171               
6946 004572 0171 A9 18                   lda  #StdText 
6947 004574 0173 20 00 80                jsr  cout 
6948 004577 0176               
6949 004577 0176 60                      rts 
6950 004578 0177               
6951 004578 0177 00           LineCount  ds   1 
6952 004579 0178               
6953 004579 0178              TextLine   anop                         Text screen line starting addresses 
6954 004579 0178               
6955 004579 0178 00 04        TextLine00 dc   i'$0400' 
6956 00457B 017A 80 04        TextLine01 dc   i'$0480' 
6957 00457D 017C 00 05        TextLine02 dc   i'$0500' 
6958 00457F 017E 80 05        TextLine03 dc   i'$0580' 
6959 004581 0180 00 06        TextLine04 dc   i'$0600' 
6960 004583 0182 80 06        TextLine05 dc   i'$0680' 
6961 004585 0184 00 07        TextLine06 dc   i'$0700' 
6962 004587 0186 80 07        TextLine07 dc   i'$0780' 
6963 004589 0188 28 04        TextLine08 dc   i'$0428' 
6964 00458B 018A A8 04        TextLine09 dc   i'$04A8' 
6965 00458D 018C 28 05        TextLine10 dc   i'$0528' 
6966 00458F 018E A8 05        TextLine11 dc   i'$05A8' 
6967 004591 0190 28 06        TextLine12 dc   i'$0628' 
6968 004593 0192 A8 06        TextLine13 dc   i'$06A8' 
6969 004595 0194 28 07        TextLine14 dc   i'$0728' 
6970 004597 0196 A8 07        TextLine15 dc   i'$07A8' 
6971 004599 0198 50 04        TextLine16 dc   i'$0450' 
6972 00459B 019A D0 04        TextLine17 dc   i'$04D0' 
6973 00459D 019C 50 05        TextLine18 dc   i'$0550' 
6974 00459F 019E D0 05        TextLine19 dc   i'$05D0' 
6975 0045A1 01A0 50 06        TextLine20 dc   i'$0650' 
6976 0045A3 01A2 D0 06        TextLine21 dc   i'$06D0' 
6977 0045A5 01A4 50 07        TextLine22 dc   i'$0750' 
6978 0045A7 01A6 D0 07        TextLine23 dc   i'$07D0' 
6979 0045A9 01A8               
6980 0045A9 01A8              On80Store  equ  $C001 
6981 0045A9 01A8              Page1      equ  $C054 
6982 0045A9 01A8              Page2      equ  $C055 
6983 0045A9 01A8               
6984 0045A9 01A8 00           SaveRtn    ds   1 
6985 0045AA 01A9               
6986 0045AA 01A9 00           StartHTab  ds   1 
6987 0045AB 01AA 00           EndHTab    ds   1 
6988 0045AC 01AB 00           StartVTab  ds   1 
6989 0045AD 01AC 00           CurrLine   ds   1 
6990 0045AE 01AD               
6991 0045AE 01AD              * 
6992 0045AE 01AD              * SaveScreen - save screen data under list box 
6993 0045AE 01AD              * RestScreen - restore screen data under messagebox 
6994 0045AE 01AD              * 
6995 0045AE 01AD              * Ptr1 = screen data : Ptr2 = save buffer 
6996 0045AE 01AD              * 
6997 0045AE 01AD               
6998 0045AE 01AD              SaveScreen anop 
6999 0045AE 01AD               
7000 0045AE 01AD A9 01                   lda  #1 
7001 0045B0 01AF 8D A8 01                sta  SaveRtn 
7002 0045B3 01B2 80 03                   bra  StartRtn 
7003 0045B5 01B4               
7004 0045B5 01B4              RestScreen anop 
7005 0045B5 01B4               
7006 0045B5 01B4 9C A8 01                stz  SaveRtn 
7007 0045B8 01B7               
7008 0045B8 01B7              StartRtn   anop 
7009 0045B8 01B7               
7010 0045B8 01B7 8D 01 C0                sta  On80Store               Make sure 80STORE is on. 
7011 0045BB 01BA               
7012 0045BB 01BA 18                      clc 
7013 0045BC 01BB A9 10                   lda  #17-1                   HTab 17 start 
7014 0045BE 01BD 8D A9 01                sta  StartHTab 
7015 0045C1 01C0 69 18                   adc  #24                     24 char wide 
7016 0045C3 01C2 8D AA 01                sta  EndHTab                 Ending HTab 
7017 0045C6 01C5               
7018 0045C6 01C5 38                      sec 
7019 0045C7 01C6 A9 0F                   lda  #16-1                   Base VTab 
7020 0045C9 01C8 ED 38 00                sbc  InitImgType 
7021 0045CC 01CB 8D AB 01                sta  StartVTab 
7022 0045CF 01CE 8D AC 01                sta  CurrLine 
7023 0045D2 01D1               
7024 0045D2 01D1 A9 00                   lda  #MessageBuf             Set save buffer address 
7025 0045D4 01D3 85 80                   sta  Ptr2 
7026 0045D6 01D5 A9 12                   lda  #>MessageBuf 
7027 0045D8 01D7 85 81                   sta  Ptr2+1 
7028 0045DA 01D9               
7029 0045DA 01D9 A2 07                   ldx  #TypeMax+3              Max # of line + 2 for borders + 1 for 
7030 0045DC 01DB              *                                        being zero base. 
7031 0045DC 01DB              SSLoop1    anop 
7032 0045DC 01DB               
7033 0045DC 01DB AD AC 01                lda  CurrLine 
7034 0045DF 01DE 0A                      asl  a 
7035 0045E0 01DF A8                      tay 
7036 0045E1 01E0 B9 78 01                lda  TextLine,y 
7037 0045E4 01E3 85 06                   sta  Ptr1 
7038 0045E6 01E5 C8                      iny 
7039 0045E7 01E6 B9 78 01                lda  TextLine,y 
7040 0045EA 01E9 85 07                   sta  Ptr1+1 
7041 0045EC 01EB               
7042 0045EC 01EB AC A9 01                ldy  StartHTab 
7043 0045EF 01EE               
7044 0045EF 01EE              SSLoop2    anop 
7045 0045EF 01EE               
7046 0045EF 01EE 5A                      phy 
7047 0045F0 01EF 98                      tya 
7048 0045F1 01F0 4A                      lsr  a 
7049 0045F2 01F1 B0 05                   bcs  FromMain 
7050 0045F4 01F3               
7051 0045F4 01F3              FromAux    anop 
7052 0045F4 01F3               
7053 0045F4 01F3 8D 55 C0                sta  Page2 
7054 0045F7 01F6 80 03                   bra  GetChar 
7055 0045F9 01F8               
7056 0045F9 01F8              FromMain   anop 
7057 0045F9 01F8               
7058 0045F9 01F8 8D 54 C0                sta  Page1 
7059 0045FC 01FB               
7060 0045FC 01FB              GetChar    anop 
7061 0045FC 01FB               
7062 0045FC 01FB A8                      tay 
7063 0045FD 01FC AD A8 01                lda  SaveRtn 
7064 004600 01FF F0 06                   beq  Restore 
7065 004602 0201               
7066 004602 0201 B1 06                   lda  (Ptr1),y 
7067 004604 0203 92 80                   sta  (Ptr2) 
7068 004606 0205 80 04                   bra  Continue 
7069 004608 0207               
7070 004608 0207              Restore    anop 
7071 004608 0207               
7072 004608 0207 B2 80                   lda  (Ptr2) 
7073 00460A 0209 91 06                   sta  (Ptr1),y 
7074 00460C 020B               
7075 00460C 020B              Continue   anop 
7076 00460C 020B               
7077 00460C 020B 7A                      ply 
7078 00460D 020C               
7079 00460D 020C E6 80                   inc  Ptr2                    Increment save buffer pointer 
7080 00460F 020E D0 02                   bne  NoOF 
7081 004611 0210               
7082 004611 0210 E6 81                   inc  Ptr2+1 
7083 004613 0212               
7084 004613 0212              NoOF       anop                         No overflow 
7085 004613 0212               
7086 004613 0212 C8                      iny 
7087 004614 0213 CC AA 01                cpy  EndHTab                 If y <= EndHTab, SSLoop2 to continue 
7088 004617 0216 90 D6                   bcc  SSLoop2                  saving this line 
7089 004619 0218 F0 D4                   beq  SSLoop2 
7090 00461B 021A               
7091 00461B 021A EE AC 01                inc  CurrLine                Move to next line 
7092 00461E 021D CA                      dex                          Another line? 
7093 00461F 021E D0 BB                   bne  SSLoop1 
7094 004621 0220               
7095 004621 0220 AD 54 C0                lda  Page1                   Set back to Main for exit. 
7096 004624 0223               
7097 004624 0223 60                      rts 
7098 004625 0224               
7099 004625 0224              * 
7100 004625 0224              * BoxUI - User interface 
7101 004625 0224              * 
7102 004625 0224               
7103 004625 0224              BoxUI      anop 
7104 004625 0224               
7105 004625 0224 9C 10 C0                stz  ClearKbd 
7106 004628 0227 9C 8B 02                stz  BoxRC 
7107 00462B 022A               
7108 00462B 022A              PollDev    anop 
7109 00462B 022A               
7110 00462B 022A 20 00 80                jsr  PlotMouse 
7111 00462E 022D               
7112 00462E 022D              PollDevLoop anop 
7113 00462E 022D               
7114 00462E 022D AD 00 C0                lda  Keyboard                Get keypress 
7115 004631 0230 10 03                   bpl  PollMouse               No, keypress - check mouse 
7116 004633 0232 4C 8C 02                jmp  KeyDev                  Keypress rtn. 
7117 004636 0235               
7118 004636 0235              PollMouse  anop 
7119 004636 0235               
7120 004636 0235 20 00 80                jsr  ReadMouse               Read mouse 
7121 004639 0238 4E 84 08                lsr  MouseX                  Divide by 2 X and Y to bring into the 
7122 00463C 023B 4E 86 08                lsr  MouseY                  0 to 79 and 0 to 23 range 
7123 00463F 023E AD 8C 08                lda  MouseStat               Get mouse status 
7124 004642 0241 89 20                   bit  #MouseMove              Test for mouse movement 
7125 004644 0243 D0 0A                   bne  MouseDev1               Moused moved 
7126 004646 0245 89 80                   bit  #CurrButton             Test for button press 
7127 004648 0247 D0 0C                   bne  MouseDev2               Button pressed 
7128 00464A 0249 89 40                   bit  #PrevButton             Test for button release 
7129 00464C 024B D0 26                   bne  MouseDev3               Button released 
7130 00464E 024D               
7131 00464E 024D 80 DE                   bra  PollDevLoop 
7132 004650 024F               
7133 004650 024F              * 
7134 004650 024F              * Mouse movement 
7135 004650 024F              * 
7136 004650 024F               
7137 004650 024F              MouseDev1  anop 
7138 004650 024F               
7139 004650 024F 20 00 80                jsr  MoveMouse 
7140 004653 0252 4C 2D 02                jmp  PollDevLoop 
7141 004656 0255               
7142 004656 0255              * 
7143 004656 0255              * Mouse button pressed 
7144 004656 0255              * 
7145 004656 0255               
7146 004656 0255              MouseDev2  anop 
7147 004656 0255               
7148 004656 0255 AD 86 08                lda  MouseY 
7149 004659 0258 CD C4 00                cmp  FirstLine 
7150 00465C 025B 90 16                   bcc  MouseDev3 
7151 00465E 025D CD C5 00                cmp  LastLine 
7152 004661 0260 B0 11                   bcs  MouseDev3 
7153 004663 0262               
7154 004663 0262 AD 84 08                lda  MouseX 
7155 004666 0265 C9 12                   cmp  #19-1 
7156 004668 0267 90 0A                   bcc  MouseDev3 
7157 00466A 0269 C9 26                   cmp  #39-1 
7158 00466C 026B B0 06                   bcs  MouseDev3 
7159 00466E 026D               
7160 00466E 026D 20 74 02                jsr  ChangeType 
7161 004671 0270               
7162 004671 0270 4C 2D 02                jmp  PollDevLoop 
7163 004674 0273               
7164 004674 0273              * 
7165 004674 0273              * Mouse button released 
7166 004674 0273              * 
7167 004674 0273               
7168 004674 0273              MouseDev3  anop 
7169 004674 0273               
7170 004674 0273 60                      rts 
7171 004675 0274               
7172 004675 0274              * 
7173 004675 0274              * Change image type via mouse movement 
7174 004675 0274              * 
7175 004675 0274               
7176 004675 0274              ChangeType anop 
7177 004675 0274               
7178 004675 0274 38                      sec 
7179 004676 0275 AD 86 08                lda  MouseY 
7180 004679 0278 ED C4 00                sbc  FirstLine 
7181 00467C 027B CD 00 80                cmp  ImageType 
7182 00467F 027E D0 01                   bne  Changed 
7183 004681 0280 60                      rts 
7184 004682 0281               
7185 004682 0281              Changed    anop 
7186 004682 0281               
7187 004682 0281 8D 00 80                sta  ImageType 
7188 004685 0284 20 C6 00                jsr  ShowBox 
7189 004688 0287 20 00 80                jsr  PlotMouse 
7190 00468B 028A               
7191 00468B 028A 60                      rts 
7192 00468C 028B               
7193 00468C 028B              * 
7194 00468C 028B              * Keyboard key press routine 
7195 00468C 028B              * 
7196 00468C 028B               
7197 00468C 028B              UpArrow    equ  $8B 
7198 00468C 028B              DownArrow  equ  $8A 
7199 00468C 028B              LeftArrow  equ  $88 
7200 00468C 028B              RightArrow equ  $95 
7201 00468C 028B              ReturnKey  equ  $8D 
7202 00468C 028B              TabKey     equ  $89 
7203 00468C 028B               
7204 00468C 028B 00           BoxRC      ds   1 
7205 00468D 028C               
7206 00468D 028C              KeyDev     anop 
7207 00468D 028C               
7208 00468D 028C 9C 10 C0                stz  ClearKbd 
7209 004690 028F               
7210 004690 028F              * Down / right arrow keypress logic 
7211 004690 028F               
7212 004690 028F              NextKey01  anop 
7213 004690 028F               
7214 004690 028F C9 8A                   cmp  #DownArrow              Down arrow? 
7215 004692 0291 F0 06                   beq  DA1 
7216 004694 0293 C9 95                   cmp  #RightArrow 
7217 004696 0295 F0 02                   beq  DA1 
7218 004698 0297 80 10                   bra  NextKey02 
7219 00469A 0299               
7220 00469A 0299              DA1        anop 
7221 00469A 0299               
7222 00469A 0299 AD 00 80                lda  ImageType 
7223 00469D 029C C9 04                   cmp  #TypeMax 
7224 00469F 029E B0 03                   bcs  DA2 
7225 0046A1 02A0               
7226 0046A1 02A0 EE 00 80                inc  ImageType 
7227 0046A4 02A3               
7228 0046A4 02A3              DA2        anop 
7229 0046A4 02A3               
7230 0046A4 02A3 A9 01                   lda  #1 
7231 0046A6 02A5 8D 8B 02                sta  BoxRC 
7232 0046A9 02A8               
7233 0046A9 02A8 60                      rts 
7234 0046AA 02A9               
7235 0046AA 02A9              NextKey02  anop 
7236 0046AA 02A9               
7237 0046AA 02A9 C9 8B                   cmp  #UpArrow                Up arrow? 
7238 0046AC 02AB F0 06                   beq  UA1 
7239 0046AE 02AD C9 88                   cmp  #LeftArrow 
7240 0046B0 02AF F0 02                   beq  UA1 
7241 0046B2 02B1 80 0E                   bra  NextKey03 
7242 0046B4 02B3               
7243 0046B4 02B3              UA1        anop 
7244 0046B4 02B3               
7245 0046B4 02B3 AD 00 80                lda  ImageType 
7246 0046B7 02B6 F0 03                   beq  UA2 
7247 0046B9 02B8               
7248 0046B9 02B8 CE 00 80                dec  ImageType 
7249 0046BC 02BB               
7250 0046BC 02BB              UA2        anop 
7251 0046BC 02BB               
7252 0046BC 02BB A9 01                   lda  #1 
7253 0046BE 02BD 8D 8B 02                sta  BoxRC 
7254 0046C1 02C0               
7255 0046C1 02C0 60                      rts 
7256 0046C2 02C1               
7257 0046C2 02C1              NextKey03  anop 
7258 0046C2 02C1               
7259 0046C2 02C1 C9 8D                   cmp  #ReturnKey              <cr> 
7260 0046C4 02C3 D0 01                   bne  BadKey 
7261 0046C6 02C5               
7262 0046C6 02C5 60                      rts 
7263 0046C7 02C6               
7264 0046C7 02C6              BadKey     anop 
7265 0046C7 02C6               
7266 0046C7 02C6 20 00 80                jsr  Beep 
7267 0046CA 02C9 4C 2D 02                jmp  PollDevLoop 
7268 0046CD 02CC               
7269 0046CD 02CC                         End 
 
 
 
Local  Symbols
 
BADKEY     0002C6  BOXRC      00028B  BOXUI      000224  CHANGED    000281   
CHANGETYPE 000274  CONTINUE   00020B  CURRLINE   0001AC  DA1        000299   
DA2        0002A3  DOWNARROW  00008A  ENDHTAB    0001AA  FIRSTLINE  0000C4   
FROMAUX    0001F3  FROMMAIN   0001F8  GETCHAR    0001FB  INITIMGTYP 000038   
IT01       000016  IT02       000020  IT03       000030  IT04       000036   
KEYDEV     00028C  LASTLINE   0000C5  LEFTARROW  000088  LINECOUNT  000177   
LOOP1      00009E  MOUSEDEV1  00024F  MOUSEDEV2  000255  MOUSEDEV3  000273   
NEXTCHAR   000037  NEXTKEY01  00028F  NEXTKEY02  0002A9  NEXTKEY03  0002C1   
NOOF       000212  ON80STORE  00C001  PAGE1      00C054  PAGE2      00C055   
POLLDEV    00022A  POLLDEVLOO 00022D  POLLMOUSE  000235  RESTORE    000207   
RESTSCREEN 0001B4  RETURNKEY  00008D  RIGHTARROW 000095  SAVERTN    0001A8   
SAVESCREEN 0001AD  SB01       0000E9  SB02       0000EE  SB03       0000F0   
SB04       0000F2  SB05       000100  SB06       000125  SB07       00015D   
SB08       000162  SB09       000164  SB10       000166  SELIMGTYPE 000095   
SHOWBOX    0000C6  SSLOOP1    0001DB  SSLOOP2    0001EE  STARTHTAB  0001A9   
STARTRTN   0001B7  STARTVTAB  0001AB  TABKEY     000089  TEXTLINE   000178   
TEXTLINE00 000178  TEXTLINE01 00017A  TEXTLINE02 00017C  TEXTLINE03 00017E   
TEXTLINE04 000180  TEXTLINE05 000182  TEXTLINE06 000184  TEXTLINE07 000186   
TEXTLINE08 000188  TEXTLINE09 00018A  TEXTLINE10 00018C  TEXTLINE11 00018E   
TEXTLINE12 000190  TEXTLINE13 000192  TEXTLINE14 000194  TEXTLINE15 000196   
TEXTLINE16 000198  TEXTLINE17 00019A  TEXTLINE18 00019C  TEXTLINE19 00019E   
TEXTLINE20 0001A0  TEXTLINE21 0001A2  TEXTLINE22 0001A4  TEXTLINE23 0001A6   
TYPE0      000043  TYPE1      000058  TYPE2      000065  TYPE3      000070   
TYPE4      000082  TYPEINDEX  000039  TYPEMAX    000004  UA1        0002B3   
UA2        0002BB  UPARROW    00008B   
7270 0046CD 0000                         Copy SameSize.s 
7271 0046CD 0000              SameSizeRtn Start 
7272 0046CD 0000                         using Menu2vars 
7273 0046CD 0000               
7274 0046CD 0000              * 
7275 0046CD 0000              * Print the same-size disks only setting 
7276 0046CD 0000              * 
7277 0046CD 0000               
7278 0046CD 0000              SizeOff    equ  ' '+$80                 Normal space 
7279 0046CD 0000              SizeOffSel equ  ' '                     Inverse space 
7280 0046CD 0000              SizeOn     equ  'D'                     Normal check mark 
7281 0046CD 0000              SizeOnSel  equ  'E'                     Inverse check mark 
7282 0046CD 0000               
7283 0046CD 0000              PrtSameSize Entry 
7284 0046CD 0000               
7285 0046CD 0000 A9 29                   lda  #42-1                   HTab 42 
7286 0046CF 0002 85 24                   sta  HTab 
7287 0046D1 0004 A9 10                   lda  #17-1                   VTab 17 
7288 0046D3 0006 85 25                   sta  VTab 
7289 0046D5 0008 20 00 80                jsr  SetVTab 
7290 0046D8 000B               
7291 0046D8 000B A9 1B                   lda  #MouseText 
7292 0046DA 000D 20 00 80                jsr  cout 
7293 0046DD 0010               
7294 0046DD 0010 AD 00 80                lda  TabIndex2 
7295 0046E0 0013 C9 00                   cmp  #SameSize 
7296 0046E2 0015 F0 13                   beq  Selected 
7297 0046E4 0017               
7298 0046E4 0017 AD 00 80                lda  blnSize 
7299 0046E7 001A F0 07                   beq  UnselOff 
7300 0046E9 001C               
7301 0046E9 001C              UnSelOn    anop 
7302 0046E9 001C               
7303 0046E9 001C A9 44                   lda  #SizeOn 
7304 0046EB 001E 20 00 80                jsr  cout 
7305 0046EE 0021 80 1A                   bra  PrtExit 
7306 0046F0 0023               
7307 0046F0 0023              UnSelOff   anop 
7308 0046F0 0023               
7309 0046F0 0023 A9 A0                   lda  #SizeOff 
7310 0046F2 0025 20 00 80                jsr  cout 
7311 0046F5 0028 80 13                   bra  PrtExit 
7312 0046F7 002A               
7313 0046F7 002A              Selected   anop 
7314 0046F7 002A               
7315 0046F7 002A AD 00 80                lda  blnSize 
7316 0046FA 002D F0 07                   beq  SelOff 
7317 0046FC 002F               
7318 0046FC 002F              SelOn      anop 
7319 0046FC 002F               
7320 0046FC 002F A9 45                   lda  #SizeOnSel 
7321 0046FE 0031 20 00 80                jsr  cout 
7322 004701 0034 80 07                   bra  PrtExit 
7323 004703 0036               
7324 004703 0036              SelOff     anop 
7325 004703 0036               
7326 004703 0036 A9 20                   lda  #SizeOffSel 
7327 004705 0038 20 00 80                jsr  cout 
7328 004708 003B 80 00                   bra  PrtExit 
7329 00470A 003D               
7330 00470A 003D              PrtExit    anop 
7331 00470A 003D               
7332 00470A 003D A9 18                   lda  #StdText 
7333 00470C 003F 20 00 80                jsr  cout 
7334 00470F 0042               
7335 00470F 0042 60                      rts 
7336 004710 0043               
7337 004710 0043              * 
7338 004710 0043              * Toggle same-size checkbox 
7339 004710 0043              * 
7340 004710 0043               
7341 004710 0043              ToggleSize Entry 
7342 004710 0043               
7343 004710 0043 AD 00 80                lda  blnSize 
7344 004713 0046 F0 05                   beq  TurnOn 
7345 004715 0048               
7346 004715 0048              TurnOff    anop 
7347 004715 0048               
7348 004715 0048 9C 00 80                stz  blnSize 
7349 004718 004B 80 05                   bra  ToggleExit 
7350 00471A 004D               
7351 00471A 004D              TurnOn     anop 
7352 00471A 004D               
7353 00471A 004D EE 00 80                inc  blnSize 
7354 00471D 0050 80 00                   bra  ToggleExit 
7355 00471F 0052               
7356 00471F 0052              ToggleExit anop 
7357 00471F 0052               
7358 00471F 0052 20 00 00                jsr  PrtSameSize 
7359 004722 0055               
7360 004722 0055 60                      rts 
7361 004723 0056               
7362 004723 0056                         End 
 
 
 
Local  Symbols
 
PRTEXIT    00003D  PRTSAMESIZ 000000  SELECTED   00002A  SELOFF     000036   
SELON      00002F  SIZEOFF    0000A0  SIZEOFFSEL 000020  SIZEON     000044   
SIZEONSEL  000045  TOGGLEEXIT 000052  TOGGLESIZE 000043  TURNOFF    000048   
TURNON     00004D  UNSELOFF   000023  UNSELON    00001C   
7363 004723 0000                         Copy Menu2UI.s 
7364 004723 0000              * 
7365 004723 0000              * Menu2 user interface 
7366 004723 0000              * 
7367 004723 0000               
7368 004723 0000              Menu2UI    Start 
7369 004723 0000                         Using Menu2Vars 
7370 004723 0000               
7371 004723 0000              UpArrow    equ  $8B 
7372 004723 0000              DownArrow  equ  $8A 
7373 004723 0000              LeftArrow  equ  $88 
7374 004723 0000              RightArrow equ  $95 
7375 004723 0000              ReturnKey  equ  $8D 
7376 004723 0000              TabKey     equ  $89 
7377 004723 0000               
7378 004723 0000              AppleKey   equ  $C061 
7379 004723 0000              OptionKey  equ  $C062 
7380 004723 0000               
7381 004723 0000 9C 00 80                stz  RC2                     Reset return code 
7382 004726 0003 9C 10 C0                stz  ClearKbd 
7383 004729 0006               
7384 004729 0006              PollDev    anop 
7385 004729 0006               
7386 004729 0006 20 00 80                jsr  PlotMouse               Put mouse cursor on screen 
7387 00472C 0009               
7388 00472C 0009              PollDevLoop anop 
7389 00472C 0009               
7390 00472C 0009 AD 00 C0                lda  Keyboard                Get keypress 
7391 00472F 000C 10 03                   bpl  PollMouse               No keypress, check mouse 
7392 004731 000E 4C 37 00                jmp  KeyDev 
7393 004734 0011               
7394 004734 0011              PollMouse  anop 
7395 004734 0011               
7396 004734 0011 20 00 80                jsr  ReadMouse               Read mouse 
7397 004737 0014 4E 84 08                lsr  MouseX                  Put x and y mouse coordinates into 
7398 00473A 0017 4E 86 08                lsr  MouseY                   0 to 79 and 0 to 23 range. 
7399 00473D 001A AD 8C 08                lda  MouseStat               Mouse status 
7400 004740 001D 89 20                   bit  #MouseMove              Mouse moved? 
7401 004742 001F D0 0A                   bne  MouseDev1               Yes, process cursor movement 
7402 004744 0021 89 80                   bit  #CurrButton             Button pressed? 
7403 004746 0023 D0 0C                   bne  MouseDev2               Yes, process button pressed. 
7404 004748 0025 89 40                   bit  #PrevButton             Button release? 
7405 00474A 0027 D0 0B                   bne  MouseDev3               Yes, process button release. 
7406 00474C 0029               
7407 00474C 0029 80 DE                   bra  PollDevLoop             Check keyboard and mouse again. 
7408 00474E 002B               
7409 00474E 002B              * 
7410 00474E 002B              * Process mouse movement 
7411 00474E 002B              * 
7412 00474E 002B               
7413 00474E 002B              MouseDev1  anop 
7414 00474E 002B               
7415 00474E 002B 20 00 80                jsr  MoveMouse 
7416 004751 002E 4C 09 00                jmp  PollDevLoop 
7417 004754 0031               
7418 004754 0031              * 
7419 004754 0031              * Process button pressed 
7420 004754 0031              * 
7421 004754 0031               
7422 004754 0031              MouseDev2  anop 
7423 004754 0031               
7424 004754 0031 4C 4C 02                jmp  ButtonDown 
7425 004757 0034               
7426 004757 0034              * 
7427 004757 0034              * Process mouse button release 
7428 004757 0034              * 
7429 004757 0034               
7430 004757 0034              MouseDev3  anop 
7431 004757 0034               
7432 004757 0034 4C 66 03                jmp  ButtonUp 
7433 00475A 0037               
7434 00475A 0037              * 
7435 00475A 0037              * Process keyboard key press 
7436 00475A 0037              * 
7437 00475A 0037               
7438 00475A 0037              KeyDev     anop 
7439 00475A 0037               
7440 00475A 0037 9C 10 C0                stz  ClearKbd                Clear keyboard strobe 
7441 00475D 003A 8D F5 01                sta  KeyPress 
7442 004760 003D               
7443 004760 003D              * Text for quiting screen 
7444 004760 003D               
7445 004760 003D AD 61 C0                lda  AppleKey 
7446 004763 0040 10 2D                   bpl  NextKey01 
7447 004765 0042 AD F5 01                lda  KeyPress 
7448 004768 0045 C9 D1                   cmp  #'Q'+$80 
7449 00476A 0047 F0 0E                   beq  QuitReq 
7450 00476C 0049 C9 F1                   cmp  #'q'+$80 
7451 00476E 004B F0 0A                   beq  QuitReq 
7452 004770 004D C9 C2                   cmp  #'B'+$80 
7453 004772 004F F0 06                   beq  QuitReq 
7454 004774 0051 C9 E2                   cmp  #'b'+$80 
7455 004776 0053 F0 02                   beq  QuitReq 
7456 004778 0055 80 18                   bra  NextKey01 
7457 00477A 0057               
7458 00477A 0057              QuitReq    anop 
7459 00477A 0057               
7460 00477A 0057 A9 00                   lda  #SkipBtn                Test here to see of Skip is the 
7461 00477C 0059 CD 00 80                cmp  TabIndex2                current displayed button. 
7462 00477F 005C 8D 00 80                sta  TabIndex2 
7463 004782 005F F0 03                   beq  QuitReq0 
7464 004784 0061 20 00 80                jsr  Refresh2Btn             Display Skip as current selected. 
7465 004787 0064               
7466 004787 0064              QuitReq0   anop 
7467 004787 0064               
7468 004787 0064 20 F6 01                jsr  AnimateBtn 
7469 00478A 0067               
7470 00478A 0067 A9 00                   lda  #Quit2 
7471 00478C 0069 8D 00 80                sta  RC2 
7472 00478F 006C 4C F4 01                jmp  Exit 
7473 004792 006F               
7474 004792 006F              * Down / right arrow keypress logic 
7475 004792 006F               
7476 004792 006F              NextKey01  anop 
7477 004792 006F               
7478 004792 006F AD F5 01                lda  KeyPress 
7479 004795 0072 C9 8A                   cmp  #DownArrow              Down arrow? 
7480 004797 0074 F0 06                   beq  DownReq2 
7481 004799 0076 C9 95                   cmp  #RightArrow             ...or right arrow? 
7482 00479B 0078 F0 02                   beq  DownReq2 
7483 00479D 007A 80 2A                   bra  NextKey02 
7484 00479F 007C               
7485 00479F 007C              DownReq2   anop 
7486 00479F 007C               
7487 00479F 007C AD 00 80                lda  SelLine 
7488 0047A2 007F C9 05                   cmp  #5                      At bottom of window? 
7489 0047A4 0081 F0 13                   beq  AtBottom 
7490 0047A6 0083               
7491 0047A6 0083 AD 00 80                lda  DevEntCnt               If total number of devices = our current 
7492 0047A9 0086 CD 00 80                cmp  SelLine                  line number then no more entries. 
7493 0047AC 0089 F0 0B                   beq  AtBottom 
7494 0047AE 008B               
7495 0047AE 008B              IncSelLine anop 
7496 0047AE 008B               
7497 0047AE 008B EE 00 80                inc  SelLine 
7498 0047B1 008E A9 00                   lda  #UpdDevLst 
7499 0047B3 0090 8D 00 80                sta  RC2 
7500 0047B6 0093 4C F4 01                jmp  Exit 
7501 0047B9 0096               
7502 0047B9 0096              AtBottom   anop 
7503 0047B9 0096               
7504 0047B9 0096 AD 00 80                lda  Below 
7505 0047BC 0099 F0 03                   beq  NoMoreBelow 
7506 0047BE 009B               
7507 0047BE 009B EE 00 80                inc  SelLine                 Should make SelLine = 6 
7508 0047C1 009E               
7509 0047C1 009E              NoMoreBelow anop 
7510 0047C1 009E               
7511 0047C1 009E A9 00                   lda  #UpdDevLst 
7512 0047C3 00A0 8D 00 80                sta  RC2 
7513 0047C6 00A3 4C F4 01                jmp  Exit 
7514 0047C9 00A6               
7515 0047C9 00A6              NextKey02  anop 
7516 0047C9 00A6               
7517 0047C9 00A6              * Up / left arrow keypress 
7518 0047C9 00A6               
7519 0047C9 00A6 AD F5 01                lda  KeyPress 
7520 0047CC 00A9 C9 8B                   cmp  #UpArrow 
7521 0047CE 00AB F0 06                   beq  UpReq2 
7522 0047D0 00AD C9 88                   cmp  #LeftArrow 
7523 0047D2 00AF F0 02                   beq  UpReq2 
7524 0047D4 00B1 80 22                   bra  NextKey03 
7525 0047D6 00B3               
7526 0047D6 00B3              UpReq2     anop 
7527 0047D6 00B3               
7528 0047D6 00B3 AD 00 80                lda  SelLine 
7529 0047D9 00B6 C9 01                   cmp  #1 
7530 0047DB 00B8 F0 0B                   beq  AtTop 
7531 0047DD 00BA               
7532 0047DD 00BA CE 00 80                dec  SelLine 
7533 0047E0 00BD A9 00                   lda  #UpdDevLst 
7534 0047E2 00BF 8D 00 80                sta  RC2 
7535 0047E5 00C2 4C F4 01                jmp  Exit 
7536 0047E8 00C5               
7537 0047E8 00C5              AtTop      anop 
7538 0047E8 00C5               
7539 0047E8 00C5 AD 00 80                lda  Above 
7540 0047EB 00C8 F0 03                   beq  NoMoreAbove 
7541 0047ED 00CA               
7542 0047ED 00CA CE 00 80                dec  SelLine                 Should make SelLine = 0 
7543 0047F0 00CD               
7544 0047F0 00CD              NoMoreAbove anop 
7545 0047F0 00CD               
7546 0047F0 00CD A9 00                   lda  #UpdDevLst 
7547 0047F2 00CF 8D 00 80                sta  RC2 
7548 0047F5 00D2 4C F4 01                jmp  Exit 
7549 0047F8 00D5               
7550 0047F8 00D5              NextKey03  anop 
7551 0047F8 00D5               
7552 0047F8 00D5              * About screen request 
7553 0047F8 00D5               
7554 0047F8 00D5 AD 61 C0                lda  AppleKey 
7555 0047FB 00D8 10 5A                   bpl  NextKey04 
7556 0047FD 00DA AD F5 01                lda  KeyPress 
7557 004800 00DD C9 C1                   cmp  #'A'+$80 
7558 004802 00DF F0 06                   beq  AboutReq 
7559 004804 00E1 C9 E1                   cmp  #'a'+$80 
7560 004806 00E3 F0 02                   beq  AboutReq 
7561 004808 00E5 80 4D                   bra  NextKey04 
7562 00480A 00E7               
7563 00480A 00E7              AboutReq   anop 
7564 00480A 00E7               
7565 00480A 00E7 A9 00                   lda  #AboutBtn 
7566 00480C 00E9 CD 00 80                cmp  TabIndex2 
7567 00480F 00EC 8D 00 80                sta  TabIndex2 
7568 004812 00EF F0 03                   beq  AboutReq0 
7569 004814 00F1               
7570 004814 00F1 20 00 80                jsr  Refresh2Btn 
7571 004817 00F4               
7572 004817 00F4              AboutReq0  anop 
7573 004817 00F4               
7574 004817 00F4 20 F6 01                jsr  AnimateBtn 
7575 00481A 00F7               
7576 00481A 00F7              AboutReq1  anop 
7577 00481A 00F7               
7578 00481A 00F7 A9 00                   lda  #SkipBtn 
7579 00481C 00F9 8D 00 80                sta  TabIndex2 
7580 00481F 00FC               
7581 00481F 00FC              *          lda  #AboutMsg 
7582 00481F 00FC              *          sta  MsgPtr 
7583 00481F 00FC              *          lda  #>AboutMsg 
7584 00481F 00FC              *          sta  MsgPtr+1 
7585 00481F 00FC              * 
7586 00481F 00FC              *          jsr  MsgOk 
7587 00481F 00FC               
7588 00481F 00FC 20 00 80                jsr  About 
7589 004822 00FF               
7590 004822 00FF A9 00                   lda  #Nothing 
7591 004824 0101 8D 00 80                sta  RC2 
7592 004827 0104 4C F4 01                jmp  Exit 
7593 00482A 0107               
7594 00482A 0107                         Msb  On 
7595 00482A 0107 A0 A0 A0 A0  AboutMsg   dc   c'       Diskmaker 8',h'0D' 
7596 00483D 011A A8 E3 A9 A0             dc   c'(c) 2005 by Mark Percival',h'00' 
7597 004857 0134                         Msb  Off 
7598 004857 0134               
7599 004857 0134              NextKey04  anop 
7600 004857 0134               
7601 004857 0134              * Make disk request 
7602 004857 0134               
7603 004857 0134 AD 61 C0                lda  AppleKey 
7604 00485A 0137 10 3A                   bpl  NextKey05 
7605 00485C 0139 AD F5 01                lda  KeyPress 
7606 00485F 013C C9 CD                   cmp  #'M'+$80 
7607 004861 013E F0 06                   beq  MakeReq 
7608 004863 0140 C9 ED                   cmp  #'m'+$80 
7609 004865 0142 F0 02                   beq  MakeReq 
7610 004867 0144 80 2D                   bra  NextKey05 
7611 004869 0146               
7612 004869 0146              MakeReq    anop 
7613 004869 0146               
7614 004869 0146 A9 00                   lda  #MakeBtn 
7615 00486B 0148 CD 00 80                cmp  TabIndex2 
7616 00486E 014B 8D 00 80                sta  TabIndex2 
7617 004871 014E F0 03                   beq  MakeReq0 
7618 004873 0150               
7619 004873 0150 20 00 80                jsr  Refresh2Btn 
7620 004876 0153               
7621 004876 0153              MakeReq0   anop 
7622 004876 0153               
7623 004876 0153 20 F6 01                jsr  AnimateBtn 
7624 004879 0156               
7625 004879 0156 AD 00 80                lda  DevEntCnt               Check to see if there are devices listed 
7626 00487C 0159 D0 0B                   bne  MakeReq1                 on the screen. 
7627 00487E 015B               
7628 00487E 015B 20 00 80                jsr  Beep                    Nope, so beep him and exit. 
7629 004881 015E               
7630 004881 015E A9 00                   lda  #Nothing 
7631 004883 0160 8D 00 80                sta  RC2 
7632 004886 0163 4C F4 01                jmp  Exit 
7633 004889 0166               
7634 004889 0166              MakeReq1   anop 
7635 004889 0166               
7636 004889 0166 A9 00                   lda  #SkipBtn 
7637 00488B 0168 8D 00 80                sta  TabIndex2 
7638 00488E 016B               
7639 00488E 016B A9 00                   lda  #MakingDisk 
7640 004890 016D 8D 00 80                sta  RC2 
7641 004893 0170 4C F4 01                jmp  Exit 
7642 004896 0173               
7643 004896 0173              NextKey05  anop 
7644 004896 0173               
7645 004896 0173              * Tab key routine 
7646 004896 0173               
7647 004896 0173 AD F5 01                lda  KeyPress 
7648 004899 0176 C9 89                   cmp  #TabKey 
7649 00489B 0178 F0 02                   beq  TabReq 
7650 00489D 017A 80 24                   bra  NextKey06 
7651 00489F 017C               
7652 00489F 017C              TabReq     anop 
7653 00489F 017C               
7654 00489F 017C AD 62 C0                lda  OptionKey 
7655 0048A2 017F 30 0C                   bmi  TabUp 
7656 0048A4 0181               
7657 0048A4 0181              TabDown    anop 
7658 0048A4 0181               
7659 0048A4 0181 AD 00 80                lda  TabIndex2 
7660 0048A7 0184 1A                      inc  a 
7661 0048A8 0185 C9 00                   cmp  #LoopBack2 
7662 0048AA 0187 D0 0C                   bne  TabReq1 
7663 0048AC 0189               
7664 0048AC 0189 A9 00                   lda  #0 
7665 0048AE 018B 80 08                   bra  TabReq1 
7666 0048B0 018D               
7667 0048B0 018D              TabUp      anop 
7668 0048B0 018D               
7669 0048B0 018D AD 00 80                lda  TabIndex2 
7670 0048B3 0190 3A                      dec  a 
7671 0048B4 0191 10 02                   bpl  TabReq1 
7672 0048B6 0193               
7673 0048B6 0193 A9 FF                   lda  #LoopBack2-1 
7674 0048B8 0195               
7675 0048B8 0195              TabReq1    anop 
7676 0048B8 0195               
7677 0048B8 0195 8D 00 80                sta  TabIndex2 
7678 0048BB 0198               
7679 0048BB 0198 A9 00                   lda  #Nothing 
7680 0048BD 019A 8D 00 80                sta  RC2 
7681 0048C0 019D 4C F4 01                jmp  Exit 
7682 0048C3 01A0               
7683 0048C3 01A0              NextKey06  anop 
7684 0048C3 01A0               
7685 0048C3 01A0              * Process <cr> 
7686 0048C3 01A0               
7687 0048C3 01A0 AD F5 01                lda   KeyPress 
7688 0048C6 01A3 C9 8D                   cmp  #ReturnKey 
7689 0048C8 01A5 F0 06                   beq  EnterReq 
7690 0048CA 01A7 C9 A0                   cmp  #' '+$80 
7691 0048CC 01A9 F0 02                   beq  EnterReq 
7692 0048CE 01AB 80 41                   bra  NextKey07 
7693 0048D0 01AD               
7694 0048D0 01AD              EnterReq   anop 
7695 0048D0 01AD               
7696 0048D0 01AD AD 00 80                lda  TabIndex2 
7697 0048D3 01B0               
7698 0048D3 01B0 C9 00                   cmp  #AboutBtn 
7699 0048D5 01B2 D0 03                   bne  Enter01 
7700 0048D7 01B4 4C E7 00                jmp  AboutReq 
7701 0048DA 01B7               
7702 0048DA 01B7              Enter01    anop 
7703 0048DA 01B7               
7704 0048DA 01B7 C9 00                   cmp  #SkipBtn 
7705 0048DC 01B9 D0 03                   bne  Enter02 
7706 0048DE 01BB 4C 57 00                jmp  QuitReq 
7707 0048E1 01BE               
7708 0048E1 01BE              Enter02    anop 
7709 0048E1 01BE               
7710 0048E1 01BE C9 00                   cmp  #MakeBtn 
7711 0048E3 01C0 D0 03                   bne  Enter03 
7712 0048E5 01C2 4C 46 01                jmp  MakeReq 
7713 0048E8 01C5               
7714 0048E8 01C5              Enter03    anop 
7715 0048E8 01C5               
7716 0048E8 01C5 C9 00                   cmp  #ImgTypeBox 
7717 0048EA 01C7 D0 16                   bne  Enter04 
7718 0048EC 01C9 20 00 80                jsr  SelImgType 
7719 0048EF 01CC 20 00 80                jsr  GetImgSize 
7720 0048F2 01CF               
7721 0048F2 01CF AD 00 80                lda  blnSize                 Is same-size on? 
7722 0048F5 01D2 D0 03                   bne  Enter03a 
7723 0048F7 01D4 4C 09 00                jmp  PollDevLoop             No, so just get next keystroke. 
7724 0048FA 01D7               
7725 0048FA 01D7              Enter03a   anop 
7726 0048FA 01D7               
7727 0048FA 01D7 A9 00                   lda  #ReloadDevs             Same size on and he changed type so 
7728 0048FC 01D9 8D 00 80                sta  RC2                     refresh device display. 
7729 0048FF 01DC 4C F4 01                jmp  Exit 
7730 004902 01DF               
7731 004902 01DF              Enter04    anop 
7732 004902 01DF               
7733 004902 01DF C9 00                   cmp  #SameSize 
7734 004904 01E1 D0 0B                   bne  Enter05 
7735 004906 01E3 20 00 80                jsr  ToggleSize 
7736 004909 01E6 A9 00                   lda  #ReloadDevs 
7737 00490B 01E8 8D 00 80                sta  RC2 
7738 00490E 01EB 4C F4 01                jmp  Exit 
7739 004911 01EE               
7740 004911 01EE              Enter05    anop 
7741 004911 01EE               
7742 004911 01EE              NextKey07  anop 
7743 004911 01EE               
7744 004911 01EE 20 00 80                jsr  Beep 
7745 004914 01F1 4C 09 00                jmp  PollDevLoop 
7746 004917 01F4               
7747 004917 01F4              Exit       anop 
7748 004917 01F4               
7749 004917 01F4 60                      rts 
7750 004918 01F5               
7751 004918 01F5 00           KeyPress   ds   1 
7752 004919 01F6               
7753 004919 01F6              * 
7754 004919 01F6              * Do button animation on <cr> 
7755 004919 01F6              * 
7756 004919 01F6               
7757 004919 01F6              AnimateBtn anop 
7758 004919 01F6               
7759 004919 01F6 A9 00                   lda  #M2BtnText 
7760 00491B 01F8 85 06                   sta  Ptr1 
7761 00491D 01FA A9 80                   lda  #>M2BtnText 
7762 00491F 01FC 85 07                   sta  Ptr1+1 
7763 004921 01FE               
7764 004921 01FE AE 00 80                ldx  TabIndex2 
7765 004924 0201 F0 10                   beq  AnimBtn02 
7766 004926 0203               
7767 004926 0203              AnimBtn01  anop 
7768 004926 0203               
7769 004926 0203 18                      clc 
7770 004927 0204 A5 06                   lda  Ptr1 
7771 004929 0206 69 0C                   adc  #12 
7772 00492B 0208 85 06                   sta  Ptr1 
7773 00492D 020A A5 07                   lda  Ptr1+1 
7774 00492F 020C 69 00                   adc  #0 
7775 004931 020E 85 07                   sta  Ptr1+1 
7776 004933 0210               
7777 004933 0210 CA                      dex 
7778 004934 0211 D0 F0                   bne  AnimBtn01 
7779 004936 0213               
7780 004936 0213              AnimBtn02  anop 
7781 004936 0213               
7782 004936 0213 A9 0E                   lda  #Normal 
7783 004938 0215 20 00 80                jsr  cout 
7784 00493B 0218               
7785 00493B 0218 20 33 02                jsr  PrtButton 
7786 00493E 021B               
7787 00493E 021B A9 FF                   lda  #$FF 
7788 004940 021D 20 A8 FC                jsr  Wait 
7789 004943 0220               
7790 004943 0220 A9 0F                   lda  #Inverse 
7791 004945 0222 20 00 80                jsr  cout 
7792 004948 0225               
7793 004948 0225 20 33 02                jsr  PrtButton 
7794 00494B 0228               
7795 00494B 0228 A9 FF                   lda  #$FF 
7796 00494D 022A 20 A8 FC                jsr  Wait 
7797 004950 022D               
7798 004950 022D A9 0E                   lda  #Normal 
7799 004952 022F 20 00 80                jsr  cout 
7800 004955 0232               
7801 004955 0232 60                      rts 
7802 004956 0233               
7803 004956 0233              * 
7804 004956 0233              * Print button text 
7805 004956 0233              * 
7806 004956 0233               
7807 004956 0233              PrtButton  anop 
7808 004956 0233               
7809 004956 0233 A9 32                   lda  #51-1 
7810 004958 0235 85 24                   sta  HTab 
7811 00495A 0237 B2 06                   lda  (Ptr1) 
7812 00495C 0239 85 25                   sta  VTab 
7813 00495E 023B 20 00 80                jsr  SetVTab 
7814 004961 023E               
7815 004961 023E A0 01                   ldy  #1 
7816 004963 0240 A2 0B                   ldx  #11 
7817 004965 0242               
7818 004965 0242              PrtButt01  anop 
7819 004965 0242               
7820 004965 0242 B1 06                   lda  (Ptr1),y 
7821 004967 0244 20 00 80                jsr  cout 
7822 00496A 0247 C8                      iny 
7823 00496B 0248 CA                      dex 
7824 00496C 0249 D0 F7                   bne  PrtButt01 
7825 00496E 024B               
7826 00496E 024B 60                      rts 
7827 00496F 024C               
7828 00496F 024C              * 
7829 00496F 024C              * Process mouse button press 
7830 00496F 024C              * 
7831 00496F 024C               
7832 00496F 024C              ButtonDown anop 
7833 00496F 024C               
7834 00496F 024C AD 8C 08                lda  MouseStat               Button is down but make sure he has also 
7835 004972 024F 89 40                   bit  #PrevButton             released it and is not holding it down. 
7836 004974 0251 F0 13                   beq  BD00 
7837 004976 0253               
7838 004976 0253 AD 65 02                lda  HoldCnt                 Check to see how long he's held down the 
7839 004979 0256 C9 FF                   cmp  #$FF                    mouse button. 
7840 00497B 0258 F0 0F                   beq  Repeat                  Long enough so he's repeating. 
7841 00497D 025A               
7842 00497D 025A EE 65 02                inc  HoldCnt                 Hasn't held it long enough to be 
7843 004980 025D A9 01                   lda  #$01                    considered repeating so count the hold 
7844 004982 025F 20 A8 FC                jsr  Wait 
7845 004985 0262               
7846 004985 0262 4C 09 00                jmp  PollDevLoop 
7847 004988 0265               
7848 004988 0265 00           HoldCnt    ds   1                       Count how long he's holding the button 
7849 004989 0266               
7850 004989 0266              BD00       anop 
7851 004989 0266               
7852 004989 0266 9C 65 02                stz  HoldCnt                 Zero out counter on first button press. 
7853 00498C 0269               
7854 00498C 0269              Repeat     anop 
7855 00498C 0269               
7856 00498C 0269              * Test for About button click 
7857 00498C 0269               
7858 00498C 0269 AD 86 08                lda  MouseY 
7859 00498F 026C C9 0A                   cmp  #11-1 
7860 004991 026E D0 16                   bne  BD01 
7861 004993 0270               
7862 004993 0270 AD 84 08                lda  MouseX 
7863 004996 0273 C9 31                   cmp  #50-1 
7864 004998 0275 90 0F                   bcc  BD01 
7865 00499A 0277               
7866 00499A 0277 C9 3E                   cmp  #62 
7867 00499C 0279 B0 0B                   bcs  BD01 
7868 00499E 027B               
7869 00499E 027B A9 00                   lda  #AboutBtn 
7870 0049A0 027D 8D 00 80                sta  TabIndex2 
7871 0049A3 0280               
7872 0049A3 0280 A9 00                   lda  #Nothing 
7873 0049A5 0282 8D 00 80                sta  RC2 
7874 0049A8 0285 60                      rts 
7875 0049A9 0286               
7876 0049A9 0286              BD01       anop 
7877 0049A9 0286               
7878 0049A9 0286              * Test for Skip button click 
7879 0049A9 0286               
7880 0049A9 0286 AD 86 08                lda  MouseY 
7881 0049AC 0289 C9 0C                   cmp  #13-1 
7882 0049AE 028B D0 16                   bne  BD02 
7883 0049B0 028D               
7884 0049B0 028D AD 84 08                lda  MouseX 
7885 0049B3 0290 C9 31                   cmp  #50-1 
7886 0049B5 0292 90 0F                   bcc  BD02 
7887 0049B7 0294               
7888 0049B7 0294 C9 3E                   cmp  #62 
7889 0049B9 0296 B0 0B                   bcs  BD02 
7890 0049BB 0298               
7891 0049BB 0298 A9 00                   lda  #SkipBtn 
7892 0049BD 029A 8D 00 80                sta  TabIndex2 
7893 0049C0 029D               
7894 0049C0 029D A9 00                   lda  #Nothing 
7895 0049C2 029F 8D 00 80                sta  RC2 
7896 0049C5 02A2 60                      rts 
7897 0049C6 02A3               
7898 0049C6 02A3              BD02       anop 
7899 0049C6 02A3               
7900 0049C6 02A3              * Test for Make Disks button click 
7901 0049C6 02A3               
7902 0049C6 02A3 AD 86 08                lda  MouseY 
7903 0049C9 02A6 C9 0E                   cmp  #15-1 
7904 0049CB 02A8 D0 16                   bne  BD03 
7905 0049CD 02AA               
7906 0049CD 02AA AD 84 08                lda  MouseX 
7907 0049D0 02AD C9 31                   cmp  #50-1 
7908 0049D2 02AF 90 0F                   bcc  BD03 
7909 0049D4 02B1               
7910 0049D4 02B1 C9 3E                   cmp  #62 
7911 0049D6 02B3 B0 0B                   bcs  BD03 
7912 0049D8 02B5               
7913 0049D8 02B5 A9 00                   lda  #MakeBtn 
7914 0049DA 02B7 8D 00 80                sta  TabIndex2 
7915 0049DD 02BA               
7916 0049DD 02BA A9 00                   lda  #Nothing 
7917 0049DF 02BC 8D 00 80                sta  RC2 
7918 0049E2 02BF 60                      rts 
7919 0049E3 02C0               
7920 0049E3 02C0              BD03       anop 
7921 0049E3 02C0               
7922 0049E3 02C0              * Test for Image Type box click 
7923 0049E3 02C0               
7924 0049E3 02C0 AD 86 08                lda  MouseY 
7925 0049E6 02C3 C9 10                   cmp  #17-1 
7926 0049E8 02C5 D0 27                   bne  BD04 
7927 0049EA 02C7               
7928 0049EA 02C7 AD 84 08                lda  MouseX 
7929 0049ED 02CA C9 12                   cmp  #19-1 
7930 0049EF 02CC 90 20                   bcc  BD04 
7931 0049F1 02CE               
7932 0049F1 02CE C9 26                   cmp  #38 
7933 0049F3 02D0 B0 1C                   bcs  BD04 
7934 0049F5 02D2               
7935 0049F5 02D2 A9 00                   lda  #ImgTypeBox 
7936 0049F7 02D4 8D 00 80                sta  TabIndex2 
7937 0049FA 02D7               
7938 0049FA 02D7 20 00 80                jsr  Refresh2Btn 
7939 0049FD 02DA 20 00 80                jsr  SelImgType 
7940 004A00 02DD 20 00 80                jsr  GetImgSize 
7941 004A03 02E0               
7942 004A03 02E0 AD 00 80                lda  blnSize                 Is same-size on? 
7943 004A06 02E3 D0 03                   bne  BD03a 
7944 004A08 02E5 4C 09 00                jmp  PollDevLoop             No, so just get next keystroke. 
7945 004A0B 02E8               
7946 004A0B 02E8              BD03a      anop 
7947 004A0B 02E8               
7948 004A0B 02E8 A9 00                   lda  #ReloadDevs             Same size on and he changed type so 
7949 004A0D 02EA 8D 00 80                sta  RC2                     refresh device display. 
7950 004A10 02ED 60                      rts 
7951 004A11 02EE               
7952 004A11 02EE              BD04       anop 
7953 004A11 02EE               
7954 004A11 02EE              * Test for Same-size disks checkbox click 
7955 004A11 02EE               
7956 004A11 02EE AD 86 08                lda  MouseY 
7957 004A14 02F1 C9 10                   cmp  #17-1 
7958 004A16 02F3 D0 16                   bne  BD05 
7959 004A18 02F5               
7960 004A18 02F5 AD 84 08                lda  MouseX 
7961 004A1B 02F8 C9 29                   cmp  #42-1 
7962 004A1D 02FA 90 0F                   bcc  BD05 
7963 004A1F 02FC               
7964 004A1F 02FC C9 3F                   cmp  #63 
7965 004A21 02FE B0 0B                   bcs  BD05 
7966 004A23 0300               
7967 004A23 0300 A9 00                   lda  #SameSize 
7968 004A25 0302 8D 00 80                sta  TabIndex2 
7969 004A28 0305               
7970 004A28 0305 A9 00                   lda  #Nothing 
7971 004A2A 0307 8D 00 80                sta  RC2 
7972 004A2D 030A 60                      rts 
7973 004A2E 030B               
7974 004A2E 030B              BD05       anop 
7975 004A2E 030B               
7976 004A2E 030B              * Text for scroll list box up 
7977 004A2E 030B               
7978 004A2E 030B AD 86 08                lda  MouseY 
7979 004A31 030E C9 0A                   cmp  #11-1 
7980 004A33 0310 D0 0A                   bne  BD06 
7981 004A35 0312               
7982 004A35 0312 AD 84 08                lda  MouseX 
7983 004A38 0315 C9 2D                   cmp  #46-1 
7984 004A3A 0317 D0 03                   bne  BD06 
7985 004A3C 0319               
7986 004A3C 0319 4C B3 00                jmp  UpReq2 
7987 004A3F 031C               
7988 004A3F 031C              BD06       anop 
7989 004A3F 031C               
7990 004A3F 031C              * Test for scroll list box down 
7991 004A3F 031C               
7992 004A3F 031C AD 86 08                lda  MouseY 
7993 004A42 031F C9 0E                   cmp  #15-1 
7994 004A44 0321 D0 0A                   bne  BD07 
7995 004A46 0323               
7996 004A46 0323 AD 84 08                lda  MouseX 
7997 004A49 0326 C9 2D                   cmp  #46-1 
7998 004A4B 0328 D0 03                   bne  BD07 
7999 004A4D 032A               
8000 004A4D 032A 4C 7C 00                jmp  DownReq2 
8001 004A50 032D               
8002 004A50 032D              BD07       anop 
8003 004A50 032D               
8004 004A50 032D              * Look for a click on a device inside of list box 
8005 004A50 032D               
8006 004A50 032D AD 86 08                lda  MouseY 
8007 004A53 0330 C9 0A                   cmp  #11-1 
8008 004A55 0332 90 2B                   bcc  BD09 
8009 004A57 0334               
8010 004A57 0334 C9 0F                   cmp  #15 
8011 004A59 0336 B0 27                   bcs  BD09 
8012 004A5B 0338               
8013 004A5B 0338 AD 84 08                lda  MouseX 
8014 004A5E 033B C9 12                   cmp  #19-1 
8015 004A60 033D 90 20                   bcc  BD09 
8016 004A62 033F               
8017 004A62 033F C9 2C                   cmp  #44 
8018 004A64 0341 B0 1C                   bcs  BD09 
8019 004A66 0343               
8020 004A66 0343 38                      sec 
8021 004A67 0344 AD 86 08                lda  MouseY 
8022 004A6A 0347 E9 09                   sbc  #9 
8023 004A6C 0349 CD 00 80                cmp  SelLine                 Did he click the same line twice? 
8024 004A6F 034C F0 09                   beq  BD08                    Yes so execute double click logic 
8025 004A71 034E               
8026 004A71 034E 8D 00 80                sta  SelLine                 No so change selected line pointer. 
8027 004A74 0351               
8028 004A74 0351 A9 00                   lda  #UpdDevLst 
8029 004A76 0353 8D 00 80                sta  RC2 
8030 004A79 0356 60                      rts 
8031 004A7A 0357               
8032 004A7A 0357              BD08       anop                         Double clicked line 
8033 004A7A 0357               
8034 004A7A 0357 A9 00                   lda  #MakeBtn                Change command to Make Disks 
8035 004A7C 0359 8D 00 80                sta  TabIndex2 
8036 004A7F 035C               
8037 004A7F 035C 4C AD 01                jmp  EnterReq                Pretend that he pressed Enter key 
8038 004A82 035F               
8039 004A82 035F              BD09       anop 
8040 004A82 035F               
8041 004A82 035F 20 00 80                jsr  Beep 
8042 004A85 0362 4C 09 00                jmp  PollDevLoop 
8043 004A88 0365               
8044 004A88 0365 60                      rts 
8045 004A89 0366              * 
8046 004A89 0366              * Process mouse button release 
8047 004A89 0366              * 
8048 004A89 0366               
8049 004A89 0366              ButtonUp   anop 
8050 004A89 0366               
8051 004A89 0366              * Test for About button click 
8052 004A89 0366               
8053 004A89 0366 AD 86 08                lda  MouseY 
8054 004A8C 0369 C9 0A                   cmp  #11-1 
8055 004A8E 036B D0 15                   bne  BU01 
8056 004A90 036D               
8057 004A90 036D AD 84 08                lda  MouseX 
8058 004A93 0370 C9 31                   cmp  #50-1 
8059 004A95 0372 90 0E                   bcc  BU01 
8060 004A97 0374               
8061 004A97 0374 C9 3E                   cmp  #62 
8062 004A99 0376 B0 0A                   bcs  BU01 
8063 004A9B 0378               
8064 004A9B 0378 AD 00 80                lda  TabIndex2 
8065 004A9E 037B C9 00                   cmp  #AboutBtn 
8066 004AA0 037D D0 03                   bne  BU01 
8067 004AA2 037F               
8068 004AA2 037F 4C AD 01                jmp  EnterReq 
8069 004AA5 0382               
8070 004AA5 0382              BU01       anop 
8071 004AA5 0382               
8072 004AA5 0382              * Test for Skip button click 
8073 004AA5 0382               
8074 004AA5 0382 AD 86 08                lda  MouseY 
8075 004AA8 0385 C9 0C                   cmp  #13-1 
8076 004AAA 0387 D0 15                   bne  BU02 
8077 004AAC 0389               
8078 004AAC 0389 AD 84 08                lda  MouseX 
8079 004AAF 038C C9 31                   cmp  #50-1 
8080 004AB1 038E 90 0E                   bcc  BU02 
8081 004AB3 0390               
8082 004AB3 0390 C9 3E                   cmp  #62 
8083 004AB5 0392 B0 0A                   bcs  BU02 
8084 004AB7 0394               
8085 004AB7 0394 AD 00 80                lda  TabIndex2 
8086 004ABA 0397 C9 00                   cmp  #SkipBtn 
8087 004ABC 0399 D0 03                   bne  BU02 
8088 004ABE 039B               
8089 004ABE 039B 4C AD 01                jmp  EnterReq 
8090 004AC1 039E               
8091 004AC1 039E              BU02       anop 
8092 004AC1 039E               
8093 004AC1 039E              * Test for Make Disks button click 
8094 004AC1 039E               
8095 004AC1 039E AD 86 08                lda  MouseY 
8096 004AC4 03A1 C9 0E                   cmp  #15-1 
8097 004AC6 03A3 D0 15                   bne  BU03 
8098 004AC8 03A5               
8099 004AC8 03A5 AD 84 08                lda  MouseX 
8100 004ACB 03A8 C9 31                   cmp  #50-1 
8101 004ACD 03AA 90 0E                   bcc  BU03 
8102 004ACF 03AC               
8103 004ACF 03AC C9 3E                   cmp  #62 
8104 004AD1 03AE B0 0A                   bcs  BU03 
8105 004AD3 03B0               
8106 004AD3 03B0 AD 00 80                lda  TabIndex2 
8107 004AD6 03B3 C9 00                   cmp  #MakeBtn 
8108 004AD8 03B5 D0 03                   bne  BU03 
8109 004ADA 03B7               
8110 004ADA 03B7 4C AD 01                jmp  EnterReq 
8111 004ADD 03BA               
8112 004ADD 03BA              BU03       anop 
8113 004ADD 03BA               
8114 004ADD 03BA              * Test for Same-size disks checkbox click 
8115 004ADD 03BA               
8116 004ADD 03BA AD 86 08                lda  MouseY 
8117 004AE0 03BD C9 10                   cmp  #17-1 
8118 004AE2 03BF D0 15                   bne  BU04 
8119 004AE4 03C1               
8120 004AE4 03C1 AD 84 08                lda  MouseX 
8121 004AE7 03C4 C9 29                   cmp  #42-1 
8122 004AE9 03C6 90 0E                   bcc  BU04 
8123 004AEB 03C8               
8124 004AEB 03C8 C9 3F                   cmp  #63 
8125 004AED 03CA B0 0A                   bcs  BU04 
8126 004AEF 03CC               
8127 004AEF 03CC AD 00 80                lda  TabIndex2 
8128 004AF2 03CF C9 00                   cmp  #SameSize 
8129 004AF4 03D1 D0 03                   bne  BU04 
8130 004AF6 03D3               
8131 004AF6 03D3 4C AD 01                jmp  EnterReq 
8132 004AF9 03D6               
8133 004AF9 03D6              BU04       anop 
8134 004AF9 03D6               
8135 004AF9 03D6 4C 09 00                jmp  PollDevLoop 
8136 004AFC 03D9               
8137 004AFC 03D9                         End 
 
 
 
Local  Symbols
 
ABOUTMSG   000107  ABOUTREQ   0000E7  ABOUTREQ0  0000F4  ABOUTREQ1  0000F7   
ANIMATEBTN 0001F6  ANIMBTN01  000203  ANIMBTN02  000213  APPLEKEY   00C061   
ATBOTTOM   000096  ATTOP      0000C5  BD00       000266  BD01       000286   
BD02       0002A3  BD03       0002C0  BD03A      0002E8  BD04       0002EE   
BD05       00030B  BD06       00031C  BD07       00032D  BD08       000357   
BD09       00035F  BU01       000382  BU02       00039E  BU03       0003BA   
BU04       0003D6  BUTTONDOWN 00024C  BUTTONUP   000366  DOWNARROW  00008A   
DOWNREQ2   00007C  ENTER01    0001B7  ENTER02    0001BE  ENTER03    0001C5   
ENTER03A   0001D7  ENTER04    0001DF  ENTER05    0001EE  ENTERREQ   0001AD   
EXIT       0001F4  HOLDCNT    000265  INCSELLINE 00008B  KEYDEV     000037   
KEYPRESS   0001F5  LEFTARROW  000088  MAKEREQ    000146  MAKEREQ0   000153   
MAKEREQ1   000166  MOUSEDEV1  00002B  MOUSEDEV2  000031  MOUSEDEV3  000034   
NEXTKEY01  00006F  NEXTKEY02  0000A6  NEXTKEY03  0000D5  NEXTKEY04  000134   
NEXTKEY05  000173  NEXTKEY06  0001A0  NEXTKEY07  0001EE  NOMOREABOV 0000CD   
NOMOREBELO 00009E  OPTIONKEY  00C062  POLLDEV    000006  POLLDEVLOO 000009   
POLLMOUSE  000011  PRTBUTT01  000242  PRTBUTTON  000233  QUITREQ    000057   
QUITREQ0   000064  REPEAT     000269  RETURNKEY  00008D  RIGHTARROW 000095   
TABDOWN    000181  TABKEY     000089  TABREQ     00017C  TABREQ1    000195   
TABUP      00018D  UPARROW    00008B  UPREQ2     0000B3   
8138 004AFC 0000                         Copy About.s 
8139 004AFC 0000              * 
8140 004AFC 0000              * About box 
8141 004AFC 0000              * 
8142 004AFC 0000               
8143 004AFC 0000              About      Start 
8144 004AFC 0000               
8145 004AFC 0000 20 00 04                jsr  SaveScreen 
8146 004AFF 0003 20 10 00                jsr  ShowAbout 
8147 004B02 0006 20 1C 03                jsr  AboutUI 
8148 004B05 0009 20 07 04                jsr  RestScreen 
8149 004B08 000C               
8150 004B08 000C 20 00 80                jsr  PlotMouse 
8151 004B0B 000F               
8152 004B0B 000F 60                      rts 
8153 004B0C 0010               
8154 004B0C 0010              ShowAbout  anop 
8155 004B0C 0010               
8156 004B0C 0010 A9 1B                   lda  #MouseText 
8157 004B0E 0012 20 00 80                jsr  cout 
8158 004B11 0015               
8159 004B11 0015              * Line 1 
8160 004B11 0015               
8161 004B11 0015 A9 09                   lda  #10-1 
8162 004B13 0017 85 24                   sta  HTab 
8163 004B15 0019 A9 07                   lda  #8-1 
8164 004B17 001B 85 25                   sta  VTab 
8165 004B19 001D               
8166 004B19 001D 20 00 80                jsr  SetVTab 
8167 004B1C 0020               
8168 004B1C 0020 A9 5A                   lda  #'Z' 
8169 004B1E 0022 20 00 80                jsr  cout 
8170 004B21 0025               
8171 004B21 0025 A9 4C                   lda  #'L' 
8172 004B23 0027 A2 3B                   ldx  #59 
8173 004B25 0029               
8174 004B25 0029              L1A        anop 
8175 004B25 0029               
8176 004B25 0029 20 00 80                jsr  cout 
8177 004B28 002C CA                      dex 
8178 004B29 002D D0 FA                   bne  L1A 
8179 004B2B 002F               
8180 004B2B 002F A9 5F                   lda  #'_' 
8181 004B2D 0031 20 00 80                jsr  cout 
8182 004B30 0034               
8183 004B30 0034              * Line 2 
8184 004B30 0034               
8185 004B30 0034 20 12 03                jsr  NextLine 
8186 004B33 0037               
8187 004B33 0037 A9 5A                   lda  #'Z' 
8188 004B35 0039 20 00 80                jsr  cout 
8189 004B38 003C               
8190 004B38 003C A9 A0                   lda  #' '+$80 
8191 004B3A 003E A2 16                   ldx  #22 
8192 004B3C 0040               
8193 004B3C 0040              L2A        anop 
8194 004B3C 0040               
8195 004B3C 0040 20 00 80                jsr  cout 
8196 004B3F 0043 CA                      dex 
8197 004B40 0044 D0 FA                   bne  L2A 
8198 004B42 0046               
8199 004B42 0046 A2 00                   ldx  #0 
8200 004B44 0048               
8201 004B44 0048              L2B        anop 
8202 004B44 0048               
8203 004B44 0048 BD FD 01                lda  Line2Text,x 
8204 004B47 004B F0 06                   beq  L2C 
8205 004B49 004D 20 00 80                jsr  cout 
8206 004B4C 0050 E8                      inx 
8207 004B4D 0051 80 F5                   bra  L2B 
8208 004B4F 0053               
8209 004B4F 0053              L2C        anop 
8210 004B4F 0053               
8211 004B4F 0053 A9 A0                   lda  #' '+$80 
8212 004B51 0055 A2 15                   ldx  #21 
8213 004B53 0057               
8214 004B53 0057              L2D        anop 
8215 004B53 0057               
8216 004B53 0057 20 00 80                jsr  cout 
8217 004B56 005A CA                      dex 
8218 004B57 005B D0 FA                   bne  L2D 
8219 004B59 005D               
8220 004B59 005D A9 5F                   lda  #'_' 
8221 004B5B 005F 20 00 80                jsr  cout 
8222 004B5E 0062               
8223 004B5E 0062              * Line 3 
8224 004B5E 0062               
8225 004B5E 0062 20 12 03                jsr  NextLine 
8226 004B61 0065               
8227 004B61 0065 A9 5A                   lda  #'Z' 
8228 004B63 0067 20 00 80                jsr  cout 
8229 004B66 006A               
8230 004B66 006A A9 A0                   lda  #' '+$80 
8231 004B68 006C A2 0E                   ldx  #14 
8232 004B6A 006E               
8233 004B6A 006E              L3A        anop 
8234 004B6A 006E               
8235 004B6A 006E 20 00 80                jsr  cout 
8236 004B6D 0071 CA                      dex 
8237 004B6E 0072 D0 FA                   bne  L3A 
8238 004B70 0074               
8239 004B70 0074 A2 00                   ldx  #0 
8240 004B72 0076               
8241 004B72 0076              L3B        anop 
8242 004B72 0076               
8243 004B72 0076 BD 0E 02                lda  Line3Text,x 
8244 004B75 0079 F0 06                   beq  L3C 
8245 004B77 007B 20 00 80                jsr  cout 
8246 004B7A 007E E8                      inx 
8247 004B7B 007F 80 F5                   bra  L3B 
8248 004B7D 0081               
8249 004B7D 0081              L3C        anop 
8250 004B7D 0081               
8251 004B7D 0081 A9 A0                   lda  #' '+$80 
8252 004B7F 0083 A2 0E                   ldx  #14 
8253 004B81 0085               
8254 004B81 0085              L3D        anop 
8255 004B81 0085               
8256 004B81 0085 20 00 80                jsr  cout 
8257 004B84 0088 CA                      dex 
8258 004B85 0089 D0 FA                   bne  L3D 
8259 004B87 008B               
8260 004B87 008B A9 5F                   lda  #'_' 
8261 004B89 008D 20 00 80                jsr  cout 
8262 004B8C 0090               
8263 004B8C 0090               
8264 004B8C 0090              * Line 4 
8265 004B8C 0090               
8266 004B8C 0090 20 12 03                jsr  NextLine 
8267 004B8F 0093               
8268 004B8F 0093 A9 5A                   lda  #'Z' 
8269 004B91 0095 20 00 80                jsr  cout 
8270 004B94 0098               
8271 004B94 0098 A9 A0                   lda  #' '+$80 
8272 004B96 009A A2 3B                   ldx  #59 
8273 004B98 009C               
8274 004B98 009C              L4A        anop 
8275 004B98 009C               
8276 004B98 009C 20 00 80                jsr  cout 
8277 004B9B 009F CA                      dex 
8278 004B9C 00A0 D0 FA                   bne  L4A 
8279 004B9E 00A2               
8280 004B9E 00A2 A9 5F                   lda  #'_' 
8281 004BA0 00A4 20 00 80                jsr  cout 
8282 004BA3 00A7               
8283 004BA3 00A7              * Line 5 
8284 004BA3 00A7               
8285 004BA3 00A7 20 12 03                jsr  NextLine 
8286 004BA6 00AA               
8287 004BA6 00AA A9 5A                   lda  #'Z' 
8288 004BA8 00AC 20 00 80                jsr  cout 
8289 004BAB 00AF               
8290 004BAB 00AF A9 A0                   lda  #' '+$80 
8291 004BAD 00B1 20 00 80                jsr  cout 
8292 004BB0 00B4               
8293 004BB0 00B4 A2 00                   ldx  #0 
8294 004BB2 00B6               
8295 004BB2 00B6              L5A        anop 
8296 004BB2 00B6               
8297 004BB2 00B6 BD 2E 02                lda  Line5Text,x 
8298 004BB5 00B9 F0 06                   beq  L5B 
8299 004BB7 00BB 20 00 80                jsr  cout 
8300 004BBA 00BE E8                      inx 
8301 004BBB 00BF 80 F5                   bra  L5A 
8302 004BBD 00C1               
8303 004BBD 00C1              L5B        anop 
8304 004BBD 00C1               
8305 004BBD 00C1 A9 A0                   lda  #' '+$80 
8306 004BBF 00C3 A2 02                   ldx  #2 
8307 004BC1 00C5               
8308 004BC1 00C5              L5C        anop 
8309 004BC1 00C5               
8310 004BC1 00C5 20 00 80                jsr  cout 
8311 004BC4 00C8 CA                      dex 
8312 004BC5 00C9 D0 FA                   bne  L5C 
8313 004BC7 00CB               
8314 004BC7 00CB A9 5F                   lda  #'_' 
8315 004BC9 00CD 20 00 80                jsr  cout 
8316 004BCC 00D0               
8317 004BCC 00D0              * Line 6 
8318 004BCC 00D0               
8319 004BCC 00D0 20 12 03                jsr  NextLine 
8320 004BCF 00D3               
8321 004BCF 00D3 A9 5A                   lda  #'Z' 
8322 004BD1 00D5 20 00 80                jsr  cout 
8323 004BD4 00D8               
8324 004BD4 00D8 A9 A0                   lda  #' '+$80 
8325 004BD6 00DA 20 00 80                jsr  cout 
8326 004BD9 00DD               
8327 004BD9 00DD A2 00                   ldx  #0 
8328 004BDB 00DF               
8329 004BDB 00DF              L6A        anop 
8330 004BDB 00DF               
8331 004BDB 00DF BD 67 02                lda  Line6Text,x 
8332 004BDE 00E2 F0 06                   beq  L6B 
8333 004BE0 00E4 20 00 80                jsr  cout 
8334 004BE3 00E7 E8                      inx 
8335 004BE4 00E8 80 F5                   bra  L6A 
8336 004BE6 00EA               
8337 004BE6 00EA              L6B        anop 
8338 004BE6 00EA               
8339 004BE6 00EA A9 A0                   lda  #' '+$80 
8340 004BE8 00EC A2 08                   ldx  #8 
8341 004BEA 00EE               
8342 004BEA 00EE              L6C        anop 
8343 004BEA 00EE               
8344 004BEA 00EE 20 00 80                jsr  cout 
8345 004BED 00F1 CA                      dex 
8346 004BEE 00F2 D0 FA                   bne  L6C 
8347 004BF0 00F4               
8348 004BF0 00F4 A9 5F                   lda  #'_' 
8349 004BF2 00F6 20 00 80                jsr  cout 
8350 004BF5 00F9               
8351 004BF5 00F9              * Line 7 
8352 004BF5 00F9               
8353 004BF5 00F9 20 12 03                jsr  NextLine 
8354 004BF8 00FC               
8355 004BF8 00FC A9 5A                   lda  #'Z' 
8356 004BFA 00FE 20 00 80                jsr  cout 
8357 004BFD 0101               
8358 004BFD 0101 A9 A0                   lda  #' '+$80 
8359 004BFF 0103 20 00 80                jsr  cout 
8360 004C02 0106               
8361 004C02 0106 A2 00                   ldx  #0 
8362 004C04 0108               
8363 004C04 0108              L7A        anop 
8364 004C04 0108               
8365 004C04 0108 BD 9A 02                lda  Line7Text,x 
8366 004C07 010B F0 06                   beq  L7B 
8367 004C09 010D 20 00 80                jsr  cout 
8368 004C0C 0110 E8                      inx 
8369 004C0D 0111 80 F5                   bra  L7A 
8370 004C0F 0113               
8371 004C0F 0113              L7B        anop 
8372 004C0F 0113               
8373 004C0F 0113 A9 A0                   lda  #' '+$80 
8374 004C11 0115 A2 06                   ldx  #6 
8375 004C13 0117               
8376 004C13 0117              L7C        anop 
8377 004C13 0117               
8378 004C13 0117 20 00 80                jsr  cout 
8379 004C16 011A CA                      dex 
8380 004C17 011B D0 FA                   bne  L7C 
8381 004C19 011D               
8382 004C19 011D A9 5F                   lda  #'_' 
8383 004C1B 011F 20 00 80                jsr  cout 
8384 004C1E 0122               
8385 004C1E 0122              * Line 8 
8386 004C1E 0122               
8387 004C1E 0122 20 12 03                jsr  NextLine 
8388 004C21 0125               
8389 004C21 0125 A9 5A                   lda  #'Z' 
8390 004C23 0127 20 00 80                jsr  cout 
8391 004C26 012A               
8392 004C26 012A A9 A0                   lda  #' '+$80 
8393 004C28 012C 20 00 80                jsr  cout 
8394 004C2B 012F               
8395 004C2B 012F A2 00                   ldx  #0 
8396 004C2D 0131               
8397 004C2D 0131              L8A        anop 
8398 004C2D 0131               
8399 004C2D 0131 BD CF 02                lda  Line8Text,x 
8400 004C30 0134 F0 06                   beq  L8B 
8401 004C32 0136 20 00 80                jsr  cout 
8402 004C35 0139 E8                      inx 
8403 004C36 013A 80 F5                   bra  L8A 
8404 004C38 013C               
8405 004C38 013C              L8B        anop 
8406 004C38 013C               
8407 004C38 013C A9 A0                   lda  #' '+$80 
8408 004C3A 013E A2 01                   ldx  #1 
8409 004C3C 0140               
8410 004C3C 0140              L8C        anop 
8411 004C3C 0140               
8412 004C3C 0140 20 00 80                jsr  cout 
8413 004C3F 0143 CA                      dex 
8414 004C40 0144 D0 FA                   bne  L8C 
8415 004C42 0146               
8416 004C42 0146 A9 5F                   lda  #'_' 
8417 004C44 0148 20 00 80                jsr  cout 
8418 004C47 014B               
8419 004C47 014B              * Line 9 
8420 004C47 014B               
8421 004C47 014B 20 12 03                jsr  NextLine 
8422 004C4A 014E               
8423 004C4A 014E A9 5A                   lda  #'Z' 
8424 004C4C 0150 20 00 80                jsr  cout 
8425 004C4F 0153               
8426 004C4F 0153 A9 A0                   lda  #' '+$80 
8427 004C51 0155 A2 19                   ldx  #25 
8428 004C53 0157               
8429 004C53 0157              L9A        anop 
8430 004C53 0157               
8431 004C53 0157 20 00 80                jsr  cout 
8432 004C56 015A CA                      dex 
8433 004C57 015B D0 FA                   bne  L9A 
8434 004C59 015D               
8435 004C59 015D A9 DF                   lda  #'_'+$80 
8436 004C5B 015F A2 0A                   ldx  #10 
8437 004C5D 0161               
8438 004C5D 0161              L9B        anop 
8439 004C5D 0161               
8440 004C5D 0161 20 00 80                jsr  cout 
8441 004C60 0164 CA                      dex 
8442 004C61 0165 D0 FA                   bne  L9B 
8443 004C63 0167               
8444 004C63 0167 A9 A0                   lda  #' '+$80 
8445 004C65 0169 A2 18                   ldx  #24 
8446 004C67 016B               
8447 004C67 016B              L9C        anop 
8448 004C67 016B               
8449 004C67 016B 20 00 80                jsr  cout 
8450 004C6A 016E CA                      dex 
8451 004C6B 016F D0 FA                   bne  L9C 
8452 004C6D 0171               
8453 004C6D 0171 A9 5F                   lda  #'_' 
8454 004C6F 0173 20 00 80                jsr  cout 
8455 004C72 0176               
8456 004C72 0176              * Line 10 
8457 004C72 0176               
8458 004C72 0176 20 12 03                jsr  NextLine 
8459 004C75 0179               
8460 004C75 0179 A9 5A                   lda  #'Z' 
8461 004C77 017B 20 00 80                jsr  cout 
8462 004C7A 017E               
8463 004C7A 017E A9 A0                   lda  #' '+$80 
8464 004C7C 0180 A2 18                   ldx  #24 
8465 004C7E 0182               
8466 004C7E 0182              L10A       anop 
8467 004C7E 0182               
8468 004C7E 0182 20 00 80                jsr  cout 
8469 004C81 0185 CA                      dex 
8470 004C82 0186 D0 FA                   bne  L10A 
8471 004C84 0188               
8472 004C84 0188 A9 5A                   lda  #'Z' 
8473 004C86 018A 20 00 80                jsr  cout 
8474 004C89 018D               
8475 004C89 018D A9 18                   lda  #StdText 
8476 004C8B 018F 20 00 80                jsr  cout 
8477 004C8E 0192               
8478 004C8E 0192 A9 20                   lda  #' ' 
8479 004C90 0194 20 00 80                jsr  cout 
8480 004C93 0197               
8481 004C93 0197 A9 0F                   lda  #Inverse 
8482 004C95 0199 20 00 80                jsr  cout 
8483 004C98 019C               
8484 004C98 019C A2 00                   ldx  #0 
8485 004C9A 019E               
8486 004C9A 019E              L10B       anop 
8487 004C9A 019E               
8488 004C9A 019E BD 09 03                lda  OkText,x 
8489 004C9D 01A1 F0 06                   beq  L10C 
8490 004C9F 01A3 20 00 80                jsr  cout 
8491 004CA2 01A6 E8                      inx 
8492 004CA3 01A7 80 F5                   bra  L10B 
8493 004CA5 01A9               
8494 004CA5 01A9              L10C       anop 
8495 004CA5 01A9               
8496 004CA5 01A9 A9 0E                   lda  #Normal 
8497 004CA7 01AB 20 00 80                jsr  cout 
8498 004CAA 01AE               
8499 004CAA 01AE A9 20                   lda  #' ' 
8500 004CAC 01B0 20 00 80                jsr  cout 
8501 004CAF 01B3               
8502 004CAF 01B3 A9 1B                   lda  #MouseText 
8503 004CB1 01B5 20 00 80                jsr  cout 
8504 004CB4 01B8               
8505 004CB4 01B8 A9 5F                   lda  #'_' 
8506 004CB6 01BA 20 00 80                jsr  cout 
8507 004CB9 01BD               
8508 004CB9 01BD A9 A0                   lda  #' '+$80 
8509 004CBB 01BF A2 17                   ldx  #23 
8510 004CBD 01C1               
8511 004CBD 01C1              L10D       anop 
8512 004CBD 01C1               
8513 004CBD 01C1 20 00 80                jsr  cout 
8514 004CC0 01C4 CA                      dex 
8515 004CC1 01C5 D0 FA                   bne  L10D 
8516 004CC3 01C7               
8517 004CC3 01C7 A9 5F                   lda  #'_' 
8518 004CC5 01C9 20 00 80                jsr  cout 
8519 004CC8 01CC               
8520 004CC8 01CC              * Line 11 
8521 004CC8 01CC               
8522 004CC8 01CC 20 12 03                jsr  NextLine 
8523 004CCB 01CF               
8524 004CCB 01CF A9 5A                   lda  #'Z' 
8525 004CCD 01D1 20 00 80                jsr  cout 
8526 004CD0 01D4               
8527 004CD0 01D4 A9 DF                   lda  #'_'+$80 
8528 004CD2 01D6 A2 19                   ldx  #25 
8529 004CD4 01D8               
8530 004CD4 01D8              L11A       anop 
8531 004CD4 01D8               
8532 004CD4 01D8 20 00 80                jsr  cout 
8533 004CD7 01DB CA                      dex 
8534 004CD8 01DC D0 FA                   bne  L11A 
8535 004CDA 01DE               
8536 004CDA 01DE A9 5C                   lda  #'\' 
8537 004CDC 01E0 A2 0A                   ldx  #10 
8538 004CDE 01E2               
8539 004CDE 01E2              L11B       anop 
8540 004CDE 01E2               
8541 004CDE 01E2 20 00 80                jsr  cout 
8542 004CE1 01E5 CA                      dex 
8543 004CE2 01E6 D0 FA                   bne  L11B 
8544 004CE4 01E8               
8545 004CE4 01E8 A9 DF                   lda  #'_'+$80 
8546 004CE6 01EA A2 18                   ldx  #24 
8547 004CE8 01EC               
8548 004CE8 01EC              L11C       anop 
8549 004CE8 01EC               
8550 004CE8 01EC 20 00 80                jsr  cout 
8551 004CEB 01EF CA                      dex 
8552 004CEC 01F0 D0 FA                   bne  L11C 
8553 004CEE 01F2               
8554 004CEE 01F2 A9 5F                   lda  #'_' 
8555 004CF0 01F4 20 00 80                jsr  cout 
8556 004CF3 01F7               
8557 004CF3 01F7              * Exit 
8558 004CF3 01F7               
8559 004CF3 01F7 A9 18                   lda  #StdText 
8560 004CF5 01F9 20 00 80                jsr  cout 
8561 004CF8 01FC               
8562 004CF8 01FC 60                      rts 
8563 004CF9 01FD               
8564 004CF9 01FD                         Msb  On 
8565 004CF9 01FD C4 E9 F3 EB  Line2Text  dc   c'DiskMaker 8 v1.1',h'00' 
8566 004D0A 020E C3 EF F0 F9  Line3Text  dc   c'Copyright 2006 by Mark Percival',h'00' 
8567 004D2A 022E C3 EF EE F6  Line5Text  dc   c'Converts Universal Disk Image, DiskCopy 4.2, DiskCopy 6,' 
8568 004D62 0266 00                      dc   h'00' 
8569 004D63 0267 C4 CF D3 A0  Line6Text  dc   c'DOS Order 5.25" and ProDOS Order 5.25" images into',h'00' 
8570 004D96 029A E1 E3 F4 F5  Line7Text  dc   c'actual disks.  Please support the Apple II by paying',h'00' 
8571 004DCB 02CF F4 E8 E5 A0  Line8Text  dc   c'the $5 shareware fee.  See the documentation for details.' 
8572 004E04 0308 00                      dc   h'00' 
8573 004E05 0309 A0 A0 A0 CF  OkText     dc   c'   Ok   ',h'00' 
8574 004E0E 0312                         Msb  Off 
8575 004E0E 0312               
8576 004E0E 0312              NextLine   anop 
8577 004E0E 0312               
8578 004E0E 0312 A9 09                   lda  #10-1 
8579 004E10 0314 85 24                   sta  HTab 
8580 004E12 0316 E6 25                   inc  VTab 
8581 004E14 0318               
8582 004E14 0318 20 00 80                jsr  SetVTab 
8583 004E17 031B               
8584 004E17 031B 60                      rts 
8585 004E18 031C               
8586 004E18 031C              AboutUI    anop 
8587 004E18 031C               
8588 004E18 031C              ReturnKey  equ  $8D 
8589 004E18 031C              TabKey     equ  $89 
8590 004E18 031C               
8591 004E18 031C 9C 10 C0                stz  ClearKbd                Clear keyboard strobe 
8592 004E1B 031F               
8593 004E1B 031F              PollDev    anop 
8594 004E1B 031F               
8595 004E1B 031F 20 00 80                jsr  PlotMouse               Put mouse cursor on screen 
8596 004E1E 0322               
8597 004E1E 0322              PollDevLoop anop 
8598 004E1E 0322               
8599 004E1E 0322 AD 00 C0                lda  Keyboard                Get keypress 
8600 004E21 0325 10 03                   bpl  PollMouse               No keypress, check mouse 
8601 004E23 0327 4C 63 03                jmp  KeyDev 
8602 004E26 032A               
8603 004E26 032A              PollMouse  anop 
8604 004E26 032A               
8605 004E26 032A 20 00 80                jsr  ReadMouse               Readmouse 
8606 004E29 032D 4E 84 08                lsr  MouseX                  Put x and y mouse coordinates into 
8607 004E2C 0330 4E 86 08                lsr  MouseY                   0 to 79 and 0 to 23 range. 
8608 004E2F 0333 AD 8C 08                lda  MouseStat               Get mouse status 
8609 004E32 0336 89 20                   bit  #MouseMove              Move moved? 
8610 004E34 0338 D0 0A                   bne  MouseDev1               Yes, process mouse movement 
8611 004E36 033A 89 80                   bit  #CurrButton             Mouse button pressed? 
8612 004E38 033C D0 0B                   bne  MouseDev2               Yes, process mouse button press. 
8613 004E3A 033E 89 40                   bit  #PrevButton             Mouse button released? 
8614 004E3C 0340 D0 09                   bne  MouseDev3               Yes, process mouse button release. 
8615 004E3E 0342               
8616 004E3E 0342 80 DE                   bra  PollDevLoop             Check keyboard and mouse again. 
8617 004E40 0344               
8618 004E40 0344              * 
8619 004E40 0344              * Process mouse movement 
8620 004E40 0344              * 
8621 004E40 0344               
8622 004E40 0344              MouseDev1  anop 
8623 004E40 0344               
8624 004E40 0344 20 00 80                jsr  MoveMouse 
8625 004E43 0347 80 D9                   bra  PollDevLoop 
8626 004E45 0349               
8627 004E45 0349              * 
8628 004E45 0349              * Process mouse button press 
8629 004E45 0349              * 
8630 004E45 0349               
8631 004E45 0349              MouseDev2  anop 
8632 004E45 0349               
8633 004E45 0349 80 D7                   bra  PollDevLoop 
8634 004E47 034B               
8635 004E47 034B              * 
8636 004E47 034B              * Process mouse button release 
8637 004E47 034B              * 
8638 004E47 034B               
8639 004E47 034B              MouseDev3  anop 
8640 004E47 034B               
8641 004E47 034B AD 86 08                lda  MouseY 
8642 004E4A 034E C9 10                   cmp  #17-1 
8643 004E4C 0350 D0 0F                   bne  No 
8644 004E4E 0352 AD 84 08                lda  MouseX 
8645 004E51 0355 C9 24                   cmp  #37-1 
8646 004E53 0357 90 08                   bcc  No 
8647 004E55 0359 C9 2C                   cmp  #45-1 
8648 004E57 035B B0 04                   bcs  No 
8649 004E59 035D               
8650 004E59 035D 20 7F 03                jsr  AnimateBtn 
8651 004E5C 0360               
8652 004E5C 0360 60                      rts 
8653 004E5D 0361               
8654 004E5D 0361              No         anop 
8655 004E5D 0361               
8656 004E5D 0361 80 BF                   bra  PollDevLoop 
8657 004E5F 0363               
8658 004E5F 0363              * 
8659 004E5F 0363              * Process keyboard key press 
8660 004E5F 0363              * 
8661 004E5F 0363               
8662 004E5F 0363              KeyDev     anop 
8663 004E5F 0363               
8664 004E5F 0363 9C 10 C0                stz  ClearKbd                Clear keyboard strobe 
8665 004E62 0366               
8666 004E62 0366 C9 8D                   cmp  #ReturnKey 
8667 004E64 0368 F0 11                   beq  Return 
8668 004E66 036A C9 A0                   cmp  #' '+$80 
8669 004E68 036C F0 0D                   beq  Return 
8670 004E6A 036E C9 89                   cmp  #TabKey 
8671 004E6C 0370 F0 06                   beq  Tab 
8672 004E6E 0372               
8673 004E6E 0372 20 00 80                jsr  Beep 
8674 004E71 0375               
8675 004E71 0375 4C 22 03                jmp  PollDevLoop 
8676 004E74 0378               
8677 004E74 0378              Tab        anop 
8678 004E74 0378               
8679 004E74 0378 4C 22 03                jmp  PollDevLoop 
8680 004E77 037B               
8681 004E77 037B              Return     anop 
8682 004E77 037B               
8683 004E77 037B 20 7F 03                jsr  AnimateBtn 
8684 004E7A 037E               
8685 004E7A 037E 60                      rts 
8686 004E7B 037F               
8687 004E7B 037F              AnimateBtn anop 
8688 004E7B 037F               
8689 004E7B 037F A9 0E                   lda  #Normal 
8690 004E7D 0381 20 00 80                jsr  cout 
8691 004E80 0384               
8692 004E80 0384 A9 10                   lda  #17-1 
8693 004E82 0386 85 25                   sta  VTab 
8694 004E84 0388 A9 24                   lda  #37-1 
8695 004E86 038A 85 24                   sta  HTab 
8696 004E88 038C               
8697 004E88 038C 20 00 80                jsr  SetVTab 
8698 004E8B 038F               
8699 004E8B 038F A2 08                   ldx  #8 
8700 004E8D 0391 A0 00                   ldy  #0 
8701 004E8F 0393               
8702 004E8F 0393              AB01       anop 
8703 004E8F 0393               
8704 004E8F 0393 B9 09 03                lda  OkText,y 
8705 004E92 0396 20 00 80                jsr  cout 
8706 004E95 0399 C8                      iny 
8707 004E96 039A CA                      dex 
8708 004E97 039B D0 F6                   bne  AB01 
8709 004E99 039D               
8710 004E99 039D A9 FF                   lda  #$FF 
8711 004E9B 039F 20 A8 FC                jsr  Wait 
8712 004E9E 03A2               
8713 004E9E 03A2 A9 0F                   lda  #Inverse 
8714 004EA0 03A4 20 00 80                jsr  cout 
8715 004EA3 03A7               
8716 004EA3 03A7 A9 10                   lda  #17-1 
8717 004EA5 03A9 85 25                   sta  VTab 
8718 004EA7 03AB A9 24                   lda  #37-1 
8719 004EA9 03AD 85 24                   sta  HTab 
8720 004EAB 03AF               
8721 004EAB 03AF 20 00 80                jsr  SetVTab 
8722 004EAE 03B2               
8723 004EAE 03B2 A2 08                   ldx  #8 
8724 004EB0 03B4 A0 00                   ldy  #0 
8725 004EB2 03B6               
8726 004EB2 03B6              AB02       anop 
8727 004EB2 03B6               
8728 004EB2 03B6 B9 09 03                lda  OkText,y 
8729 004EB5 03B9 20 00 80                jsr  cout 
8730 004EB8 03BC C8                      iny 
8731 004EB9 03BD CA                      dex 
8732 004EBA 03BE D0 F6                   bne  AB02 
8733 004EBC 03C0               
8734 004EBC 03C0 A9 FF                   lda  #$FF 
8735 004EBE 03C2 20 A8 FC                jsr  Wait 
8736 004EC1 03C5               
8737 004EC1 03C5 A9 0E                   lda  #Normal 
8738 004EC3 03C7 20 00 80                jsr  cout 
8739 004EC6 03CA               
8740 004EC6 03CA 60                      rts 
8741 004EC7 03CB               
8742 004EC7 03CB              * Save / Restore Screen routine. 
8743 004EC7 03CB               
8744 004EC7 03CB              TextLine   anop                         Text screen line starting addresses 
8745 004EC7 03CB               
8746 004EC7 03CB 00 04        TextLine00 dc   i'$0400' 
8747 004EC9 03CD 80 04        TextLine01 dc   i'$0480' 
8748 004ECB 03CF 00 05        TextLine02 dc   i'$0500' 
8749 004ECD 03D1 80 05        TextLine03 dc   i'$0580' 
8750 004ECF 03D3 00 06        TextLine04 dc   i'$0600' 
8751 004ED1 03D5 80 06        TextLine05 dc   i'$0680' 
8752 004ED3 03D7 00 07        TextLine06 dc   i'$0700' 
8753 004ED5 03D9 80 07        TextLine07 dc   i'$0780' 
8754 004ED7 03DB 28 04        TextLine08 dc   i'$0428' 
8755 004ED9 03DD A8 04        TextLine09 dc   i'$04A8' 
8756 004EDB 03DF 28 05        TextLine10 dc   i'$0528' 
8757 004EDD 03E1 A8 05        TextLine11 dc   i'$05A8' 
8758 004EDF 03E3 28 06        TextLine12 dc   i'$0628' 
8759 004EE1 03E5 A8 06        TextLine13 dc   i'$06A8' 
8760 004EE3 03E7 28 07        TextLine14 dc   i'$0728' 
8761 004EE5 03E9 A8 07        TextLine15 dc   i'$07A8' 
8762 004EE7 03EB 50 04        TextLine16 dc   i'$0450' 
8763 004EE9 03ED D0 04        TextLine17 dc   i'$04D0' 
8764 004EEB 03EF 50 05        TextLine18 dc   i'$0550' 
8765 004EED 03F1 D0 05        TextLine19 dc   i'$05D0' 
8766 004EEF 03F3 50 06        TextLine20 dc   i'$0650' 
8767 004EF1 03F5 D0 06        TextLine21 dc   i'$06D0' 
8768 004EF3 03F7 50 07        TextLine22 dc   i'$0750' 
8769 004EF5 03F9 D0 07        TextLine23 dc   i'$07D0' 
8770 004EF7 03FB               
8771 004EF7 03FB              On80Store  equ  $C001 
8772 004EF7 03FB              Page1      equ  $C054 
8773 004EF7 03FB              Page2      equ  $C055 
8774 004EF7 03FB               
8775 004EF7 03FB 00           SaveRtn    ds   1 
8776 004EF8 03FC               
8777 004EF8 03FC 00           StartHTab  ds   1 
8778 004EF9 03FD 00           EndHTab    ds   1 
8779 004EFA 03FE 00           StartVTab  ds   1 
8780 004EFB 03FF 00           CurrLine   ds   1 
8781 004EFC 0400               
8782 004EFC 0400              * 
8783 004EFC 0400              * SaveScreen - save screen data under list box 
8784 004EFC 0400              * RestScreen - restore screen data under messagebox 
8785 004EFC 0400              * 
8786 004EFC 0400              * Ptr1 = screen data : Ptr2 = save buffer 
8787 004EFC 0400              * 
8788 004EFC 0400               
8789 004EFC 0400              SaveScreen anop 
8790 004EFC 0400               
8791 004EFC 0400 A9 01                   lda  #1 
8792 004EFE 0402 8D FB 03                sta  SaveRtn 
8793 004F01 0405 80 03                   bra  StartRtn 
8794 004F03 0407               
8795 004F03 0407              RestScreen anop 
8796 004F03 0407               
8797 004F03 0407 9C FB 03                stz  SaveRtn 
8798 004F06 040A               
8799 004F06 040A              StartRtn   anop 
8800 004F06 040A               
8801 004F06 040A 8D 01 C0                sta  On80Store               Make sure 80STORE is on. 
8802 004F09 040D               
8803 004F09 040D 18                      clc 
8804 004F0A 040E A9 09                   lda  #10-1                   HTab start 
8805 004F0C 0410 8D FC 03                sta  StartHTab 
8806 004F0F 0413 69 3D                   adc  #61                     # char wide 
8807 004F11 0415 8D FD 03                sta  EndHTab                 Ending HTab 
8808 004F14 0418               
8809 004F14 0418 38                      sec 
8810 004F15 0419 A9 07                   lda  #8-1                    Base VTab 
8811 004F17 041B 8D FE 03                sta  StartVTab 
8812 004F1A 041E 8D FF 03                sta  CurrLine 
8813 004F1D 0421               
8814 004F1D 0421 A9 00                   lda  #MessageBuf             Set save buffer address 
8815 004F1F 0423 85 80                   sta  Ptr2 
8816 004F21 0425 A9 12                   lda  #>MessageBuf 
8817 004F23 0427 85 81                   sta  Ptr2+1 
8818 004F25 0429               
8819 004F25 0429 A2 0B                   ldx  #11                     Max # of lines 
8820 004F27 042B               
8821 004F27 042B              SSLoop1    anop 
8822 004F27 042B               
8823 004F27 042B AD FF 03                lda  CurrLine 
8824 004F2A 042E 0A                      asl  a 
8825 004F2B 042F A8                      tay 
8826 004F2C 0430 B9 CB 03                lda  TextLine,y 
8827 004F2F 0433 85 06                   sta  Ptr1 
8828 004F31 0435 C8                      iny 
8829 004F32 0436 B9 CB 03                lda  TextLine,y 
8830 004F35 0439 85 07                   sta  Ptr1+1 
8831 004F37 043B               
8832 004F37 043B AC FC 03                ldy  StartHTab 
8833 004F3A 043E               
8834 004F3A 043E              SSLoop2    anop 
8835 004F3A 043E               
8836 004F3A 043E 5A                      phy 
8837 004F3B 043F 98                      tya 
8838 004F3C 0440 4A                      lsr  a 
8839 004F3D 0441 B0 05                   bcs  FromMain 
8840 004F3F 0443               
8841 004F3F 0443              FromAux    anop 
8842 004F3F 0443               
8843 004F3F 0443 8D 55 C0                sta  Page2 
8844 004F42 0446 80 03                   bra  GetChar 
8845 004F44 0448               
8846 004F44 0448              FromMain   anop 
8847 004F44 0448               
8848 004F44 0448 8D 54 C0                sta  Page1 
8849 004F47 044B               
8850 004F47 044B              GetChar    anop 
8851 004F47 044B               
8852 004F47 044B A8                      tay 
8853 004F48 044C AD FB 03                lda  SaveRtn 
8854 004F4B 044F F0 06                   beq  Restore 
8855 004F4D 0451               
8856 004F4D 0451 B1 06                   lda  (Ptr1),y 
8857 004F4F 0453 92 80                   sta  (Ptr2) 
8858 004F51 0455 80 04                   bra  Continue 
8859 004F53 0457               
8860 004F53 0457              Restore    anop 
8861 004F53 0457               
8862 004F53 0457 B2 80                   lda  (Ptr2) 
8863 004F55 0459 91 06                   sta  (Ptr1),y 
8864 004F57 045B               
8865 004F57 045B              Continue   anop 
8866 004F57 045B               
8867 004F57 045B 7A                      ply 
8868 004F58 045C               
8869 004F58 045C E6 80                   inc  Ptr2                    Increment save buffer pointer 
8870 004F5A 045E D0 02                   bne  NoOF 
8871 004F5C 0460               
8872 004F5C 0460 E6 81                   inc  Ptr2+1 
8873 004F5E 0462               
8874 004F5E 0462              NoOF       anop                         No overflow 
8875 004F5E 0462               
8876 004F5E 0462 C8                      iny 
8877 004F5F 0463 CC FD 03                cpy  EndHTab                 If y <= EndHTab, SSLoop2 to continue 
8878 004F62 0466 90 D6                   bcc  SSLoop2                  saving this line 
8879 004F64 0468 F0 D4                   beq  SSLoop2 
8880 004F66 046A               
8881 004F66 046A EE FF 03                inc  CurrLine                Move to next line 
8882 004F69 046D CA                      dex                          Another line? 
8883 004F6A 046E D0 BB                   bne  SSLoop1 
8884 004F6C 0470               
8885 004F6C 0470 AD 54 C0                lda  Page1                   Set back to Main for exit. 
8886 004F6F 0473               
8887 004F6F 0473 60                      rts 
8888 004F70 0474               
8889 004F70 0474                         End 
 
 
 
Local  Symbols
 
AB01       000393  AB02       0003B6  ABOUTUI    00031C  ANIMATEBTN 00037F   
CONTINUE   00045B  CURRLINE   0003FF  ENDHTAB    0003FD  FROMAUX    000443   
FROMMAIN   000448  GETCHAR    00044B  KEYDEV     000363  L10A       000182   
L10B       00019E  L10C       0001A9  L10D       0001C1  L11A       0001D8   
L11B       0001E2  L11C       0001EC  L1A        000029  L2A        000040   
L2B        000048  L2C        000053  L2D        000057  L3A        00006E   
L3B        000076  L3C        000081  L3D        000085  L4A        00009C   
L5A        0000B6  L5B        0000C1  L5C        0000C5  L6A        0000DF   
L6B        0000EA  L6C        0000EE  L7A        000108  L7B        000113   
L7C        000117  L8A        000131  L8B        00013C  L8C        000140   
L9A        000157  L9B        000161  L9C        00016B  LINE2TEXT  0001FD   
LINE3TEXT  00020E  LINE5TEXT  00022E  LINE6TEXT  000267  LINE7TEXT  00029A   
LINE8TEXT  0002CF  MOUSEDEV1  000344  MOUSEDEV2  000349  MOUSEDEV3  00034B   
NEXTLINE   000312  NO         000361  NOOF       000462  OKTEXT     000309   
ON80STORE  00C001  PAGE1      00C054  PAGE2      00C055  POLLDEV    00031F   
POLLDEVLOO 000322  POLLMOUSE  00032A  RESTORE    000457  RESTSCREEN 000407   
RETURN     00037B  RETURNKEY  00008D  SAVERTN    0003FB  SAVESCREEN 000400   
SHOWABOUT  000010  SSLOOP1    00042B  SSLOOP2    00043E  STARTHTAB  0003FC   
STARTRTN   00040A  STARTVTAB  0003FE  TAB        000378  TABKEY     000089   
TEXTLINE   0003CB  TEXTLINE00 0003CB  TEXTLINE01 0003CD  TEXTLINE02 0003CF   
TEXTLINE03 0003D1  TEXTLINE04 0003D3  TEXTLINE05 0003D5  TEXTLINE06 0003D7   
TEXTLINE07 0003D9  TEXTLINE08 0003DB  TEXTLINE09 0003DD  TEXTLINE10 0003DF   
TEXTLINE11 0003E1  TEXTLINE12 0003E3  TEXTLINE13 0003E5  TEXTLINE14 0003E7   
TEXTLINE15 0003E9  TEXTLINE16 0003EB  TEXTLINE17 0003ED  TEXTLINE18 0003EF   
TEXTLINE19 0003F1  TEXTLINE20 0003F3  TEXTLINE21 0003F5  TEXTLINE22 0003F7   
TEXTLINE23 0003F9   
8890 004F70 0000               
8891 004F70 0000              *          Making the disk image 
8892 004F70 0000               
8893 004F70 0000                         Copy ProcessImage.s 
8894 004F70 0000              ProcessImg Start 
8895 004F70 0000                         Using Menu2Vars 
8896 004F70 0000               
8897 004F70 0000                         Copy ProcessImage1.s 
8898 004F70 0000 20 22 00                jsr  InitVars 
8899 004F73 0003               
8900 004F73 0003              *          jsr  DebugData 
8901 004F73 0003               
8902 004F73 0003 20 4D 00                jsr  CheckSize               Check to see if image size matchs device 
8903 004F76 0006 D0 19                   bne  Canceled                selected. 
8904 004F78 0008               
8905 004F78 0008 20 EA 03                jsr  VerifyTarget            Make sure we can write to the device and 
8906 004F7B 000B D0 14                   bne  Canceled                format if necessary. 
8907 004F7D 000D               
8908 004F7D 000D 38                      sec 
8909 004F7E 000E AD 00 80                lda  EndBlock                Subtract 1 from EndBlock since block 
8910 004F81 0011 E9 01                   sbc  #$01                     numbers are zero based. 
8911 004F83 0013 8D 00 80                sta  EndBlock 
8912 004F86 0016 AD 01 80                lda  EndBlock+1 
8913 004F89 0019 E9 00                   sbc  #$00 
8914 004F8B 001B 8D 01 80                sta  EndBlock+1 
8915 004F8E 001E               
8916 004F8E 001E 20 ED 05                jsr  WriteImage 
8917 004F91 0021               
8918 004F91 0021              Canceled   anop 
8919 004F91 0021               
8920 004F91 0021 60                      rts 
8921 004F92 0022               
8922 004F92 0022              InitVars   anop 
8923 004F92 0022               
8924 004F92 0022 AD 00 80                lda  SelAddr 
8925 004F95 0025 85 06                   sta  Ptr1 
8926 004F97 0027 AD 01 80                lda  SelAddr+1 
8927 004F9A 002A 85 07                   sta  Ptr1+1 
8928 004F9C 002C               
8929 004F9C 002C A0 00                   ldy  #oUnitNo 
8930 004F9E 002E B1 06                   lda  (Ptr1),y 
8931 004FA0 0030 8D 48 00                sta  TargetUnit 
8932 004FA3 0033               
8933 004FA3 0033 A0 00                   ldy  #oSizeHex 
8934 004FA5 0035 B1 06                   lda  (Ptr1),y 
8935 004FA7 0037 8D 49 00                sta  TargetSize 
8936 004FAA 003A               
8937 004FAA 003A C8                      iny 
8938 004FAB 003B B1 06                   lda  (Ptr1),y 
8939 004FAD 003D 8D 4A 00                sta  TargetSize+1 
8940 004FB0 0040               
8941 004FB0 0040 A0 00                   ldy  #oDevType 
8942 004FB2 0042 B1 06                   lda  (Ptr1),y 
8943 004FB4 0044 8D 4B 00                sta  DevType 
8944 004FB7 0047               
8945 004FB7 0047 60                      rts 
8946 004FB8 0048               
8947 004FB8 0048 00           TargetUnit ds   1 
8948 004FB9 0049 00 00        TargetSize ds   2 
8949 004FBB 004B 00           DevType    ds   1 
8950 004FBC 004C 00           Volume     ds   1 
8951 004FBD 004D               
8952 004FBD 004D              * Test for image size and destination size to be same. 
8953 004FBD 004D               
8954 004FBD 004D              CheckSize  anop 
8955 004FBD 004D               
8956 004FBD 004D AD 00 80                lda  ImageSize               Take current image size as default 
8957 004FC0 0050 8D 00 80                sta  EndBlock                number of blocks to write. 
8958 004FC3 0053 AD 01 80                lda  ImageSize+1 
8959 004FC6 0056 8D 01 80                sta  EndBlock+1 
8960 004FC9 0059               
8961 004FC9 0059 AD 4A 00                lda  TargetSize+1 
8962 004FCC 005C CD 01 80                cmp  ImageSize+1 
8963 004FCF 005F 90 07                   bcc  TooSmall 
8964 004FD1 0061 F0 0A                   beq  SameSize 
8965 004FD3 0063               
8966 004FD3 0063              TooBig     anop 
8967 004FD3 0063               
8968 004FD3 0063 20 7A 00                jsr  BigBox 
8969 004FD6 0066 80 11                   bra  CheckExit 
8970 004FD8 0068               
8971 004FD8 0068 20 D8 00     TooSmall   jsr  SmallBox 
8972 004FDB 006B 80 0C                   bra  CheckExit 
8973 004FDD 006D               
8974 004FDD 006D AD 49 00     SameSize   lda  TargetSize 
8975 004FE0 0070 CD 00 80                cmp  ImageSize 
8976 004FE3 0073 90 F3                   bcc  TooSmall 
8977 004FE5 0075 F0 02                   beq  CheckExit 
8978 004FE7 0077 80 EA                   bra  TooBig 
8979 004FE9 0079               
8980 004FE9 0079              CheckExit  anop 
8981 004FE9 0079               
8982 004FE9 0079 60                      rts 
8983 004FEA 007A               
8984 004FEA 007A              BigBox     anop 
8985 004FEA 007A               
8986 004FEA 007A A9 89                   lda  #MsgBig 
8987 004FEC 007C 85 82                   sta  MsgPtr 
8988 004FEE 007E A9 00                   lda  #>MsgBig+1 
8989 004FF0 0080 85 83                   sta  MsgPtr+1 
8990 004FF2 0082               
8991 004FF2 0082 20 00 80                jsr  Beep 
8992 004FF5 0085               
8993 004FF5 0085 20 00 80                jsr  MsgOkCan2 
8994 004FF8 0088               
8995 004FF8 0088 60                      rts 
8996 004FF9 0089               
8997 004FF9 0089 54 68 65 20  MsgBig     dc   c'The destination disk is bigger than necessary.',h'0D' 
8998 005028 00B8 44 6F 20 79             dc   c'Do you wish to continue anyway?',h'00' 
8999 005048 00D8               
9000 005048 00D8              SmallBox   anop 
9001 005048 00D8               
9002 005048 00D8 AD 49 00                lda  TargetSize              Default size is set yo ImageSize at this 
9003 00504B 00DB 8D 00 80                sta  EndBlock                point and since the device we're writing 
9004 00504E 00DE AD 4A 00                lda  TargetSize+1            to isn't big enough, wen need to fall 
9005 005051 00E1 8D 01 80                sta  EndBlock+1              short of writing the entire image. 
9006 005054 00E4               
9007 005054 00E4 A9 F3                   lda  #MsgSmall 
9008 005056 00E6 85 82                   sta  MsgPtr 
9009 005058 00E8 A9 00                   lda  #>MsgSmall+1 
9010 00505A 00EA 85 83                   sta  MsgPtr+1 
9011 00505C 00EC               
9012 00505C 00EC 20 00 80                jsr  Beep 
9013 00505F 00EF               
9014 00505F 00EF 20 00 80                jsr  MsgOkCan2 
9015 005062 00F2               
9016 005062 00F2 60                      rts 
9017 005063 00F3               
9018 005063 00F3 54 68 65 20  MsgSmall   dc   c'The destination disk is too small.',h'0D' 
9019 005086 0116 44 6F 20 79             dc   c'Do you wish to continue anyway?',h'00' 
9020 0050A6 0136               
9021 0050A6 0136              SuccessBox anop 
9022 0050A6 0136               
9023 0050A6 0136 20 00 80                jsr  Beep 
9024 0050A9 0139               
9025 0050A9 0139 A9 BF                   lda  #$BF 
9026 0050AB 013B 20 A8 FC                jsr  Wait 
9027 0050AE 013E               
9028 0050AE 013E 20 00 80                jsr  Beep 
9029 0050B1 0141               
9030 0050B1 0141 A9 BF                   lda  #$BF 
9031 0050B3 0143 20 A8 FC                jsr  Wait 
9032 0050B6 0146               
9033 0050B6 0146 20 00 80                jsr  Beep 
9034 0050B9 0149               
9035 0050B9 0149 AD 4B 00                lda  DevType 
9036 0050BC 014C C9 00                   cmp  #RemapDev               Can't boot a remapped volume 
9037 0050BE 014E F0 3B                   beq  NoBoot 
9038 0050C0 0150               
9039 0050C0 0150 AD 48 00                lda  TargetUnit 
9040 0050C3 0153 30 36                   bmi  NoBoot                  Can't boot drive 2 
9041 0050C5 0155               
9042 0050C5 0155              Bootable   anop 
9043 0050C5 0155               
9044 0050C5 0155 A9 BF                   lda  #MsgBoot 
9045 0050C7 0157 85 82                   sta  MsgPtr 
9046 0050C9 0159 A9 01                   lda  #>MsgBoot 
9047 0050CB 015B 85 83                   sta  MsgPtr+1 
9048 0050CD 015D               
9049 0050CD 015D 20 00 80                jsr  MsgBootCan 
9050 0050D0 0160 D0 28                   bne  BootExit                Not booting disk 
9051 0050D2 0162               
9052 0050D2 0162              CheckDisk  anop 
9053 0050D2 0162               
9054 0050D2 0162 AD 48 00                lda  TargetUnit 
9055 0050D5 0165 8D F7 08                sta  onlineUnit 
9056 0050D8 0168               
9057 0050D8 0168 20 00 80                jsr  MLIOnline               Make sure disk is still there. 
9058 0050DB 016B               
9059 0050DB 016B C9 27                   cmp  #$27                    IO Error? 
9060 0050DD 016D F0 28                   beq  WhereDisk 
9061 0050DF 016F               
9062 0050DF 016F C9 2F                   cmp  #$2F                    Disk offline? 
9063 0050E1 0171 F0 24                   beq  WhereDisk 
9064 0050E3 0173               
9065 0050E3 0173 20 58 FC                jsr  Home                    We are good so setup pointer to boot. 
9066 0050E6 0176               
9067 0050E6 0176 18                      clc 
9068 0050E7 0177 AD 48 00                lda  TargetUnit 
9069 0050EA 017A 4A                      lsr  a 
9070 0050EB 017B 4A                      lsr  a 
9071 0050EC 017C 4A                      lsr  a 
9072 0050ED 017D 4A                      lsr  a 
9073 0050EE 017E 09 C0                   ora  #$C0 
9074 0050F0 0180               
9075 0050F0 0180 85 07                   sta  Ptr1+1 
9076 0050F2 0182 64 06                   stz  Ptr1 
9077 0050F4 0184               
9078 0050F4 0184 A2 FF                   ldx  #$FF                    POP all address off stack prior to boot 
9079 0050F6 0186 9A                      txs 
9080 0050F7 0187               
9081 0050F7 0187 6C 06 00                jmp  (Ptr1)                  Boot 
9082 0050FA 018A               
9083 0050FA 018A              BootExit   anop 
9084 0050FA 018A               
9085 0050FA 018A 60                      rts 
9086 0050FB 018B               
9087 0050FB 018B              NoBoot     anop 
9088 0050FB 018B               
9089 0050FB 018B A9 A5                   lda  #MsgNoBoot 
9090 0050FD 018D 85 82                   sta  MsgPtr 
9091 0050FF 018F A9 01                   lda  #>MsgNoBoot 
9092 005101 0191 85 83                   sta  MsgPtr+1 
9093 005103 0193               
9094 005103 0193 20 00 80                jsr  MsgOk 
9095 005106 0196               
9096 005106 0196 60                      rts 
9097 005107 0197               
9098 005107 0197              WhereDisk  anop 
9099 005107 0197               
9100 005107 0197 A9 FA                   lda  #MsgWhere 
9101 005109 0199 85 82                   sta  MsgPtr 
9102 00510B 019B A9 01                   lda  #>MsgWhere 
9103 00510D 019D 85 83                   sta  MsgPtr+1 
9104 00510F 019F               
9105 00510F 019F 20 00 80                jsr  MsgRetCan1 
9106 005112 01A2 F0 BE                   beq  CheckDisk               Retry 
9107 005114 01A4               
9108 005114 01A4 60                      rts                          or cancel. 
9109 005115 01A5               
9110 005115 01A5 44 69 73 6B  MsgNoBoot  dc   c'Disk created',h'0D' 
9111 005122 01B2 73 75 63 63             dc   c'successfully',h'00' 
9112 00512F 01BF               
9113 00512F 01BF 20 20 44 69  MsgBoot    dc   c'  Disk created successfully',h'0D' 
9114 00514B 01DB 44 6F 20 79             dc   c'Do you wish to boot this disk?',h'00' 
9115 00516A 01FA               
9116 00516A 01FA 45 72 72 6F  MsgWhere   dc   c'Error atempting to boot disk',h'0D' 
9117 005187 0217 50 6C 65 61             dc   c'Please verify disk and retry',h'00' 
9118 0051A4 0234               
9119 0051A4 0234              PaintBox   anop 
9120 0051A4 0234               
9121 0051A4 0234 A9 1B                   lda  #MouseText 
9122 0051A6 0236 20 00 80                jsr  cout 
9123 0051A9 0239               
9124 0051A9 0239              * First line 
9125 0051A9 0239               
9126 0051A9 0239 A9 03                   lda  #4-1 
9127 0051AB 023B 85 25                   sta  VTab 
9128 0051AD 023D               
9129 0051AD 023D A9 19                   lda  #26-1 
9130 0051AF 023F 85 24                   sta  HTab 
9131 0051B1 0241               
9132 0051B1 0241 20 00 80                jsr  SetVTab 
9133 0051B4 0244               
9134 0051B4 0244 A9 5A                   lda  #'Z' 
9135 0051B6 0246 20 00 80                jsr  cout 
9136 0051B9 0249               
9137 0051B9 0249 A2 1B                   ldx  #27 
9138 0051BB 024B A9 4C                   lda  #'L' 
9139 0051BD 024D               
9140 0051BD 024D              BP01       anop 
9141 0051BD 024D               
9142 0051BD 024D 20 00 80                jsr  cout 
9143 0051C0 0250 CA                      dex 
9144 0051C1 0251 D0 FA                   bne  BP01 
9145 0051C3 0253               
9146 0051C3 0253 A9 5F                   lda  #'_' 
9147 0051C5 0255 20 00 80                jsr  cout 
9148 0051C8 0258               
9149 0051C8 0258              * Second line 
9150 0051C8 0258               
9151 0051C8 0258 A9 19                   lda  #26-1 
9152 0051CA 025A 85 24                   sta  HTab 
9153 0051CC 025C E6 25                   inc  VTab 
9154 0051CE 025E               
9155 0051CE 025E 20 00 80                jsr  SetVTab 
9156 0051D1 0261               
9157 0051D1 0261 A9 5A                   lda  #'Z' 
9158 0051D3 0263 20 00 80                jsr  cout 
9159 0051D6 0266               
9160 0051D6 0266 A9 A0                   lda  #' '+$80 
9161 0051D8 0268 20 00 80                jsr  cout 
9162 0051DB 026B               
9163 0051DB 026B A0 00                   ldy  #0 
9164 0051DD 026D A2 09                   ldx  #9 
9165 0051DF 026F               
9166 0051DF 026F              BP02       anop 
9167 0051DF 026F               
9168 0051DF 026F B9 1B 03                lda  Text1,y 
9169 0051E2 0272 20 00 80                jsr  cout 
9170 0051E5 0275 C8                      iny 
9171 0051E6 0276 CA                      dex 
9172 0051E7 0277 D0 F6                   bne  BP02 
9173 0051E9 0279               
9174 0051E9 0279 AE 40 08                ldx  Path 
9175 0051EC 027C A0 00                   ldy  #0 
9176 0051EE 027E               
9177 0051EE 027E              BP03       anop 
9178 0051EE 027E               
9179 0051EE 027E C8                      iny 
9180 0051EF 027F B9 40 08                lda  Path,y 
9181 0051F2 0282 09 80                   ora  #$80 
9182 0051F4 0284 20 00 80                jsr  cout 
9183 0051F7 0287 CA                      dex 
9184 0051F8 0288 D0 F4                   bne  BP03 
9185 0051FA 028A               
9186 0051FA 028A A9 A7                   lda  #"'"+$80 
9187 0051FC 028C 20 00 80                jsr  cout 
9188 0051FF 028F               
9189 0051FF 028F 38                      sec 
9190 005200 0290 A9 0F                   lda  #15 
9191 005202 0292 ED 40 08                sbc  Path 
9192 005205 0295               
9193 005205 0295 1A                      ina 
9194 005206 0296 AA                      tax 
9195 005207 0297 A9 A0                   lda  #' '+$80 
9196 005209 0299               
9197 005209 0299              BP04       anop 
9198 005209 0299               
9199 005209 0299 20 00 80                jsr  cout 
9200 00520C 029C CA                      dex 
9201 00520D 029D D0 FA                   bne  BP04 
9202 00520F 029F               
9203 00520F 029F A9 5F                   lda  #'_' 
9204 005211 02A1 20 00 80                jsr  cout 
9205 005214 02A4               
9206 005214 02A4              * Third line 
9207 005214 02A4               
9208 005214 02A4 A9 19                   lda  #26-1 
9209 005216 02A6 85 24                   sta  HTab 
9210 005218 02A8 E6 25                   inc  VTab 
9211 00521A 02AA               
9212 00521A 02AA 20 00 80                jsr  SetVTab 
9213 00521D 02AD               
9214 00521D 02AD A9 5A                   lda  #'Z' 
9215 00521F 02AF 20 00 80                jsr  cout 
9216 005222 02B2               
9217 005222 02B2 A9 A0                   lda  #' '+$80 
9218 005224 02B4 20 00 80                jsr  cout 
9219 005227 02B7               
9220 005227 02B7 A2 19                   ldx  #25 
9221 005229 02B9 A9 DF                   lda  #'_'+$80 
9222 00522B 02BB               
9223 00522B 02BB              BP05       anop 
9224 00522B 02BB               
9225 00522B 02BB 20 00 80                jsr  cout 
9226 00522E 02BE CA                      dex 
9227 00522F 02BF D0 FA                   bne  BP05 
9228 005231 02C1               
9229 005231 02C1 A9 A0                   lda  #' '+$80 
9230 005233 02C3 20 00 80                jsr  cout 
9231 005236 02C6               
9232 005236 02C6 A9 5F                   lda  #'_' 
9233 005238 02C8 20 00 80                jsr  cout 
9234 00523B 02CB               
9235 00523B 02CB              * Fourth line 
9236 00523B 02CB               
9237 00523B 02CB A9 19                   lda  #26-1 
9238 00523D 02CD 85 24                   sta  HTab 
9239 00523F 02CF E6 25                   inc  VTab 
9240 005241 02D1               
9241 005241 02D1 20 00 80                jsr  SetVTab 
9242 005244 02D4               
9243 005244 02D4 A9 5A                   lda  #'Z' 
9244 005246 02D6 20 00 80                jsr  cout 
9245 005249 02D9 20 00 80                jsr  cout 
9246 00524C 02DC               
9247 00524C 02DC A2 19                   ldx  #25 
9248 00524E 02DE A9 A0                   lda  #' '+$80 
9249 005250 02E0               
9250 005250 02E0              BP06       anop 
9251 005250 02E0               
9252 005250 02E0 20 00 80                jsr  cout 
9253 005253 02E3 CA                      dex 
9254 005254 02E4 D0 FA                   bne  BP06 
9255 005256 02E6               
9256 005256 02E6 A9 5F                   lda  #'_' 
9257 005258 02E8 20 00 80                jsr  cout 
9258 00525B 02EB 20 00 80                jsr  cout 
9259 00525E 02EE               
9260 00525E 02EE              * Fifth line 
9261 00525E 02EE               
9262 00525E 02EE A9 19                   lda  #26-1 
9263 005260 02F0 85 24                   sta  HTab 
9264 005262 02F2 E6 25                   inc  VTab 
9265 005264 02F4               
9266 005264 02F4 20 00 80                jsr  SetVTab 
9267 005267 02F7               
9268 005267 02F7 A9 5A                   lda  #'Z' 
9269 005269 02F9 20 00 80                jsr  cout 
9270 00526C 02FC               
9271 00526C 02FC A9 DF                   lda  #'_'+$80 
9272 00526E 02FE 20 00 80                jsr  cout 
9273 005271 0301               
9274 005271 0301 A2 19                   ldx  #25 
9275 005273 0303 A9 5C                   lda  #'\' 
9276 005275 0305               
9277 005275 0305              BP07       anop 
9278 005275 0305               
9279 005275 0305 20 00 80                jsr  cout 
9280 005278 0308 CA                      dex 
9281 005279 0309 D0 FA                   bne  BP07 
9282 00527B 030B               
9283 00527B 030B A9 DF                   lda  #'_'+$80 
9284 00527D 030D 20 00 80                jsr  cout 
9285 005280 0310               
9286 005280 0310 A9 5F                   lda  #'_' 
9287 005282 0312 20 00 80                jsr  cout 
9288 005285 0315               
9289 005285 0315 A9 18                   lda  #StdText 
9290 005287 0317 20 00 80                jsr  cout 
9291 00528A 031A               
9292 00528A 031A 60                      rts 
9293 00528B 031B               
9294 00528B 031B                         Msb  On 
9295 00528B 031B D7 F2 E9 F4  Text1      dc   c"Writing '" 
9296 005294 0324                         Msb  Off 
9297 005294 0324               
9298 005294 0324              ClearBox   anop 
9299 005294 0324               
9300 005294 0324 A9 03                   lda  #4-1 
9301 005296 0326 85 25                   sta  VTab 
9302 005298 0328               
9303 005298 0328 20 00 80                jsr  SetVTab 
9304 00529B 032B               
9305 00529B 032B A2 05                   ldx  #5                      5 lines to erase 
9306 00529D 032D               
9307 00529D 032D              CB01       anop 
9308 00529D 032D               
9309 00529D 032D A9 19                   lda  #26-1 
9310 00529F 032F 85 24                   sta  HTab 
9311 0052A1 0331               
9312 0052A1 0331 A0 1D                   ldy  #29                     29 characters per line 
9313 0052A3 0333               
9314 0052A3 0333 A9 A0                   lda  #' '+$80 
9315 0052A5 0335               
9316 0052A5 0335              CB02       anop 
9317 0052A5 0335               
9318 0052A5 0335 20 00 80                jsr  cout 
9319 0052A8 0338 88                      dey 
9320 0052A9 0339 D0 FA                   bne  CB02 
9321 0052AB 033B               
9322 0052AB 033B E6 25                   inc  VTab 
9323 0052AD 033D 20 00 80                jsr  SetVTab 
9324 0052B0 0340               
9325 0052B0 0340 CA                      dex 
9326 0052B1 0341 D0 EA                   bne  CB01 
9327 0052B3 0343               
9328 0052B3 0343 60                      rts 
9329 0052B4 0344               
9330 0052B4 0344              ShowFormat anop 
9331 0052B4 0344               
9332 0052B4 0344              * First line. 
9333 0052B4 0344               
9334 0052B4 0344 A9 0B                   lda  #12-1 
9335 0052B6 0346 85 25                   sta  VTab 
9336 0052B8 0348 A9 1F                   lda  #32-1 
9337 0052BA 034A 85 24                   sta  HTab 
9338 0052BC 034C               
9339 0052BC 034C 20 00 80                jsr  SetVTab 
9340 0052BF 034F               
9341 0052BF 034F A9 1B                   lda  #MouseText 
9342 0052C1 0351 20 00 80                jsr  cout 
9343 0052C4 0354               
9344 0052C4 0354 A9 5A                   lda  #'Z' 
9345 0052C6 0356 20 00 80                jsr  cout 
9346 0052C9 0359               
9347 0052C9 0359 A2 10                   ldx  #16 
9348 0052CB 035B A9 4C                   lda  #'L' 
9349 0052CD 035D               
9350 0052CD 035D              SF01       anop 
9351 0052CD 035D               
9352 0052CD 035D 20 00 80                jsr  cout 
9353 0052D0 0360 CA                      dex 
9354 0052D1 0361 D0 FA                   bne  SF01 
9355 0052D3 0363               
9356 0052D3 0363 A9 5F                   lda  #'_' 
9357 0052D5 0365 20 00 80                jsr  cout 
9358 0052D8 0368               
9359 0052D8 0368              * Second line 
9360 0052D8 0368               
9361 0052D8 0368 E6 25                   inc  VTab 
9362 0052DA 036A A9 1F                   lda  #32-1 
9363 0052DC 036C 85 24                   sta  HTab 
9364 0052DE 036E 20 00 80                jsr  SetVTab 
9365 0052E1 0371               
9366 0052E1 0371 A9 5A                   lda  #'Z' 
9367 0052E3 0373 20 00 80                jsr  cout 
9368 0052E6 0376               
9369 0052E6 0376 A2 03                   ldx  #3 
9370 0052E8 0378 A9 A0                   lda  #' '+$80 
9371 0052EA 037A               
9372 0052EA 037A 20 00 80     SF02       jsr  cout 
9373 0052ED 037D CA                      dex 
9374 0052EE 037E D0 FA                   bne  SF02 
9375 0052F0 0380               
9376 0052F0 0380 A0 00                   ldy  #0 
9377 0052F2 0382 A2 0A                   ldx  #10 
9378 0052F4 0384               
9379 0052F4 0384              SF03       anop 
9380 0052F4 0384               
9381 0052F4 0384 B9 C0 03                lda  FmtMsg,y 
9382 0052F7 0387 20 00 80                jsr  cout 
9383 0052FA 038A C8                      iny 
9384 0052FB 038B CA                      dex 
9385 0052FC 038C D0 F6                   bne  SF03 
9386 0052FE 038E               
9387 0052FE 038E A2 03                   ldx  #3 
9388 005300 0390 A9 A0                   lda  #' '+$80 
9389 005302 0392               
9390 005302 0392              SF04       anop 
9391 005302 0392               
9392 005302 0392 20 00 80                jsr  cout 
9393 005305 0395 CA                      dex 
9394 005306 0396 D0 FA                   bne  SF04 
9395 005308 0398               
9396 005308 0398 A9 5F                   lda  #'_' 
9397 00530A 039A 20 00 80                jsr  cout 
9398 00530D 039D               
9399 00530D 039D              * Third line 
9400 00530D 039D               
9401 00530D 039D E6 25                   inc  VTab 
9402 00530F 039F A9 1F                   lda  #32-1 
9403 005311 03A1 85 24                   sta  HTab 
9404 005313 03A3               
9405 005313 03A3 20 00 80                jsr  SetVTab 
9406 005316 03A6               
9407 005316 03A6 A9 5A                   lda  #'Z' 
9408 005318 03A8 20 00 80                jsr  cout 
9409 00531B 03AB               
9410 00531B 03AB A2 10                   ldx  #16 
9411 00531D 03AD A9 DF                   lda  #'_'+$80 
9412 00531F 03AF               
9413 00531F 03AF              SF05       anop 
9414 00531F 03AF               
9415 00531F 03AF 20 00 80                jsr  cout 
9416 005322 03B2 CA                      dex 
9417 005323 03B3 D0 FA                   bne  SF05 
9418 005325 03B5               
9419 005325 03B5 A9 5F                   lda  #'_' 
9420 005327 03B7 20 00 80                jsr  cout 
9421 00532A 03BA               
9422 00532A 03BA A9 18                   lda  #StdText 
9423 00532C 03BC 20 00 80                jsr  cout 
9424 00532F 03BF               
9425 00532F 03BF 60                      rts 
9426 005330 03C0               
9427 005330 03C0                         Msb  On 
9428 005330 03C0 C6 EF F2 ED  FmtMsg     dc   c'Formatting' 
9429 00533A 03CA                         Msb  Off 
9430 00533A 03CA               
9431 00533A 03CA              ClrFormat  anop 
9432 00533A 03CA               
9433 00533A 03CA A9 0B                   lda  #12-1 
9434 00533C 03CC 85 25                   sta  VTab 
9435 00533E 03CE               
9436 00533E 03CE 20 00 80                jsr  SetVTab 
9437 005341 03D1               
9438 005341 03D1 A2 03                   ldx  #3                      3 lines to erase 
9439 005343 03D3               
9440 005343 03D3              CF01       anop 
9441 005343 03D3               
9442 005343 03D3 A9 1F                   lda  #32-1 
9443 005345 03D5 85 24                   sta  HTab 
9444 005347 03D7               
9445 005347 03D7 A0 12                   ldy  #18                     18 characters per line 
9446 005349 03D9               
9447 005349 03D9 A9 A0                   lda  #' '+$80 
9448 00534B 03DB               
9449 00534B 03DB              CF02       anop 
9450 00534B 03DB               
9451 00534B 03DB 20 00 80                jsr  cout 
9452 00534E 03DE 88                      dey 
9453 00534F 03DF D0 FA                   bne  CF02 
9454 005351 03E1               
9455 005351 03E1 E6 25                   inc  VTab 
9456 005353 03E3 20 00 80                jsr  SetVTab 
9457 005356 03E6               
9458 005356 03E6 CA                      dex 
9459 005357 03E7 D0 EA                   bne  CF01 
9460 005359 03E9               
9461 005359 03E9 60                      rts 
9462 00535A 03EA               
9463 00535A 03EA              * DebugData  anop 
9464 00535A 03EA               
9465 00535A 03EA              *          lda  #30-1 
9466 00535A 03EA              *          sta  HTab 
9467 00535A 03EA              *          lda  #18-1 
9468 00535A 03EA              *          sta  VTab 
9469 00535A 03EA              * 
9470 00535A 03EA              *          jsr  SetVTab 
9471 00535A 03EA              * 
9472 00535A 03EA              *          lda  #'S'+$80 
9473 00535A 03EA              *          jsr  cout 
9474 00535A 03EA              * 
9475 00535A 03EA              *          lda  #'='+$80 
9476 00535A 03EA              *          jsr  cout 
9477 00535A 03EA              * 
9478 00535A 03EA              *          lda  #'$'+$80 
9479 00535A 03EA              *          jsr  cout 
9480 00535A 03EA              * 
9481 00535A 03EA              *          lda  ImageSize+1 
9482 00535A 03EA              *          jsr  PrByte 
9483 00535A 03EA              * 
9484 00535A 03EA              *          lda  ImageSize 
9485 00535A 03EA              *          jsr  PrByte 
9486 00535A 03EA              * 
9487 00535A 03EA              *          lda  #' '+$80 
9488 00535A 03EA              *          jsr  cout 
9489 00535A 03EA              *          jsr  cout 
9490 00535A 03EA              * 
9491 00535A 03EA              *          lda  #'T'+$80 
9492 00535A 03EA              *          jsr  cout 
9493 00535A 03EA              * 
9494 00535A 03EA              *          lda  #'='+$80 
9495 00535A 03EA              *          jsr  cout 
9496 00535A 03EA              * 
9497 00535A 03EA              *          lda  #'$'+$80 
9498 00535A 03EA              *          jsr  cout 
9499 00535A 03EA              * 
9500 00535A 03EA              *          lda  TargetUnit 
9501 00535A 03EA              *          jsr  PrByte 
9502 00535A 03EA              * 
9503 00535A 03EA              *          lda  #' '+$80 
9504 00535A 03EA              *          jsr  cout 
9505 00535A 03EA              * 
9506 00535A 03EA              *          lda  #'$'+$80 
9507 00535A 03EA              *          jsr  cout 
9508 00535A 03EA              * 
9509 00535A 03EA              *          lda  TargetSize+1 
9510 00535A 03EA              *          jsr  PrByte 
9511 00535A 03EA              *          lda  TargetSize 
9512 00535A 03EA              *          jsr  PrByte 
9513 00535A 03EA              * 
9514 00535A 03EA              *          lda  #' '+$80 
9515 00535A 03EA              *          jsr  cout 
9516 00535A 03EA              * 
9517 00535A 03EA              *          lda  DevType 
9518 00535A 03EA              *          jsr  PrHex 
9519 00535A 03EA              * 
9520 00535A 03EA              *          rts 
9521 00535A 03EA               
9522 00535A 03EA              VerifyTarget anop 
9523 00535A 03EA               
9524 00535A 03EA 20 E5 08                jsr  GetVolNum               Get DOS 3.3 volume number 
9525 00535D 03ED               
9526 00535D 03ED              ReVerify   anop 
9527 00535D 03ED               
9528 00535D 03ED AD 48 00                lda  TargetUnit 
9529 005360 03F0 8D F7 08                sta  onlineUnit 
9530 005363 03F3               
9531 005363 03F3 20 00 80                jsr  MLIOnline               Check status of target 
9532 005366 03F6               
9533 005366 03F6 C9 2F                   cmp  #$2F                    *** Device off-line error *** 
9534 005368 03F8 D0 07                   bne  VT01 
9535 00536A 03FA               
9536 00536A 03FA 20 69 04                jsr  OffLine 
9537 00536D 03FD D0 69                   bne  VTExit                  He decided to Cancel 
9538 00536F 03FF 80 EC                   bra  ReVerify                Retry 
9539 005371 0401               
9540 005371 0401              VT01       anop 
9541 005371 0401               
9542 005371 0401 AC 62 C0                ldy  OptionKey               Option key held? 
9543 005374 0404               
9544 005374 0404 30 04                   bmi  VT01a                   Force a format 
9545 005376 0406               
9546 005376 0406 C9 27                   cmp  #$27                    IO Error (unformatted?) 
9547 005378 0408 D0 19                   bne  VT02 
9548 00537A 040A               
9549 00537A 040A              VT01a      anop 
9550 00537A 040A               
9551 00537A 040A AC 4C 00                ldy  Volume                  DOS 3.3 volume number if 0. 
9552 00537D 040D D0 05                   bne  VT01b 
9553 00537F 040F               
9554 00537F 040F 20 1F 05                jsr  FormatReq 
9555 005382 0412 D0 54                   bne  VTExit                  He canceled format 
9556 005384 0414               
9557 005384 0414              VT01b      anop 
9558 005384 0414               
9559 005384 0414 20 44 03                jsr  ShowFormat              Formatting message 
9560 005387 0417 20 84 05                jsr  FormatDev               Format device. 
9561 00538A 041A 08                      php                          Save error status. 
9562 00538B 041B 20 CA 03                jsr  ClrFormat               Clear formatting message. 
9563 00538E 041E 28                      plp                          Restore error status. 
9564 00538F 041F D0 47                   bne  VTExit                  Formatting error. 
9565 005391 0421               
9566 005391 0421 80 CA                   bra  ReVerify                Check to see if volume is now ok. 
9567 005393 0423               
9568 005393 0423              VT02       anop 
9569 005393 0423               
9570 005393 0423 C9 52                   cmp  #$52                    Non-ProDOS disk 
9571 005395 0425 D0 07                   bne  VT02a                   No, check for ProDOS disk... 
9572 005397 0427               
9573 005397 0427 AC 4C 00                ldy  Volume                  Yes, look if DOS 3.3 
9574 00539A 042A D0 E8                   bne  VT01b                   DOS 3.3 so format disk. 
9575 00539C 042C               
9576 00539C 042C F0 3A                   beq  VTExit                  Always taken 
9577 00539E 042E               
9578 00539E 042E              VT02a      anop 
9579 00539E 042E               
9580 00539E 042E C9 00                   cmp  #0                      ProDOS disk 
9581 0053A0 0430 F0 2C                   beq  VT03 
9582 0053A2 0432               
9583 0053A2 0432 A9 3F                   lda  #MsgMLI                 Other MLI error 
9584 0053A4 0434 85 82                   sta  MsgPtr 
9585 0053A6 0436 A9 04                   lda  #>MsgMLI 
9586 0053A8 0438 85 83                   sta  MsgPtr+1 
9587 0053AA 043A               
9588 0053AA 043A 20 00 80                jsr  MsgOk 
9589 0053AD 043D               
9590 0053AD 043D 80 29                   bra  VTExit 
9591 0053AF 043F               
9592 0053AF 043F 4D 4C 49 45  MsgMLI     dc   c'MLIError from MLI_ONLINE call.',h'00' 
9593 0053CE 045E               
9594 0053CE 045E              VT03       anop 
9595 0053CE 045E               
9596 0053CE 045E 20 92 04                jsr  ProDOSWipe              Destroying ProDOS volume? 
9597 0053D1 0461               
9598 0053D1 0461 D0 05                   bne  VTExit                  He decided to cancel. 
9599 0053D3 0463               
9600 0053D3 0463 AC 4C 00                ldy  Volume                  He's ok with wiping out volume 
9601 0053D6 0466 D0 AC                   bne  VT01b                   so see if DOS 3.3 format required. 
9602 0053D8 0468               
9603 0053D8 0468              VTExit     anop 
9604 0053D8 0468               
9605 0053D8 0468 60                      rts 
9606 0053D9 0469               
9607 0053D9 0469              OffLine    anop 
9608 0053D9 0469               
9609 0053D9 0469 A9 78                   lda  #MsgOffLine 
9610 0053DB 046B 85 82                   sta  MsgPtr 
9611 0053DD 046D A9 04                   lda  #>MsgOffLine 
9612 0053DF 046F 85 83                   sta  MsgPtr+1 
9613 0053E1 0471               
9614 0053E1 0471 20 00 80                jsr  Beep 
9615 0053E4 0474 20 00 80                jsr  MsgRetCan1 
9616 0053E7 0477               
9617 0053E7 0477 60                      rts 
9618 0053E8 0478               
9619 0053E8 0478                         Msb  On 
9620 0053E8 0478 CE EF A0 E4  MsgOffLine dc   c'No disk loaded in device.',h'00' 
9621 005402 0492                         Msb  Off 
9622 005402 0492               
9623 005402 0492              ProDOSWipe anop 
9624 005402 0492               
9625 005402 0492 AD 00 0B                lda  onlineBuf 
9626 005405 0495 29 0F                   and  #$0F 
9627 005407 0497               
9628 005407 0497 AA                      tax 
9629 005408 0498 A0 00                   ldy  #0 
9630 00540A 049A               
9631 00540A 049A              PW01       anop 
9632 00540A 049A               
9633 00540A 049A B9 01 0B                lda  onlineBuf+1,y 
9634 00540D 049D 09 80                   ora  #$80 
9635 00540F 049F 99 EE 04                sta  VolName,y 
9636 005412 04A2 C8                      iny 
9637 005413 04A3 CA                      dex 
9638 005414 04A4 D0 F4                   bne  PW01 
9639 005416 04A6               
9640 005416 04A6 A9 A7                   lda  #"'"+$80 
9641 005418 04A8 99 EE 04                sta  VolName,y 
9642 00541B 04AB               
9643 00541B 04AB C0 0F                   cpy  #15 
9644 00541D 04AD F0 0A                   beq  NoPadding 
9645 00541F 04AF               
9646 00541F 04AF A9 0D                   lda  #$0D 
9647 005421 04B1               
9648 005421 04B1              SpacePadding anop 
9649 005421 04B1               
9650 005421 04B1 C8                      iny 
9651 005422 04B2 99 EE 04                sta  VolName,y 
9652 005425 04B5 C0 0F                   cpy  #15 
9653 005427 04B7 90 F8                   bcc  SpacePadding 
9654 005429 04B9               
9655 005429 04B9              NoPadding  anop 
9656 005429 04B9               
9657 005429 04B9 A9 C8                   lda  #MsgWipe 
9658 00542B 04BB 85 82                   sta  MsgPtr 
9659 00542D 04BD A9 04                   lda  #>MsgWipe 
9660 00542F 04BF 85 83                   sta  MsgPtr+1 
9661 005431 04C1               
9662 005431 04C1 20 00 80                jsr  Beep 
9663 005434 04C4 20 00 80                jsr  MsgOkCan2 
9664 005437 04C7               
9665 005437 04C7 60                      rts 
9666 005438 04C8               
9667 005438 04C8 59 6F 75 20  MsgWipe    dc   c"You are about to erase ProDOS volume '" 
9668 00545E 04EE 00 00 00 00  VolName    ds   16 
9669 00546E 04FE 0D                      dc   h'0D' 
9670 00546F 04FF 44 6F 20 79             dc   c'Do you wish to continue anyway?',h'00' 
9671 00548F 051F               
9672 00548F 051F              FormatReq  anop 
9673 00548F 051F               
9674 00548F 051F A9 2E                   lda  #FormatMsg 
9675 005491 0521 85 82                   sta  MsgPtr 
9676 005493 0523 A9 05                   lda  #>FormatMsg 
9677 005495 0525 85 83                   sta  MsgPtr+1 
9678 005497 0527               
9679 005497 0527 20 00 80                jsr  Beep 
9680 00549A 052A 20 00 80                jsr  MsgFmtCan1 
9681 00549D 052D               
9682 00549D 052D 60                      rts 
9683 00549E 052E               
9684 00549E 052E 54 68 65 20  FormatMsg  dc   c'The destination disk appears to be unformatted.',h'0D' 
9685 0054CE 055E 57 6F 75 6C             dc   c'Would you like to format this volume?',h'00' 
9686 0054F4 0584               
9687 0054F4 0584              * Format device 
9688 0054F4 0584               
9689 0054F4 0584              FormatDev  anop 
9690 0054F4 0584               
9691 0054F4 0584 AD 4B 00                lda  DevType 
9692 0054F7 0587 C9 00                   cmp  #DiskIIDev 
9693 0054F9 0589 D0 17                   bne  Smartport 
9694 0054FB 058B               
9695 0054FB 058B              DiskII     anop                         Disk ][ device 
9696 0054FB 058B               
9697 0054FB 058B AD 4C 00                lda  Volume 
9698 0054FE 058E D0 02                   bne  HaveVolNum 
9699 005500 0590               
9700 005500 0590 A9 FE                   lda  #$FE                    Default volume number 
9701 005502 0592               
9702 005502 0592              HaveVolNum anop 
9703 005502 0592               
9704 005502 0592 8D 05 80                sta  HyperFormat+5 
9705 005505 0595 AD 48 00                lda  TargetUnit 
9706 005508 0598 8D 06 80                sta  HyperFormat+6 
9707 00550B 059B               
9708 00550B 059B 20 00 80                jsr  HyperFormat 
9709 00550E 059E               
9710 00550E 059E 9C 4C 00                stz  Volume 
9711 005511 05A1               
9712 005511 05A1 60                      rts 
9713 005512 05A2               
9714 005512 05A2              Smartport  anop                         Standard Smartport device 
9715 005512 05A2               
9716 005512 05A2 20 A6 05                jsr  ProFormat 
9717 005515 05A5               
9718 005515 05A5 60                      rts 
9719 005516 05A6               
9720 005516 05A6               
9721 005516 05A6              * Do a ProDOS driver format call. 
9722 005516 05A6               
9723 005516 05A6              ProFormat  anop 
9724 005516 05A6               
9725 005516 05A6              DevAddr    equ  $BF10 
9726 005516 05A6               
9727 005516 05A6 AD F7 08                lda  onlineUnit              Compute slot/drive offset by dividing 
9728 005519 05A9 4A                      lsr  a                       unit number by 16. 
9729 00551A 05AA 4A                      lsr  a 
9730 00551B 05AB 4A                      lsr  a 
9731 00551C 05AC AA                      tax                          Move offset to index. 
9732 00551D 05AD               
9733 00551D 05AD BD 10 BF                lda  DevAddr,x               Get low byte of ProDOS driver address 
9734 005520 05B0 85 80                   sta  Ptr2 
9735 005522 05B2 E8                      inx 
9736 005523 05B3 BD 10 BF                lda  DevAddr,x               Get high byte of ProDOS driver address 
9737 005526 05B6 85 81                   sta  Ptr2+1 
9738 005528 05B8               
9739 005528 05B8 08                      php                          Save status 
9740 005529 05B9 78                      sei                          Interrupts off 
9741 00552A 05BA               
9742 00552A 05BA A9 03                   lda  #3 
9743 00552C 05BC 85 42                   sta  $42                     Format call 
9744 00552E 05BE               
9745 00552E 05BE AD F7 08                lda  onlineUnit 
9746 005531 05C1 85 43                   sta  $43                     Unit number 
9747 005533 05C3               
9748 005533 05C3 A9 00                   lda  #Buffer512 
9749 005535 05C5 85 44                   sta  $44 
9750 005537 05C7 A9 09                   lda  #>Buffer512 
9751 005539 05C9 85 45                   sta  $45 
9752 00553B 05CB               
9753 00553B 05CB A9 00                   lda  #0 
9754 00553D 05CD 85 46                   sta  $46 
9755 00553F 05CF 85 47                   sta  $47 
9756 005541 05D1               
9757 005541 05D1 AD 8B C0                lda  $C08B                   Read and write enable the language card 
9758 005544 05D4 AD 8B C0                lda  $C08B                    with bank 1 on. 
9759 005547 05D7               
9760 005547 05D7 20 EA 05                jsr  CallDriver              Call ProDOS driver. 
9761 00554A 05DA               
9762 00554A 05DA 2C 82 C0                bit  $C082                   Put ROM back on-line 
9763 00554D 05DD F0 07                   beq  OkError 
9764 00554F 05DF               
9765 00554F 05DF 28                      plp                          Restore status 
9766 005550 05E0               
9767 005550 05E0 20 DC 06                jsr  WriteError 
9768 005553 05E3               
9769 005553 05E3 A9 01                   lda  #$01                    Zero zero bit to indicate error 
9770 005555 05E5               
9771 005555 05E5 60                      rts 
9772 005556 05E6               
9773 005556 05E6              OkError    anop 
9774 005556 05E6               
9775 005556 05E6 28                      plp                          Restore status 
9776 005557 05E7               
9777 005557 05E7 A9 00                   lda  #$00                    Clear A to indicate no error. 
9778 005559 05E9               
9779 005559 05E9 60                      rts 
9780 00555A 05EA               
9781 00555A 05EA              CallDriver anop 
9782 00555A 05EA               
9783 00555A 05EA 6C 80 00                jmp  (Ptr2) 
9784 00555D 05ED                         Copy ProcessImage2.s 
9785 00555D 05ED              * Write image to device. 
9786 00555D 05ED               
9787 00555D 05ED              WriteImage anop 
9788 00555D 05ED               
9789 00555D 05ED 20 34 02                jsr  PaintBox                Put "Writing" box on screen. 
9790 005560 05F0               
9791 005560 05F0 20 75 08                jsr  InitProgBar             Initialize progressbar variables 
9792 005563 05F3               
9793 005563 05F3 9C 00 80                stz  CurrBlock               Start at writing at block zero. 
9794 005566 05F6 9C 01 80                stz  CurrBlock+1 
9795 005569 05F9               
9796 005569 05F9 A2 07                   ldx  #$07 
9797 00556B 05FB               
9798 00556B 05FB 20 C5 08                jsr  InitMarker 
9799 00556E 05FE               
9800 00556E 05FE AD 00 80                lda  ImageType 
9801 005571 0601 C9 00                   cmp  #Type_DO 
9802 005573 0603 D0 0B                   bne  StdImage 
9803 005575 0605               
9804 005575 0605 BD 65 08     DOImage    lda  PDosOrder,x             Table to convert DO image to PO 
9805 005578 0608 9D 6D 08                sta  SectorTable,x            for block write. 
9806 00557B 060B CA                      dex 
9807 00557C 060C 10 F7                   bpl  DOImage 
9808 00557E 060E 80 09                   bra  Skip1 
9809 005580 0610               
9810 005580 0610 BD 5D 08     StdImage   lda  StdOrder,x              Standard sector order so no conversion 
9811 005583 0613 9D 6D 08                sta  SectorTable,x            required. 
9812 005586 0616 CA                      dex 
9813 005587 0617 10 F7                   bpl  StdImage 
9814 005589 0619               
9815 005589 0619 AD 48 00     Skip1      lda  TargetUnit              Setup target unit number for write block 
9816 00558C 061C 8D ED 08                sta  wrblkUnit 
9817 00558F 061F               
9818 00558F 061F 20 00 80                jsr  MLIOpen1                Open disk image. 
9819 005592 0622 AD FC 08                lda  openRef1                Save file references. 
9820 005595 0625 8D F0 08                sta  setMarkRef 
9821 005598 0628 8D FD 08                sta  readRef 
9822 00559B 062B 8D FF 08                sta  closeRef 
9823 00559E 062E               
9824 00559E 062E 20 00 80                jsr  MLISetMark 
9825 0055A1 0631               
9826 0055A1 0631 20 00 80     Process4K  jsr  MLIRead4K 
9827 0055A4 0634               
9828 0055A4 0634 A2 00                   ldx  #$00 
9829 0055A6 0636               
9830 0055A6 0636 A9 00        ProcBlock  lda  #Buffer8K 
9831 0055A8 0638 85 06                   sta  Ptr1 
9832 0055AA 063A A9 80                   lda  #>Buffer8K 
9833 0055AC 063C 85 07                   sta  Ptr1+1 
9834 0055AE 063E BD 6D 08                lda  SectorTable,x 
9835 0055B1 0641 A0 04                   ldy  #$04 
9836 0055B3 0643               
9837 0055B3 0643 4A           ShiftRight lsr  a 
9838 0055B4 0644 88                      dey 
9839 0055B5 0645 D0 FC                   bne  ShiftRight 
9840 0055B7 0647               
9841 0055B7 0647 8D 5C 08                sta  Offset 
9842 0055BA 064A               
9843 0055BA 064A 18                      clc 
9844 0055BB 064B A5 07                   lda  Ptr1+1 
9845 0055BD 064D 6D 5C 08                adc  Offset 
9846 0055C0 0650 85 07                   sta  Ptr1+1 
9847 0055C2 0652               
9848 0055C2 0652 A0 00                   ldy  #$00 
9849 0055C4 0654               
9850 0055C4 0654 B1 06        Loop1      lda  (Ptr1),y 
9851 0055C6 0656 99 00 14                sta  Buf512A,y 
9852 0055C9 0659 C8                      iny 
9853 0055CA 065A D0 F8                   bne  Loop1 
9854 0055CC 065C               
9855 0055CC 065C A9 80                   lda  #>Buffer8K 
9856 0055CE 065E 85 07                   sta  Ptr1+1 
9857 0055D0 0660 BD 6D 08                lda  Sectortable,x 
9858 0055D3 0663 29 0F                   and  #$0F 
9859 0055D5 0665 8D 5C 08                sta  Offset 
9860 0055D8 0668               
9861 0055D8 0668 18                      clc 
9862 0055D9 0669 A5 07                   lda  Ptr1+1 
9863 0055DB 066B 6D 5C 08                adc  Offset 
9864 0055DE 066E 85 07                   sta  Ptr1+1 
9865 0055E0 0670               
9866 0055E0 0670 B1 06        Loop2      lda  (Ptr1),y 
9867 0055E2 0672 99 00 15                sta  Buf512B,y 
9868 0055E5 0675 C8                      iny 
9869 0055E6 0676 D0 F8                   bne  Loop2 
9870 0055E8 0678               
9871 0055E8 0678 AD 00 80                lda  CurrBlock 
9872 0055EB 067B 8D EE 08                sta  wrblkBlockNum 
9873 0055EE 067E AD 01 80                lda  CurrBlock+1 
9874 0055F1 0681 8D EF 08                sta  wrblkBlockNum+1 
9875 0055F4 0684               
9876 0055F4 0684 20 00 80                jsr  MLIWriteBlk 
9877 0055F7 0687 F0 08                   beq  GoodWrite 
9878 0055F9 0689 20 DC 06                jsr  WriteError 
9879 0055FC 068C 20 00 80                jsr  MLIClose                Close files after error. 
9880 0055FF 068F 80 47                   bra  Done 
9881 005601 0691               
9882 005601 0691              GoodWrite  anop 
9883 005601 0691               
9884 005601 0691 38                      sec 
9885 005602 0692 AD 9E 08                lda  counter 
9886 005605 0695 E9 01                   sbc  #1 
9887 005607 0697 8D 9E 08                sta  counter 
9888 00560A 069A AD 9F 08                lda  counter+1 
9889 00560D 069D E9 00                   sbc  #0 
9890 00560F 069F 8D 9F 08                sta  counter+1 
9891 005612 06A2 0D 9E 08                ora  counter 
9892 005615 06A5               
9893 005615 06A5 D0 03                   bne  CheckForEnd 
9894 005617 06A7               
9895 005617 06A7 20 A1 08                jsr  MoveProgBar 
9896 00561A 06AA               
9897 00561A 06AA              CheckForEnd anop 
9898 00561A 06AA               
9899 00561A 06AA AD 01 80                lda  CurrBlock+1 
9900 00561D 06AD CD 01 80                cmp  EndBlock+1 
9901 005620 06B0 D0 08                   bne  NextBlock 
9902 005622 06B2 AD 00 80                lda  CurrBlock 
9903 005625 06B5 CD 00 80                cmp  EndBlock 
9904 005628 06B8 F0 13                   beq  Success 
9905 00562A 06BA               
9906 00562A 06BA EE 00 80     NextBlock  inc  CurrBlock 
9907 00562D 06BD D0 03                   bne  NB01 
9908 00562F 06BF EE 01 80                inc  CurrBlock+1 
9909 005632 06C2               
9910 005632 06C2 E8           NB01       inx 
9911 005633 06C3 E0 08                   cpx  #$08 
9912 005635 06C5 B0 03                   bcs  NB02 
9913 005637 06C7 4C 36 06                jmp  ProcBlock 
9914 00563A 06CA 4C 31 06     NB02       jmp  Process4K 
9915 00563D 06CD               
9916 00563D 06CD              Success    anop 
9917 00563D 06CD               
9918 00563D 06CD 20 00 80                jsr  MLIClose                Close files. 
9919 005640 06D0               
9920 005640 06D0 20 36 01                jsr  SuccessBox 
9921 005643 06D3 A9 00                   lda  #Quit2                  Allows for exiting back to image 
9922 005645 06D5 8D 00 80                sta  RC2                      selection screen. 
9923 005648 06D8               
9924 005648 06D8 20 24 03     Done       jsr  ClearBox 
9925 00564B 06DB               
9926 00564B 06DB 60                      rts 
9927 00564C 06DC               
9928 00564C 06DC              WriteError Entry 
9929 00564C 06DC               
9930 00564C 06DC C9 27                   cmp  #$27                    IO Error 
9931 00564E 06DE F0 0E                   beq  IOError 
9932 005650 06E0 C9 28                   cmp  #$28                    No device connected 
9933 005652 06E2 F0 15                   beq  NoDevice 
9934 005654 06E4 C9 2B                   cmp  #$2B                    Disk write protected 
9935 005656 06E6 F0 1C                   beq  WriteProtect 
9936 005658 06E8 C9 2F                   cmp  #$2F 
9937 00565A 06EA F0 23                   beq  DevOffline 
9938 00565C 06EC 80 2C                   bra  Unknown 
9939 00565E 06EE               
9940 00565E 06EE A9 40        IOError    lda  #Msg27 
9941 005660 06F0 85 82                   sta  MsgPtr 
9942 005662 06F2 A9 07                   lda  #>Msg27 
9943 005664 06F4 85 83                   sta  MsgPtr+1 
9944 005666 06F6 4C 39 07                jmp  PrintErr 
9945 005669 06F9               
9946 005669 06F9 A9 74        NoDevice   lda  #Msg28 
9947 00566B 06FB 85 82                   sta  MsgPtr 
9948 00566D 06FD A9 07                   lda  #>Msg28 
9949 00566F 06FF 85 83                   sta  MsgPtr+1 
9950 005671 0701 4C 39 07                jmp  PrintErr 
9951 005674 0704               
9952 005674 0704 A9 AE        WriteProtect lda #Msg2B 
9953 005676 0706 85 82                   sta  MsgPtr 
9954 005678 0708 A9 07                   lda  #>Msg2B 
9955 00567A 070A 85 83                   sta  MsgPtr+1 
9956 00567C 070C 4C 39 07                jmp  PrintErr 
9957 00567F 070F               
9958 00567F 070F A9 E8        DevOffline lda #Msg2F 
9959 005681 0711 85 82                   sta  MsgPtr 
9960 005683 0713 A9 07                   lda  #>Msg2F 
9961 005685 0715 85 83                   sta  MsgPtr+1 
9962 005687 0717 4C 39 07                jmp  PrintErr 
9963 00568A 071A               
9964 00568A 071A A8           Unknown    tay 
9965 00568B 071B 18                      clc 
9966 00568C 071C 4A                      lsr  a 
9967 00568D 071D 4A                      lsr  a 
9968 00568E 071E 4A                      lsr  a 
9969 00568F 071F 4A                      lsr  a 
9970 005690 0720 AA                      tax 
9971 005691 0721 BD 00 80                lda  ASCIITable,x 
9972 005694 0724 8D 4C 08                sta  PError 
9973 005697 0727 98                      tya 
9974 005698 0728 29 0F                   and  #$0F 
9975 00569A 072A AA                      tax 
9976 00569B 072B BD 00 80                lda  ASCIITable,x 
9977 00569E 072E 8D 4D 08                sta  Perror+1 
9978 0056A1 0731               
9979 0056A1 0731 A9 1F                   lda  #MsgUnk 
9980 0056A3 0733 85 82                   sta  MsgPtr 
9981 0056A5 0735 A9 08                   lda  #>MsgUnk 
9982 0056A7 0737 85 83                   sta  MsgPtr+1 
9983 0056A9 0739               
9984 0056A9 0739 20 00 80     PrintErr   jsr  Beep 
9985 0056AC 073C 20 00 80                jsr  MsgOk 
9986 0056AF 073F 60                      rts 
9987 0056B0 0740               
9988 0056B0 0740 45 72 72 6F  Msg27      dc   c'Error encountered writing image',h'0D' 
9989 0056D0 0760 20 20 20 20             dc   c'           IO Error',h'00' 
9990 0056E4 0774               
9991 0056E4 0774 45 72 72 6F  Msg28      dc   c'Error encountered writing image',h'0D' 
9992 005704 0794 20 20 20 20             dc   c'     Device not connected',h'00' 
9993 00571E 07AE               
9994 00571E 07AE 45 72 72 6F  Msg2B      dc   c'Error encountered writing image',h'0D' 
9995 00573E 07CE 20 20 20 20             dc   c'      Write protect error',h'00' 
9996 005758 07E8               
9997 005758 07E8 45 72 72 6F  Msg2F      dc   c'Error encountered writing image',h'0D' 
9998 005778 0808 20 20 20 20             dc   c'        Device offline',h'00' 
9999 00578F 081F               
0000 00578F 081F 45 72 72 6F  MsgUnk     dc   c'Error encountered writing image',h'0D' 
0001 0057AF 083F 50 72 6F 44             dc   c'ProDOS error ' 
0002 0057BC 084C 78 78 20 45  PError     dc   c'xx Encountered.',h'00' 
0003 0057CC 085C               
0004 0057CC 085C 00           Offset     ds   1 
0005 0057CD 085D               
0006 0057CD 085D 01 23 45 67  StdOrder   dc   H'01 23 45 67 89 AB CD EF' 
0007 0057D5 0865 0E DC BA 98  PDosOrder  dc   H'0E DC BA 98 76 54 32 1F' 
0008 0057DD 086D 00 00 00 00  SectorTable ds 8 
0009 0057E5 0875               
0010 0057E5 0875              * 
0011 0057E5 0875              * Initialize progress bar variables 
0012 0057E5 0875              * 
0013 0057E5 0875               
0014 0057E5 0875              InitProgBar anop 
0015 0057E5 0875               
0016 0057E5 0875 AD 00 80                lda  EndBlock 
0017 0057E8 0878 85 84                   sta  ACC 
0018 0057EA 087A AD 01 80                lda  EndBlock+1 
0019 0057ED 087D 85 85                   sta  ACC+1 
0020 0057EF 087F A9 19                   lda  #25 
0021 0057F1 0881 85 86                   sta  AUX 
0022 0057F3 0883 64 87                   stz  AUX+1 
0023 0057F5 0885               
0024 0057F5 0885 20 00 80                jsr  Divide 
0025 0057F8 0888               
0026 0057F8 0888 A5 84                   lda  ACC 
0027 0057FA 088A 8D 9C 08                sta  BlkPerInd 
0028 0057FD 088D 8D 9E 08                sta  counter 
0029 005800 0890 A5 85                   lda  ACC+1 
0030 005802 0892 8D 9D 08                sta  BlkPerInd+1 
0031 005805 0895 8D 9F 08                sta  counter+1 
0032 005808 0898               
0033 005808 0898 9C A0 08                stz  Indicators 
0034 00580B 089B               
0035 00580B 089B 60                      rts 
0036 00580C 089C               
0037 00580C 089C 00 00        BlkPerInd  ds   2 
0038 00580E 089E 00 00        counter    ds   2 
0039 005810 08A0 00           Indicators ds   1 
0040 005811 08A1               
0041 005811 08A1              * 
0042 005811 08A1              * Move progress bar 
0043 005811 08A1              * 
0044 005811 08A1               
0045 005811 08A1              MoveProgBar anop 
0046 005811 08A1               
0047 005811 08A1 EE A0 08                inc  Indicators 
0048 005814 08A4               
0049 005814 08A4 A9 06                   lda  #7-1 
0050 005816 08A6 85 25                   sta  VTab 
0051 005818 08A8               
0052 005818 08A8 18                      clc 
0053 005819 08A9 A9 1A                   lda  #27-1 
0054 00581B 08AB 6D A0 08                adc  Indicators 
0055 00581E 08AE 85 24                   sta  HTab 
0056 005820 08B0               
0057 005820 08B0 20 00 80                jsr  SetVTab 
0058 005823 08B3               
0059 005823 08B3 A9 20                   lda  #' ' 
0060 005825 08B5 20 00 80                jsr  cout 
0061 005828 08B8               
0062 005828 08B8 AD 9C 08                lda  BlkPerInd 
0063 00582B 08BB 8D 9E 08                sta  counter 
0064 00582E 08BE AD 9D 08                lda  BlkPerInd+1 
0065 005831 08C1 8D 9F 08                sta  counter+1 
0066 005834 08C4               
0067 005834 08C4 60                      rts 
0068 005835 08C5               
0069 005835 08C5              InitMarker anop                         Initalize beginning of image marker 
0070 005835 08C5               
0071 005835 08C5 9C F1 08                stz  setMarkPos 
0072 005838 08C8 9C F2 08                stz  setMarkPos+1 
0073 00583B 08CB 9C F3 08                stz  setMarkPos+2 
0074 00583E 08CE               
0075 00583E 08CE AD 00 80                lda  ImageType 
0076 005841 08D1 C9 00                   cmp  #Type_2IMG              2mg file header offset 
0077 005843 08D3 D0 06                   bne  NextCheck1 
0078 005845 08D5               
0079 005845 08D5 A9 40                   lda  #64 
0080 005847 08D7 8D F1 08                sta  setMarkPos 
0081 00584A 08DA 60                      rts 
0082 00584B 08DB               
0083 00584B 08DB C9 00        NextCheck1 cmp  #Type_DC                DiskCopy 4.2 header offset 
0084 00584D 08DD D0 05                   bne  NextCheck2 
0085 00584F 08DF               
0086 00584F 08DF A9 54                   lda  #84 
0087 005851 08E1 8D F1 08                sta  setMarkPos 
0088 005854 08E4               
0089 005854 08E4              NextCheck2 anop 
0090 005854 08E4               
0091 005854 08E4 60                      rts 
0092 005855 08E5               
0093 005855 08E5               
0094 005855 08E5              GetVolNum  anop                         Get DOS 3.3 volume number 
0095 005855 08E5               
0096 005855 08E5 9C 4C 00                stz  Volume                  Default volume number 
0097 005858 08E8               
0098 005858 08E8 AD 4B 00                lda  DevType 
0099 00585B 08EB C9 00                   cmp  #DiskIIDev              Is this a Disk ][? 
0100 00585D 08ED D0 70                   bne  NotDOS33 
0101 00585F 08EF               
0102 00585F 08EF AD 01 80                lda  ImageSize+1             Image too small? 
0103 005862 08F2 F0 6B                   beq  NOTDOS33 
0104 005864 08F4               
0105 005864 08F4 20 C5 08                jsr  InitMarker 
0106 005867 08F7               
0107 005867 08F7 A9 10                   lda  #$10                    Track $11 
0108 005869 08F9 8D F2 08                sta  setMarkPos+1 
0109 00586C 08FC               
0110 00586C 08FC A9 01                   lda  #$01 
0111 00586E 08FE 8D F3 08                sta  setMarkPos+2 
0112 005871 0901               
0113 005871 0901 20 00 80                jsr  MLIOpen1 
0114 005874 0904               
0115 005874 0904 AD FC 08                lda  openRef1 
0116 005877 0907 8D F0 08                sta  setMarkRef 
0117 00587A 090A 8D FD 08                sta  readRef 
0118 00587D 090D 8D FF 08                sta  closeRef 
0119 005880 0910               
0120 005880 0910 20 00 80                jsr  MLISetMark 
0121 005883 0913               
0122 005883 0913 A9 FF                   lda  #$FF                    Get 255 bytes (1 sector) 
0123 005885 0915 8D F8 08                sta  readRequest 
0124 005888 0918 9C F9 08                stz  readRequest+1 
0125 00588B 091B               
0126 00588B 091B 20 00 80                jsr  MLIRead 
0127 00588E 091E               
0128 00588E 091E 20 00 80                jsr  MLIClose 
0129 005891 0921               
0130 005891 0921 A2 03                   ldx  #3 
0131 005893 0923 BD 00 10                lda  readBuf,x 
0132 005896 0926 C9 03                   cmp  #3                      DOS release number 
0133 005898 0928 D0 35                   bne  NotDOS33 
0134 00589A 092A               
0135 00589A 092A A2 27                   ldx  #$27 
0136 00589C 092C BD 00 10                lda  readBuf,x 
0137 00589F 092F C9 7A                   cmp  #$7A                    Max # track sect list pairs 
0138 0058A1 0931 D0 2C                   bne  NotDOS33 
0139 0058A3 0933               
0140 0058A3 0933 A2 34                   ldx  #$34 
0141 0058A5 0935 BD 00 10                lda  readBuf,x 
0142 0058A8 0938 C9 23                   cmp  #$23                    Tracks per diskette 
0143 0058AA 093A D0 23                   bne  NotDOS33 
0144 0058AC 093C               
0145 0058AC 093C A2 35                   ldx  #$35 
0146 0058AE 093E BD 00 10                lda  readBuf,x 
0147 0058B1 0941 C9 10                   cmp  #$10                    Sectors per track 
0148 0058B3 0943 D0 1A                   bne  NotDOS33 
0149 0058B5 0945               
0150 0058B5 0945 A2 36                   ldx  #$36 
0151 0058B7 0947 BD 00 10                lda  readBuf,x 
0152 0058BA 094A C9 00                   cmp  #$00                    Bytes per sector - low 
0153 0058BC 094C D0 11                   bne  NotDOS33 
0154 0058BE 094E               
0155 0058BE 094E A2 37                   ldx  #$37 
0156 0058C0 0950 BD 00 10                lda  readBuf,x 
0157 0058C3 0953 C9 01                   cmp  #$01                    Bytes per sector - high 
0158 0058C5 0955 D0 08                   bne  NotDOS33 
0159 0058C7 0957               
0160 0058C7 0957              *          Good VTOC 
0161 0058C7 0957               
0162 0058C7 0957 A2 06                   ldx  #$06 
0163 0058C9 0959 BD 00 10                lda  readBuf,x               Volume number 
0164 0058CC 095C 8D 4C 00                sta  Volume 
0165 0058CF 095F               
0166 0058CF 095F              NotDOS33   anop 
0167 0058CF 095F               
0168 0058CF 095F 60                      rts 
0169 0058D0 0960               
0170 0058D0 0960                         End 
 
 
 
Local  Symbols
 
BIGBOX     00007A  BLKPERIND  00089C  BOOTABLE   000155  BOOTEXIT   00018A   
BP01       00024D  BP02       00026F  BP03       00027E  BP04       000299   
BP05       0002BB  BP06       0002E0  BP07       000305  CALLDRIVER 0005EA   
CANCELED   000021  CB01       00032D  CB02       000335  CF01       0003D3   
CF02       0003DB  CHECKDISK  000162  CHECKEXIT  000079  CHECKFOREN 0006AA   
CHECKSIZE  00004D  CLEARBOX   000324  CLRFORMAT  0003CA  COUNTER    00089E   
DEVADDR    00BF10  DEVOFFLINE 00070F  DEVTYPE    00004B  DISKII     00058B   
DOIMAGE    000605  DONE       0006D8  FMTMSG     0003C0  FORMATDEV  000584   
FORMATMSG  00052E  FORMATREQ  00051F  GETVOLNUM  0008E5  GOODWRITE  000691   
HAVEVOLNUM 000592  INDICATORS 0008A0  INITMARKER 0008C5  INITPROGBA 000875   
INITVARS   000022  IOERROR    0006EE  LOOP1      000654  LOOP2      000670   
MOVEPROGBA 0008A1  MSG27      000740  MSG28      000774  MSG2B      0007AE   
MSG2F      0007E8  MSGBIG     000089  MSGBOOT    0001BF  MSGMLI     00043F   
MSGNOBOOT  0001A5  MSGOFFLINE 000478  MSGSMALL   0000F3  MSGUNK     00081F   
MSGWHERE   0001FA  MSGWIPE    0004C8  NB01       0006C2  NB02       0006CA   
NEXTBLOCK  0006BA  NEXTCHECK1 0008DB  NEXTCHECK2 0008E4  NOBOOT     00018B   
NODEVICE   0006F9  NOPADDING  0004B9  NOTDOS33   00095F  OFFLINE    000469   
OFFSET     00085C  OKERROR    0005E6  PAINTBOX   000234  PDOSORDER  000865   
PERROR     00084C  PRINTERR   000739  PROCBLOCK  000636  PROCESS4K  000631   
PRODOSWIPE 000492  PROFORMAT  0005A6  PW01       00049A  REVERIFY   0003ED   
SAMESIZE   00006D  SECTORTABL 00086D  SF01       00035D  SF02       00037A   
SF03       000384  SF04       000392  SF05       0003AF  SHIFTRIGHT 000643   
SHOWFORMAT 000344  SKIP1      000619  SMALLBOX   0000D8  SMARTPORT  0005A2   
SPACEPADDI 0004B1  STDIMAGE   000610  STDORDER   00085D  SUCCESS    0006CD   
SUCCESSBOX 000136  TARGETSIZE 000049  TARGETUNIT 000048  TEXT1      00031B   
TOOBIG     000063  TOOSMALL   000068  UNKNOWN    00071A  VERIFYTARG 0003EA   
VOLNAME    0004EE  VOLUME     00004C  VT01       000401  VT01A      00040A   
VT01B      000414  VT02       000423  VT02A      00042E  VT03       00045E   
VTEXIT     000468  WHEREDISK  000197  WRITEERROR 0006DC  WRITEIMAGE 0005ED   
WRITEPROTE 000704   
0171 0058D0 0000                         Copy Hyperformat.s 
0172 0058D0 0000              *********************************** 
0173 0058D0 0000              *                                 * 
0174 0058D0 0000              *       ProDOS Hyper-FORMAT       * 
0175 0058D0 0000              *                                 * 
0176 0058D0 0000              *     created by Jerry Hewett     * 
0177 0058D0 0000              *         copyright  1985         * 
0178 0058D0 0000              *     Living Legends Software     * 
0179 0058D0 0000              *                                 * 
0180 0058D0 0000              * A Public Domain disk formatting * 
0181 0058D0 0000              * routine for the ProDOS Disk Op- * 
0182 0058D0 0000              * erating System.  These routines * 
0183 0058D0 0000              * can be included within your own * 
0184 0058D0 0000              * software as long as you give us * 
0185 0058D0 0000              * credit for developing them.     * 
0186 0058D0 0000              *                                 * 
0187 0058D0 0000              *       Updated on: 23Aug85       * 
0188 0058D0 0000              *                                 * 
0189 0058D0 0000              *********************************** 
0190 0058D0 0000               
0191 0058D0 0000              *********************************** 
0192 0058D0 0000              *                                 * 
0193 0058D0 0000              * FORMAT - Format the target disk * 
0194 0058D0 0000              *                                 * 
0195 0058D0 0000              *********************************** 
0196 0058D0 0000               
0197 005900 0000                         Align 256 
0198 005900 0000               
0199 005900 0000              HyperFormat Start 
0200 005900 0000               
0201 005900 0000              Buffer   equ  $0                        ;Address pointer for FORMAT data 
0202 005900 0000              WAIT     equ  $FCA8                     ;Delay routine 
0203 005900 0000              Step0    equ  $C080                     ;Drive stepper motor positions 
0204 005900 0000              Step1    equ  $C081                     ;  |      |      |       | 
0205 005900 0000              Step2    equ  $C082                     ;  |      |      |       | 
0206 005900 0000              Step4    equ  $C084                     ;  |      |      |       | 
0207 005900 0000              Step6    equ  $C086                     ;  |      |      |       | 
0208 005900 0000              DiskOFF  equ  $C088                     ;Drive OFF  softswitch 
0209 005900 0000              DiskON   equ  $C089                     ;Drive ON   softswitch 
0210 005900 0000              Select   equ  $C08A                     ;Starting offset for target device 
0211 005900 0000              DiskRD   equ  $C08C                     ;Disk READ  softswitch 
0212 005900 0000              DiskWR   equ  $C08D                     ;Disk WRITE softswitch 
0213 005900 0000              ModeRD   equ  $C08E                     ;Mode READ  softswitch 
0214 005900 0000              ModeWR   equ  $C08F                     ;Mode WRITE softswitch 
0215 005900 0000               
0216 005900 0000 4C 07 00              jmp   Format 
0217 005903 0003               
0218 005903 0003 00           TRKbeg   dc    i1'00'                   ;Starting track number 
0219 005904 0004 23           TRKend   dc    i1'35'                   ;Ending track number 
0220 005905 0005 FE           VolNum   dc    i1'$FE'                  ;Volume number 
0221 005906 0006 60           Slot     dc    i1'$60'                  ;ProDOS unit number 
0222 005907 0007               
0223 005907 0007              Format   anop 
0224 005907 0007 08                    php 
0225 005908 0008 78                    sei 
0226 005909 0009 AD 06 00              LDA   Slot                     ;Fetch target drive SLOTNUM value 
0227 00590C 000C 48                    PHA                            ;Store it on the stack 
0228 00590D 000D 29 70                 AND   #$70                     ;Mask off bit 7 and the lower 4 bits 
0229 00590F 000F 8D 17 02              STA   SlotF                    ;Store result in FORMAT slot storage 
0230 005912 0012 AA                    TAX                            ;Assume value of $60 (drive #1) 
0231 005913 0013 68                    PLA                            ;Retrieve value from the stack 
0232 005914 0014 10 01                 BPL   LDrive1                  ;If < $80 the disk is in drive #1 
0233 005916 0016 E8                    INX                            ;Set X offset to $61 (drive #2) 
0234 005917 0017 BD 8A C0     LDrive1  LDA   Select,X                 ;Set softswitch for proper drive 
0235 00591A 001A AE 17 02              LDX   SlotF                    ;Set X offset to FORMAT slot/drive 
0236 00591D 001D BD 89 C0              LDA   DiskON,X                 ;Turn the drive on 
0237 005920 0020 BD 8E C0              LDA   ModeRD,X                 ;Set Mode softswitch to READ 
0238 005923 0023 BD 8C C0              LDA   DiskRD,X                 ;Read a byte 
0239 005926 0026 A9 23                 LDA   #$23                     ;Assume head is on track 35 
0240 005928 0028 8D 19 02              STA   TRKcur 
0241 00592B 002B A9 00                 LDA   #$00                     ;Destination is track 0 
0242 00592D 002D 8D 1B 02              STA   TRKdes 
0243 005930 0030 20 88 01              JSR   SEEK                     ;Move head to track 0 
0244 005933 0033 AE 17 02              LDX   SlotF                    ;Turn off all drive phases 
0245 005936 0036 BD 80 C0              LDA   Step0,X 
0246 005939 0039 BD 82 C0              LDA   Step2,X 
0247 00593C 003C BD 84 C0              LDA   Step4,X 
0248 00593F 003F BD 86 C0              LDA   Step6,X 
0249 005942 0042 AD 03 00              LDA   TRKbeg                   ;Move TRKbeg value (0) to Track 
0250 005945 0045 8D 13 02              STA   Track 
0251 005948 0048 20 CD 00              JSR   BUILD                    ;Build a track in memory at $9700 
0252 00594B 004B               
0253 00594B 004B              ******************************* 
0254 00594B 004B              *                             * 
0255 00594B 004B              * WRITE - Write track to disk * 
0256 00594B 004B              *                             * 
0257 00594B 004B              ******************************* 
0258 00594B 004B              Write    Entry 
0259 00594B 004B 20 35 01              JSR   CALC                     ;Calculate new track/sector/checksum val 
0260 00594E 004E 20 82 00              JSR   TRANS                    ;Transfer track in memory to disk 
0261 005951 0051 B0 20                 BCS   Died                     ;If carry set, something died 
0262 005953 0053 EE 13 02     MInc     INC   Track                    ;Add 1 to Track value 
0263 005956 0056 AD 13 02              LDA   Track                    ;Is Track > ending track # (TRKend)? 
0264 005959 0059 CD 04 00              CMP   TRKend 
0265 00595C 005C F0 02                 BEQ   LNext                    ;More tracks to FORMAT 
0266 00595E 005E B0 09                 BCS   DONE                     ;Finished.  Exit FORMAT routine 
0267 005960 0060 8D 1B 02     LNext    STA   TRKdes                   ;Move next track to FORMAT to TRKdes 
0268 005963 0063 20 88 01              JSR   SEEK                     ;Move head to that track 
0269 005966 0066 4C 4B 00              JMP   WRITE                    ;Write another track 
0270 005969 0069 AE 17 02     DONE     LDX   SlotF                    ;Turn the drive off 
0271 00596C 006C BD 88 C0              LDA   DiskOFF,X 
0272 00596F 006F 28                    plp 
0273 005970 0070 A9 00                 lda   #$00                     ;MRP - No error 
0274 005972 0072 60                    RTS                            ;FORMAT is finished. Return to calling r 
0275 005973 0073               
0276 005973 0073              ************************************** 
0277 005973 0073              *                                    * 
0278 005973 0073              * Died - Something awful happened to * 
0279 005973 0073              * the disk or drive. Die a miserable * 
0280 005973 0073              * death...                           * 
0281 005973 0073              *                                    * 
0282 005973 0073              ************************************** 
0283 005973 0073               
0284 005973 0073 A8           Died     tay                            ;Save error in y-reg 
0285 005974 0074 AE 17 02              ldx   SlotF                    ;MRP - Turn off drive 
0286 005977 0077 BD 88 C0              lda   DiskOFF,X                ;MRP 
0287 00597A 007A 98                    tya                            ;Retrieve error code from y-reg 
0288 00597B 007B 28                    plp                            ;Restore interrupts 
0289 00597C 007C 20 00 80              jsr   WriteError 
0290 00597F 007F A9 01                 lda   #1 
0291 005981 0081 60                    rts 
0292 005982 0082               
0293 005982 0082              ************************************ 
0294 005982 0082              *                                  * 
0295 005982 0082              * TRANS - Transfer track in memory * 
0296 005982 0082              * to target device                 * 
0297 005982 0082              *                                  * 
0298 005982 0082              ************************************ 
0299 005982 0082               
0300 005982 0082              Trans    anop 
0301 005982 0082 A9 00                 LDA   #$00                     ;Set Buffer to $9700 
0302 005984 0084 A2 97                 LDX   #$97 
0303 005986 0086 85 00                 STA   Buffer 
0304 005988 0088 86 01                 STX   Buffer+1 
0305 00598A 008A A0 32                 LDY   #$32                     ;Set Y offset to 1st sync byte (max=50) 
0306 00598C 008C AE 17 02              LDX   SlotF                    ;Set X offset to FORMAT slot/drive 
0307 00598F 008F 38                    SEC                            ;(assum the disk is write protected) 
0308 005990 0090 BD 8D C0              LDA   DiskWR,X                 ;Write something to the disk 
0309 005993 0093 BD 8E C0              LDA   ModeRD,X                 ;Reset Mode softswitch to READ 
0310 005996 0096 30 31                 BMI   LWRprot                  ;If > $7F then disk was write protected 
0311 005998 0098 A9 FF                 LDA   #$FF                     ;Write a sync byte to the disk 
0312 00599A 009A 9D 8F C0              STA   ModeWR,X 
0313 00599D 009D DD 8C C0              CMP   DiskRD,X 
0314 0059A0 00A0 EA                    NOP                            ;(kill some time for WRITE sync...) 
0315 0059A1 00A1 4C AA 00              JMP   LSync2 
0316 0059A4 00A4 49 80        LSync1   EOR   #$80                     ;Set MSB, converting $7F to $FF (sync by 
0317 0059A6 00A6              *        NOP                            ;(kill time...) 
0318 0059A6 00A6 EA                    NOP 
0319 0059A7 00A7 4C B4 00              JMP   MStore 
0320 0059AA 00AA 48           LSync2   PHA                            ;(kill more time... [ sheesh! ]) 
0321 0059AB 00AB 68                    PLA 
0322 0059AC 00AC B1 00        LSync3   LDA   (Buffer),Y               ;Fetch byte to WRITE to disk 
0323 0059AE 00AE F0 11                 beq   WriteExit                ;MRP - new exit 
0324 0059B0 00B0 C9 80                 CMP   #$80                     ;Is it a sync byte? ($7F) 
0325 0059B2 00B2 90 F0                 BCC   LSync1                   ;Yep. Turn it into an $FF 
0326 0059B4 00B4              *        NOP 
0327 0059B4 00B4 9D 8D C0     MStore   STA   DiskWR,X                 ;Write byte to the disk 
0328 0059B7 00B7 DD 8C C0              CMP   DiskRD,X                 ;Set Read softswitch 
0329 0059BA 00BA C8                    INY                            ;Increment Y offset 
0330 0059BB 00BB D0 ED                 BNE   LSync2 
0331 0059BD 00BD E6 01                 INC   Buffer+1                 ;Increment Buffer by 255 
0332 0059BF 00BF D0 EB                 bne   LSync3                   ;MRP - More data 
0333 0059C1 00C1 BD 8E C0     WriteExit LDA   ModeRD,X                ;Restore Mode softswitch to READ 
0334 0059C4 00C4 BD 8C C0              LDA   DiskRD,X                 ;Restore Read softswitch to READ 
0335 0059C7 00C7 18                    CLC 
0336 0059C8 00C8 60                    RTS 
0337 0059C9 00C9              LWRprot  anop                           ;Disk is write protected! (Nerd!) 
0338 0059C9 00C9 A9 2B                 lda   #$2B 
0339 0059CB 00CB 38                    sec 
0340 0059CC 00CC 60                    rts 
0341 0059CD 00CD              ************************************ 
0342 0059CD 00CD              *                                  * 
0343 0059CD 00CD              * BUILD - Build GAP1 and 16 sector * 
0344 0059CD 00CD              * images between $9700 and $B000   * 
0345 0059CD 00CD              *                                  * 
0346 0059CD 00CD              ************************************ 
0347 0059CD 00CD              Build    anop 
0348 0059CD 00CD               
0349 0059CD 00CD A9 10                 LDA   #$10                     ;Set Buffer to $9710 
0350 0059CF 00CF A2 97                 LDX   #$97 
0351 0059D1 00D1 85 00                 STA   Buffer 
0352 0059D3 00D3 86 01                 STX   Buffer+1 
0353 0059D5 00D5 A0 00                 LDY   #$00                     ;(Y offset always zero) 
0354 0059D7 00D7 A2 F0                 LDX   #$F0                     ;Build GAP1 using $7F (sync byte) 
0355 0059D9 00D9 A9 7F                 LDA   #$7F 
0356 0059DB 00DB 8D DA 01              STA   LByte 
0357 0059DE 00DE 20 21 01              JSR   LFill                    ;Store sync bytes from $9710 to $9800 
0358 0059E1 00E1 A9 10                 LDA   #$10                     ;Set Count for 16 loops 
0359 0059E3 00E3 8D 10 02              STA   Count 
0360 0059E6 00E6 A2 00        LImage   LDX   #$00                     ;Build a sector image in the Buffer area 
0361 0059E8 00E8 BD DB 01     ELoop    LDA   LAddr,X                  ;Store Address header, info & sync bytes 
0362 0059EB 00EB F0 08                 BEQ   LInfo 
0363 0059ED 00ED 91 00                 STA   (Buffer),Y 
0364 0059EF 00EF 20 2D 01              JSR   LInc                     ;Add 1 to Buffer offset address 
0365 0059F2 00F2 E8                    INX 
0366 0059F3 00F3 D0 F3                 BNE   ELoop 
0367 0059F5 00F5 A2 AB        LInfo    LDX   #$AB                     ;Move 343 bytes into data area 
0368 0059F7 00F7 A9 96                 LDA   #$96                     ;(4&4 encoded version of hex $00) 
0369 0059F9 00F9 8D DA 01              STA   LByte 
0370 0059FC 00FC 20 21 01              JSR   LFill 
0371 0059FF 00FF A2 AC                 LDX   #$AC 
0372 005A01 0101 20 21 01              JSR   LFill 
0373 005A04 0104 A2 00                 LDX   #$00 
0374 005A06 0106 BD F3 01     YLoop    LDA   LData,X                  ;Store Data Trailer and GAP3 sync bytes 
0375 005A09 0109 F0 08                 BEQ   LDecCnt 
0376 005A0B 010B 91 00                 STA   (Buffer),Y 
0377 005A0D 010D 20 2D 01              JSR   LInc 
0378 005A10 0110 E8                    INX 
0379 005A11 0111 D0 F3                 BNE   YLoop 
0380 005A13 0113 18           LDecCnt  CLC 
0381 005A14 0114 CE 10 02              DEC   Count 
0382 005A17 0117 D0 CD                 BNE   LImage 
0383 005A19 0119 A9 00                 lda   #$00                     ;MRP - Save EOF marker 
0384 005A1B 011B 20 2D 01              jsr   LInc                     ;MRP 
0385 005A1E 011E 91 00                 sta   (Buffer),Y               ;MRP 
0386 005A20 0120 60                    RTS                            ;Return to write track to disk (WRITE) 
0387 005A21 0121 AD DA 01     LFill    LDA   LByte 
0388 005A24 0124 91 00                 STA   (Buffer),Y               ;Move A register to Buffer area 
0389 005A26 0126 20 2D 01              JSR   LInc                     ;Add 1 to Buffer offset address 
0390 005A29 0129 CA                    DEX 
0391 005A2A 012A D0 F5                 BNE   LFill 
0392 005A2C 012C 60                    RTS 
0393 005A2D 012D 18           LInc     CLC 
0394 005A2E 012E E6 00                 INC   Buffer                   ;Add 1 to Buffer address vector 
0395 005A30 0130 D0 02                 BNE   LDone 
0396 005A32 0132 E6 01                 INC   Buffer+1 
0397 005A34 0134 60           LDone    RTS 
0398 005A35 0135              *********************************** 
0399 005A35 0135              *                                 * 
0400 005A35 0135              * CALC - Calculate Track, Sector, * 
0401 005A35 0135              * and Checksum values of the next * 
0402 005A35 0135              * track using 4&4 encoding        * 
0403 005A35 0135              *                                 * 
0404 005A35 0135              *********************************** 
0405 005A35 0135              Calc     anop 
0406 005A35 0135               
0407 005A35 0135 A9 03                 LDA   #$03                     ;Set Buffer to $9803 
0408 005A37 0137 A2 98                 LDX   #$98 
0409 005A39 0139 85 00                 STA   Buffer 
0410 005A3B 013B 86 01                 STX   Buffer+1 
0411 005A3D 013D A9 00                 LDA   #$00                     ;Set Sector to 0 
0412 005A3F 013F 8D 15 02              STA   Sector 
0413 005A42 0142 A0 00        ZLoop    LDY   #$00                     ;Reset Y offset to 0 
0414 005A44 0144 AD 05 00              LDA   VolNum                   ;Set Volume # to 254 in 4&4 encoding 
0415 005A47 0147 20 7A 01              JSR   LEncode 
0416 005A4A 014A AD 13 02              LDA   Track                    ;Set Track, Sector to 4&4 encoding 
0417 005A4D 014D 20 7A 01              JSR   LEncode 
0418 005A50 0150 AD 15 02              LDA   Sector 
0419 005A53 0153 20 7A 01              JSR   LEncode 
0420 005A56 0156 AD 05 00              LDA   VolNum                   ;Calculate the Checksum using 254 
0421 005A59 0159 4D 13 02              EOR   Track 
0422 005A5C 015C 4D 15 02              EOR   Sector 
0423 005A5F 015F 20 7A 01              JSR   LEncode 
0424 005A62 0162 18                    CLC                            ;Add 385 ($181) to Buffer address 
0425 005A63 0163 A5 00                 LDA   Buffer 
0426 005A65 0165 69 81                 ADC   #$81 
0427 005A67 0167 85 00                 STA   Buffer 
0428 005A69 0169 A5 01                 LDA   Buffer+1 
0429 005A6B 016B 69 01                 ADC   #$01 
0430 005A6D 016D 85 01                 STA   Buffer+1 
0431 005A6F 016F EE 15 02              INC   Sector                   ;Add 1 to Sector value 
0432 005A72 0172 AD 15 02              LDA   Sector                   ;If Sector > 16 then quit 
0433 005A75 0175 C9 10                 CMP   #$10 
0434 005A77 0177 90 C9                 BCC   ZLoop 
0435 005A79 0179 60                    RTS                            ;Return to write track to disk (WRITE) 
0436 005A7A 017A 48           LEncode  PHA                            ;Put value on the stack 
0437 005A7B 017B 4A                    LSR   a                        ;Shift everything right one bit 
0438 005A7C 017C 09 AA                 ORA   #$AA                     ;OR it with $AA 
0439 005A7E 017E 91 00                 STA   (Buffer),Y               ;Store 4&4 result in Buffer area 
0440 005A80 0180 C8                    INY 
0441 005A81 0181 68                    PLA                            ;Retrieve value from the stack 
0442 005A82 0182 09 AA                 ORA   #$AA                     ;OR it with $AA 
0443 005A84 0184 91 00                 STA   (Buffer),Y               ;Store 4&4 result in Buffer area 
0444 005A86 0186 C8                    INY 
0445 005A87 0187 60                    RTS 
0446 005A88 0188              ************************************* 
0447 005A88 0188              *                                   * 
0448 005A88 0188              * SEEK - Move head to desired track * 
0449 005A88 0188              *                                   * 
0450 005A88 0188              ************************************* 
0451 005A88 0188              Seek     anop 
0452 005A88 0188               
0453 005A88 0188 A9 00                 LDA   #$00                     ;Set InOut flag to 0 
0454 005A8A 018A 8D 07 02              STA   LInOut 
0455 005A8D 018D AD 19 02              LDA   TRKcur                   ;Fetch current track value 
0456 005A90 0190 38                    SEC 
0457 005A91 0191 ED 1B 02              SBC   TRKdes                   ;Subtract destination track value 
0458 005A94 0194 F0 33                 BEQ   LExit                    ;If = 0 we're done 
0459 005A96 0196 B0 04                 BCS   LMove 
0460 005A98 0198 49 FF                 EOR   #$FF                     ;Convert resulting value to a positive number 
0461 005A9A 019A 69 01                 ADC   #$01 
0462 005A9C 019C 8D 10 02     LMove    STA   Count                    ;Store track value in Count 
0463 005A9F 019F 2E 07 02              ROL   LInOut                   ;Condition InOut flag 
0464 005AA2 01A2 4E 19 02              LSR   TRKcur                   ;Is track # odd or even? 
0465 005AA5 01A5 2E 07 02              ROL   LInOut                   ;Store result in InOut 
0466 005AA8 01A8 0E 07 02              ASL   LInOut                   ;Shift left for .Table offset 
0467 005AAB 01AB AC 07 02              LDY   LInOut 
0468 005AAE 01AE B9 08 02     ALoop    LDA   LTable,Y                 ;Fetch motor phase to turn on 
0469 005AB1 01B1 20 CA 01              JSR   PHASE                    ;Turn on stepper motor 
0470 005AB4 01B4 B9 09 02              LDA   LTable+1,Y               ;Fetch next phase 
0471 005AB7 01B7 20 CA 01              JSR   PHASE                    ;Turn on stepper motor 
0472 005ABA 01BA 98                    TYA 
0473 005ABB 01BB 49 02                 EOR   #$02                     ;Adjust Y offset into LTable 
0474 005ABD 01BD A8                    TAY 
0475 005ABE 01BE CE 10 02              DEC   Count                    ;Subtract 1 from track count 
0476 005AC1 01C1 D0 EB                 BNE   ALoop 
0477 005AC3 01C3 AD 1B 02              LDA   TRKdes                   ;Move current track location to TRKcur 
0478 005AC6 01C6 8D 19 02              STA   TRKcur 
0479 005AC9 01C9 60           LExit    RTS                            ;Return to calling routine 
0480 005ACA 01CA              ********************************** 
0481 005ACA 01CA              *                                * 
0482 005ACA 01CA              * PHASE - Turn the stepper motor * 
0483 005ACA 01CA              * on and off to move the head    * 
0484 005ACA 01CA              *                                * 
0485 005ACA 01CA              ********************************** 
0486 005ACA 01CA               
0487 005ACA 01CA              Phase    anop 
0488 005ACA 01CA 0D 17 02              ORA   SlotF                    ;OR Slot value to PHASE 
0489 005ACD 01CD AA                    TAX 
0490 005ACE 01CE BD 81 C0              LDA   Step1,X                  ;PHASE on... 
0491 005AD1 01D1 A9 56                 LDA   #$56                     ;20 ms. delay 
0492 005AD3 01D3 20 A8 FC              JSR   WAIT 
0493 005AD6 01D6 BD 80 C0              LDA   Step0,X                  ;PHASE off... 
0494 005AD9 01D9 60                    RTS 
0495 005ADA 01DA               
0496 005ADA 01DA               
0497 005ADA 01DA              ************************* 
0498 005ADA 01DA              *                       * 
0499 005ADA 01DA              * Variable Storage Area * 
0500 005ADA 01DA              *                       * 
0501 005ADA 01DA              ************************* 
0502 005ADA 01DA               
0503 005ADA 01DA 00           LByte    ds    1                        ;Storage for byte value used in Fill 
0504 005ADB 01DB D5 AA 96     LAddr    dc    H'D5 AA 96'              ;Address header 
0505 005ADE 01DE AA AA AA AA           dc    8i1'$AA'                 ;Volume #, Track, Sector, Checksum 
0506 005AE6 01E6 DE AA EB              dc    H'DE AA EB'              ;Address trailer 
0507 005AE9 01E9 7F 7F 7F 7F           dc    6i1'$7F'                 ;GAP2 sync bytes 
0508 005AEF 01EF D5 AA AD              dc    H'D5 AA AD'              ;Buffer header 
0509 005AF2 01F2 00                    dc    H'00'                    ;End of Address information 
0510 005AF3 01F3 DE AA EB     LData    dc    H'DE AA EB'              ;Data trailer 
0511 005AF6 01F6 7F 7F 7F 7F           dc    16i1'$7F'                ;GAP3 sync bytes 
0512 005B06 0206 00                    dc    H'00'                    ;End of Data information 
0513 005B07 0207               
0514 005B07 0207 00           LInOut   DS    1                        ;Inward/Outward phase for stepper motor 
0515 005B08 0208 02 04 06 00  LTable   dc    H'02040600'              ;Phases for moving head inward 
0516 005B0C 020C 06 04 02 00           dc    H'06040200'              ;   |    |    |      |  outward 
0517 005B10 0210 00 00 00     Count    DS    3                        ;General purpose counter/storage byte 
0518 005B13 0213 00 00        Track    DS    2                        ;Track number being FORMATted 
0519 005B15 0215 00 00        Sector   DS    2                        ;Current sector number (max=16) 
0520 005B17 0217 00 00        SlotF    DS    2                        ;Slot/Drive of device to FORMAT 
0521 005B19 0219 00 00        TRKcur   DS    2                        ;Current track position 
0522 005B1B 021B 00 00        TRKdes   DS    2                        ;Destination track position 
0523 005B1D 021D                       End 
 
 
 
Local  Symbols
 
ALOOP      0001AE  BUFFER     000000  BUILD      0000CD  CALC       000135   
COUNT      000210  DIED       000073  DISKOFF    00C088  DISKON     00C089   
DISKRD     00C08C  DISKWR     00C08D  DONE       000069  ELOOP      0000E8   
FORMAT     000007  LADDR      0001DB  LBYTE      0001DA  LDATA      0001F3   
LDECCNT    000113  LDONE      000134  LDRIVE1    000017  LENCODE    00017A   
LEXIT      0001C9  LFILL      000121  LIMAGE     0000E6  LINC       00012D   
LINFO      0000F5  LINOUT     000207  LMOVE      00019C  LNEXT      000060   
LSYNC1     0000A4  LSYNC2     0000AA  LSYNC3     0000AC  LTABLE     000208   
LWRPROT    0000C9  MINC       000053  MODERD     00C08E  MODEWR     00C08F   
MSTORE     0000B4  PHASE      0001CA  SECTOR     000215  SEEK       000188   
SELECT     00C08A  SLOT       000006  SLOTF      000217  STEP0      00C080   
STEP1      00C081  STEP2      00C082  STEP4      00C084  STEP6      00C086   
TRACK      000213  TRANS      000082  TRKBEG     000003  TRKCUR     000219   
TRKDES     00021B  TRKEND     000004  VOLNUM     000005  WAIT       00FCA8   
WRITE      00004B  WRITEEXIT  0000C1  YLOOP      000106  ZLOOP      000142   
0524 005B1D 0000               
0525 005B1D 0000              *          Standard MLI Calls 
0526 005B1D 0000               
0527 005B1D 0000                         Copy MLIOnLine.s 
0528 005B1D 0000              MLIOnLine  Start 
0529 005B1D 0000               
0530 005B1D 0000              *          MLI OnLine($C5) Call 
0531 005B1D 0000              * 
0532 005B1D 0000              *          Usage       : jsr MLIOnLine 
0533 005B1D 0000              *          Requirements: onlineUnit = 1 byte unit number 
0534 005B1D 0000              *                        onlineBuf = 256 byte data buffer 
0535 005B1D 0000               
0536 005B1D 0000              MLICode    equ  $C5 
0537 005B1D 0000              MLI        equ  $BF00 
0538 005B1D 0000               
0539 005B1D 0000 AD F7 08                lda  onlineUnit 
0540 005B20 0003 8D 10 00                sta  Unit_Num 
0541 005B23 0006               
0542 005B23 0006 20 00 BF                jsr  MLI 
0543 005B26 0009 C5                      dc   i1'MLICode' 
0544 005B27 000A 0F 00                   dc   a'Parms' 
0545 005B29 000C D0 05                   bne  CheckError 
0546 005B2B 000E               
0547 005B2B 000E              OkError    anop 
0548 005B2B 000E               
0549 005B2B 000E 60                      rts 
0550 005B2C 000F               
0551 005B2C 000F              Parms      anop 
0552 005B2C 000F               
0553 005B2C 000F 02                      dc   h'02' 
0554 005B2D 0010 00           Unit_Num   dc   i1'0' 
0555 005B2E 0011 00 0B        DataBuffer dc   a'onlineBuf' 
0556 005B30 0013               
0557 005B30 0013              CheckError anop 
0558 005B30 0013               
0559 005B30 0013 C9 27                   cmp  #$27                    I/O Error 
0560 005B32 0015 F0 F7                   beq  OkError 
0561 005B34 0017 C9 28                   cmp  #$28                    No Device Connected 
0562 005B36 0019 F0 F3                   beq  OkError 
0563 005B38 001B C9 2F                   cmp  #$2F                    Device Off-line 
0564 005B3A 001D F0 EF                   beq  OkError 
0565 005B3C 001F C9 52                   cmp  #$52                    Not a ProDOS disk 
0566 005B3E 0021 F0 EB                   beq  OkError 
0567 005B40 0023 48                      pha                          Save MLI error 
0568 005B41 0024 A9 C5                   lda  #MLICode 
0569 005B43 0026 48                      pha                          Save calling routine 
0570 005B44 0027 4C 00 80                jmp  MLIError 
0571 005B47 002A               
0572 005B47 002A                         End 
 
 
 
Local  Symbols
 
CHECKERROR 000013  DATABUFFER 000011  MLI        00BF00  MLICODE    0000C5   
OKERROR    00000E  PARMS      00000F  UNIT_NUM   000010   
0573 005B47 0000                         Copy MLIGetPrefix.s 
0574 005B47 0000              MLIGetPrefix Start 
0575 005B47 0000               
0576 005B47 0000              *          MLI Get Prefix($C7) Call 
0577 005B47 0000              * 
0578 005B47 0000              *          Usage       : jsr MLIGetPrefix 
0579 005B47 0000              *          Requirements: buffer named 'prefix' 64 bytes long 
0580 005B47 0000               
0581 005B47 0000              MLICode    equ  $C7 
0582 005B47 0000              MLI        equ  $BF00 
0583 005B47 0000               
0584 005B47 0000 20 00 BF                jsr  MLI 
0585 005B4A 0003 C7                      dc   i1'MLICode' 
0586 005B4B 0004 09 00                   dc   a'Parms' 
0587 005B4D 0006 D0 04                   bne  CheckError 
0588 005B4F 0008 60                      rts 
0589 005B50 0009               
0590 005B50 0009              Parms      anop 
0591 005B50 0009               
0592 005B50 0009 01                      dc   h'01' 
0593 005B51 000A 00 08                   dc   a'prefix' 
0594 005B53 000C               
0595 005B53 000C              CheckError anop 
0596 005B53 000C               
0597 005B53 000C 48                      pha                          Save MLI error 
0598 005B54 000D A9 C7                   lda  #MLICode 
0599 005B56 000F 48                      pha                          Save calling routine 
0600 005B57 0010 4C 00 80                jmp  MLIError 
0601 005B5A 0013               
0602 005B5A 0013                         End 
 
 
 
Local  Symbols
 
CHECKERROR 00000C  MLI        00BF00  MLICODE    0000C7  PARMS      000009   
0603 005B5A 0000                         Copy MLISetPrefix.s 
0604 005B5A 0000              MLISetPrefix Start 
0605 005B5A 0000               
0606 005B5A 0000              *          MLI Set Prefix($C6) Call 
0607 005B5A 0000              * 
0608 005B5A 0000              *          Usage       : jsr MLISetPrefix 
0609 005B5A 0000              *          Requirements: buffer named 'prefix' 64 bytes long 
0610 005B5A 0000               
0611 005B5A 0000              MLICode    equ  $C6 
0612 005B5A 0000              MLI        equ  $BF00 
0613 005B5A 0000               
0614 005B5A 0000 20 00 BF                jsr  MLI 
0615 005B5D 0003 C6                      dc   i1'MLICode' 
0616 005B5E 0004 09 00                   dc   a'Parms' 
0617 005B60 0006 D0 04                   bne  CheckError 
0618 005B62 0008 60                      rts 
0619 005B63 0009               
0620 005B63 0009              Parms      anop 
0621 005B63 0009               
0622 005B63 0009 01                      dc   h'01' 
0623 005B64 000A 00 08                   dc   a'prefix' 
0624 005B66 000C               
0625 005B66 000C              CheckError anop 
0626 005B66 000C               
0627 005B66 000C 48                      pha                          Save MLI error 
0628 005B67 000D A9 C6                   lda  #MLICode 
0629 005B69 000F 48                      pha                          Save calling routine 
0630 005B6A 0010 4C 00 80                jmp  MLIError 
0631 005B6D 0013               
0632 005B6D 0013                         End 
 
 
 
Local  Symbols
 
CHECKERROR 00000C  MLI        00BF00  MLICODE    0000C6  PARMS      000009   
0633 005B6D 0000                         Copy MLIOpen1.s 
0634 005B6D 0000              MLIOpen1   Start 
0635 005B6D 0000               
0636 005B6D 0000              *          MLI Open ($C8) Call 
0637 005B6D 0000              * 
0638 005B6D 0000              *          Usage       : jsr MLIOpen 
0639 005B6D 0000              *          Requirements: 'path' location of path to be opened 
0640 005B6D 0000              *                        'openBuf1' a 512 byte buffer 
0641 005B6D 0000              *          Returns     : 'openRef1' 1 byte file reference number 
0642 005B6D 0000               
0643 005B6D 0000              MLICode    equ  $C8 
0644 005B6D 0000              MLI        equ  $BF00 
0645 005B6D 0000               
0646 005B6D 0000 20 00 BF                jsr  MLI 
0647 005B70 0003 C8                      dc   i1'MLICode' 
0648 005B71 0004 11 00                   dc   a'Parms' 
0649 005B73 0006               
0650 005B73 0006 48                      pha                          Save possible MLI error code 
0651 005B74 0007 AD 16 00                lda  ref_num                 Get file reference number 
0652 005B77 000A 8D FC 08                sta  openRef1                Save reference number for user 
0653 005B7A 000D 68                      pla                          Restore possible MLI error code 
0654 005B7B 000E               
0655 005B7B 000E D0 07                   bne  CheckError              MLI error 
0656 005B7D 0010 60                      rts 
0657 005B7E 0011               
0658 005B7E 0011              Parms      anop 
0659 005B7E 0011               
0660 005B7E 0011 03           parm_count dc   h'03' 
0661 005B7F 0012 40 08        path_name  dc   a'path' 
0662 005B81 0014 00 09        io_buffer  dc   a'openBuf1' 
0663 005B83 0016 00           ref_num    ds   1 
0664 005B84 0017               
0665 005B84 0017              CheckError anop 
0666 005B84 0017               
0667 005B84 0017 48                      pha                          Save MLI error 
0668 005B85 0018 A9 C8                   lda  #MLICode 
0669 005B87 001A 48                      pha                          Save calling routine 
0670 005B88 001B 4C 00 80                jmp  MLIError 
0671 005B8B 001E               
0672 005B8B 001E                         End 
 
 
 
Local  Symbols
 
CHECKERROR 000017  IO_BUFFER  000014  MLI        00BF00  MLICODE    0000C8   
PARMS      000011  PARM_COUNT 000011  PATH_NAME  000012  REF_NUM    000016   
0673 005B8B 0000                         Copy MLISetMark.s 
0674 005B8B 0000              MLISetMark Start 
0675 005B8B 0000               
0676 005B8B 0000              *          MLI SET_MARK ($CE) Call 
0677 005B8B 0000              * 
0678 005B8B 0000              *          Usage       : jsr MLISetMark 
0679 005B8B 0000              *          Requirements: 'setMarkRef' 1 byte file reference number 
0680 005B8B 0000              *                        'setMarkPos' 3 byte absolute position to move to 
0681 005B8B 0000              *          Returns     : Nothing 
0682 005B8B 0000              * 
0683 005B8B 0000               
0684 005B8B 0000              MLICode    equ  $CE 
0685 005B8B 0000              MLI        equ  $BF00 
0686 005B8B 0000               
0687 005B8B 0000 AD F0 08                lda  setMarkRef 
0688 005B8E 0003 8D 23 00                sta  ref_num 
0689 005B91 0006               
0690 005B91 0006 AD F1 08                lda  setMarkPos 
0691 005B94 0009 8D 24 00                sta  position 
0692 005B97 000C               
0693 005B97 000C AD F2 08                lda  setMarkPos+1 
0694 005B9A 000F 8D 25 00                sta  position+1 
0695 005B9D 0012               
0696 005B9D 0012 AD F3 08                lda  setMarkPos+2 
0697 005BA0 0015 8D 26 00                sta  position+2 
0698 005BA3 0018               
0699 005BA3 0018 20 00 BF                jsr  MLI 
0700 005BA6 001B CE                      dc   i1'MLICode' 
0701 005BA7 001C 22 00                   dc   a'Parms' 
0702 005BA9 001E               
0703 005BA9 001E D0 07                   bne  CheckError              MLI error 
0704 005BAB 0020               
0705 005BAB 0020 80 0C                   bra  GoodError 
0706 005BAD 0022               
0707 005BAD 0022              Parms      anop 
0708 005BAD 0022               
0709 005BAD 0022 02           parm_count dc   h'02' 
0710 005BAE 0023 00           ref_num    ds   1 
0711 005BAF 0024 00 00 00     position   ds   3 
0712 005BB2 0027               
0713 005BB2 0027              CheckError anop 
0714 005BB2 0027               
0715 005BB2 0027 48                      pha                          Save MLI error 
0716 005BB3 0028 A9 CE                   lda  #MLICode 
0717 005BB5 002A 48                      pha                          Save calling routine 
0718 005BB6 002B 4C 00 80                jmp  MLIError 
0719 005BB9 002E               
0720 005BB9 002E              GoodError  anop 
0721 005BB9 002E               
0722 005BB9 002E 60                      rts 
0723 005BBA 002F               
0724 005BBA 002F                         End 
 
 
 
Local  Symbols
 
CHECKERROR 000027  GOODERROR  00002E  MLI        00BF00  MLICODE    0000CE   
PARMS      000022  PARM_COUNT 000022  POSITION   000024  REF_NUM    000023   
0725 005BBA 0000                         Copy MLIRead.s 
0726 005BBA 0000              MLIRead    Start 
0727 005BBA 0000               
0728 005BBA 0000              *          MLI Read ($CA) Call 
0729 005BBA 0000              * 
0730 005BBA 0000              *          Usage       : jsr MLIRead 
0731 005BBA 0000              *          Requirements: 'readRef' 1 byte file reference number 
0732 005BBA 0000              *                        'readRequest' 2 byte number of byte to read 
0733 005BBA 0000              *                        'readBuf' destination data buffer 
0734 005BBA 0000              *          Returns     : 'readTrans' 2 byte number of bytes actually read 
0735 005BBA 0000              *                                    0 = EOF 
0736 005BBA 0000               
0737 005BBA 0000              MLICode    equ  $CA 
0738 005BBA 0000              MLI        equ  $BF00 
0739 005BBA 0000               
0740 005BBA 0000 AD FD 08                lda  readRef 
0741 005BBD 0003 8D 1D 00                sta  ref_num 
0742 005BC0 0006 AD F8 08                lda  readRequest 
0743 005BC3 0009 8D 20 00                sta  req_count 
0744 005BC6 000C AD F9 08                lda  readRequest+1 
0745 005BC9 000F 8D 21 00                sta  req_count+1 
0746 005BCC 0012               
0747 005BCC 0012 20 00 BF                jsr  MLI 
0748 005BCF 0015 CA                      dc   i1'MLICode' 
0749 005BD0 0016 1C 00                   dc   a'Parms' 
0750 005BD2 0018               
0751 005BD2 0018 D0 0A                   bne  CheckError              MLI error 
0752 005BD4 001A               
0753 005BD4 001A 80 13                   bra  GoodError 
0754 005BD6 001C               
0755 005BD6 001C              Parms      anop 
0756 005BD6 001C               
0757 005BD6 001C 04           parm_count dc   h'04' 
0758 005BD7 001D 00           ref_num    ds   1 
0759 005BD8 001E 00 10        data_buf   dc   a'readBuf' 
0760 005BDA 0020 00 00        req_count  ds   2 
0761 005BDC 0022 00 00        tran_count ds   2 
0762 005BDE 0024               
0763 005BDE 0024              CheckError anop 
0764 005BDE 0024               
0765 005BDE 0024 C9 4C                   cmp  #$4C                    EOF error code 
0766 005BE0 0026 F0 07                   beq  GoodError 
0767 005BE2 0028               
0768 005BE2 0028 48                      pha                          Save MLI error 
0769 005BE3 0029 A9 CA                   lda  #MLICode 
0770 005BE5 002B 48                      pha                          Save calling routine 
0771 005BE6 002C 4C 00 80                jmp  MLIError 
0772 005BE9 002F               
0773 005BE9 002F              GoodError  anop 
0774 005BE9 002F               
0775 005BE9 002F 48                      pha                          Save error code 
0776 005BEA 0030 AD 22 00                lda  tran_count              return byte transfer count 
0777 005BED 0033 8D FA 08                sta  readTrans 
0778 005BF0 0036 AD 23 00                lda  tran_count+1 
0779 005BF3 0039 8D FB 08                sta  readTrans+1 
0780 005BF6 003C 68                      pla                          Restore error code 
0781 005BF7 003D               
0782 005BF7 003D 60                      rts 
0783 005BF8 003E               
0784 005BF8 003E                         End 
 
 
 
Local  Symbols
 
CHECKERROR 000024  DATA_BUF   00001E  GOODERROR  00002F  MLI        00BF00   
MLICODE    0000CA  PARMS      00001C  PARM_COUNT 00001C  REF_NUM    00001D   
REQ_COUNT  000020  TRAN_COUNT 000022   
0785 005BF8 0000                         Copy MLIRead4K.s 
0786 005BF8 0000              MLIRead4K  Start 
0787 005BF8 0000                         Using Menu2Vars 
0788 005BF8 0000               
0789 005BF8 0000              *          MLI Read ($CA) Call 
0790 005BF8 0000              * 
0791 005BF8 0000              *          Usage       : jsr MLIRead 
0792 005BF8 0000              *          Requirements: 'readRef' 1 byte file reference number 
0793 005BF8 0000              *                        'readRequest' 2 byte number of byte to read 
0794 005BF8 0000              *                        'readBuf' destination data buffer 
0795 005BF8 0000              *          Returns     : 'readTrans' 2 byte number of bytes actually read 
0796 005BF8 0000              *                                    0 = EOF 
0797 005BF8 0000               
0798 005BF8 0000              MLICode    equ  $CA 
0799 005BF8 0000              MLI        equ  $BF00 
0800 005BF8 0000               
0801 005BF8 0000 AD FD 08                lda  readRef 
0802 005BFB 0003 8D 19 00                sta  ref_num 
0803 005BFE 0006 9C 1C 00                stz  req_count 
0804 005C01 0009 A9 10                   lda  #$10 
0805 005C03 000B 8D 1D 00                sta  req_count+1 
0806 005C06 000E               
0807 005C06 000E 20 00 BF                jsr  MLI 
0808 005C09 0011 CA                      dc   i1'MLICode' 
0809 005C0A 0012 18 00                   dc   a'Parms' 
0810 005C0C 0014               
0811 005C0C 0014 D0 0A                   bne  CheckError              MLI error 
0812 005C0E 0016               
0813 005C0E 0016 80 13                   bra  GoodError 
0814 005C10 0018               
0815 005C10 0018              Parms      anop 
0816 005C10 0018               
0817 005C10 0018 04           parm_count dc   h'04' 
0818 005C11 0019 00           ref_num    ds   1 
0819 005C12 001A 00 80        data_buf   dc   a'Buffer8K' 
0820 005C14 001C 00 00        req_count  ds   2 
0821 005C16 001E 00 00        tran_count ds   2 
0822 005C18 0020               
0823 005C18 0020              CheckError anop 
0824 005C18 0020               
0825 005C18 0020 C9 4C                   cmp  #$4C                    EOF error code 
0826 005C1A 0022 F0 07                   beq  GoodError 
0827 005C1C 0024               
0828 005C1C 0024 48                      pha                          Save MLI error 
0829 005C1D 0025 A9 CA                   lda  #MLICode 
0830 005C1F 0027 48                      pha                          Save calling routine 
0831 005C20 0028 4C 00 80                jmp  MLIError 
0832 005C23 002B               
0833 005C23 002B              GoodError  anop 
0834 005C23 002B               
0835 005C23 002B 48                      pha                          Save error code 
0836 005C24 002C AD 1E 00                lda  tran_count              return byte transfer count 
0837 005C27 002F 8D FA 08                sta  readTrans 
0838 005C2A 0032 AD 1F 00                lda  tran_count+1 
0839 005C2D 0035 8D FB 08                sta  readTrans+1 
0840 005C30 0038 68                      pla                          Restore error code 
0841 005C31 0039               
0842 005C31 0039 60                      rts 
0843 005C32 003A               
0844 005C32 003A                         End 
 
 
 
Local  Symbols
 
CHECKERROR 000020  DATA_BUF   00001A  GOODERROR  00002B  MLI        00BF00   
MLICODE    0000CA  PARMS      000018  PARM_COUNT 000018  REF_NUM    000019   
REQ_COUNT  00001C  TRAN_COUNT 00001E   
0845 005C32 0000                         Copy MLIWriteBlock.s 
0846 005C32 0000              MLIWriteBlk Start 
0847 005C32 0000               
0848 005C32 0000              *          MLI Write Block ($81) Call 
0849 005C32 0000              * 
0850 005C32 0000              *          Usage       : jsr MLIWriteBlock 
0851 005C32 0000              *          Requirements: 'wrblkUnit' 1 byte unit number. 
0852 005C32 0000              *                        'wrblkDataBuf' 512 byte buffer to be written. 
0853 005C32 0000              *                        'wrblkBlockNum' 2 byte block number to write 
0854 005C32 0000               
0855 005C32 0000              MLICode    equ  $81 
0856 005C32 0000              MLI        equ  $BF00 
0857 005C32 0000               
0858 005C32 0000 AD ED 08                lda  wrblkUnit 
0859 005C35 0003 8D 1D 00                sta  unit_num 
0860 005C38 0006 AD EE 08                lda  wrblkBlockNum 
0861 005C3B 0009 8D 20 00                sta  block_num 
0862 005C3E 000C AD EF 08                lda  wrblkBlockNum+1 
0863 005C41 000F 8D 21 00                sta  block_num+1 
0864 005C44 0012               
0865 005C44 0012 20 00 BF                jsr  MLI 
0866 005C47 0015 81                      dc   i1'MLICode' 
0867 005C48 0016 1C 00                   dc   a'Parms' 
0868 005C4A 0018               
0869 005C4A 0018 D0 08                   bne  CheckError              MLI error 
0870 005C4C 001A               
0871 005C4C 001A 80 1D                   bra  GoodError 
0872 005C4E 001C               
0873 005C4E 001C              Parms      anop 
0874 005C4E 001C               
0875 005C4E 001C 03           parm_count dc   h'03' 
0876 005C4F 001D 00           unit_num   ds   1 
0877 005C50 001E 00 14        data_buf   dc   a'wrblkDataBuf' 
0878 005C52 0020 00 00        block_num  ds   2 
0879 005C54 0022               
0880 005C54 0022              CheckError anop 
0881 005C54 0022               
0882 005C54 0022 C9 27                   cmp  #$27                    IO Error 
0883 005C56 0024 F0 13                   beq  GoodError 
0884 005C58 0026 C9 28                   cmp  #$28                    No device connected 
0885 005C5A 0028 F0 0F                   beq  GoodError 
0886 005C5C 002A C9 2B                   cmp  #$2B                    Disk write protect 
0887 005C5E 002C F0 0B                   beq  GoodError 
0888 005C60 002E C9 2F                   cmp  #$2F                    Device offline 
0889 005C62 0030 F0 07                   beq  GoodError 
0890 005C64 0032               
0891 005C64 0032 48                      pha                          Save MLI error 
0892 005C65 0033 A9 81                   lda  #MLICode 
0893 005C67 0035 48                      pha                          Save calling routine 
0894 005C68 0036 4C 00 80                jmp  MLIError 
0895 005C6B 0039               
0896 005C6B 0039              GoodError  anop 
0897 005C6B 0039               
0898 005C6B 0039 C9 00                   cmp  #$00                    Set status register 
0899 005C6D 003B               
0900 005C6D 003B 60                      rts 
0901 005C6E 003C               
0902 005C6E 003C                         End 
 
 
 
Local  Symbols
 
BLOCK_NUM  000020  CHECKERROR 000022  DATA_BUF   00001E  GOODERROR  000039   
MLI        00BF00  MLICODE    000081  PARMS      00001C  PARM_COUNT 00001C   
UNIT_NUM   00001D   
0903 005C6E 0000                         Copy MLIGetEOF.s 
0904 005C6E 0000              MLIGetEOF  Start 
0905 005C6E 0000               
0906 005C6E 0000              *          MLI GET_EOF ($D1) Call 
0907 005C6E 0000              * 
0908 005C6E 0000              *          Usage       : jsr MLIGetEOF 
0909 005C6E 0000              *          Requirements: 'geteofRef' 1 byte file reference number 
0910 005C6E 0000              *          Returns     : 'geteofEOF' 3 byte result containing the maximum number 
0911 005C6E 0000              *                                    of bytes that can be read from file 
0912 005C6E 0000               
0913 005C6E 0000              MLICode    equ  $D1 
0914 005C6E 0000              MLI        equ  $BF00 
0915 005C6E 0000               
0916 005C6E 0000 AD FE 08                lda  geteofRef 
0917 005C71 0003 8D 11 00                sta  ref_num 
0918 005C74 0006               
0919 005C74 0006 20 00 BF                jsr  MLI 
0920 005C77 0009 D1                      dc   i1'MLICode' 
0921 005C78 000A 10 00                   dc   a'Parms' 
0922 005C7A 000C               
0923 005C7A 000C D0 07                   bne  CheckError              MLI error 
0924 005C7C 000E               
0925 005C7C 000E 80 0C                   bra  GoodError 
0926 005C7E 0010               
0927 005C7E 0010              Parms      anop 
0928 005C7E 0010               
0929 005C7E 0010 02           parm_count dc   h'02' 
0930 005C7F 0011 00           ref_num    ds   1 
0931 005C80 0012 00 00 00     eof        ds   3 
0932 005C83 0015               
0933 005C83 0015              CheckError anop 
0934 005C83 0015               
0935 005C83 0015 48                      pha                          Save MLI error 
0936 005C84 0016 A9 D1                   lda  #MLICode 
0937 005C86 0018 48                      pha                          Save calling routine 
0938 005C87 0019 4C 00 80                jmp  MLIError 
0939 005C8A 001C               
0940 005C8A 001C              GoodError  anop 
0941 005C8A 001C               
0942 005C8A 001C 48                      pha                          Save error code 
0943 005C8B 001D AD 12 00                lda  eof 
0944 005C8E 0020 8D F4 08                sta  geteofEOF 
0945 005C91 0023 AD 13 00                lda  eof+1 
0946 005C94 0026 8D F5 08                sta  geteofEOF+1 
0947 005C97 0029 AD 14 00                lda  eof+2 
0948 005C9A 002C 8D F6 08                sta  geteofEOF+2 
0949 005C9D 002F 68                      pla                          Restore error code 
0950 005C9E 0030               
0951 005C9E 0030 60                      rts 
0952 005C9F 0031               
0953 005C9F 0031                         End 
 
 
 
Local  Symbols
 
CHECKERROR 000015  EOF        000012  GOODERROR  00001C  MLI        00BF00   
MLICODE    0000D1  PARMS      000010  PARM_COUNT 000010  REF_NUM    000011   
0954 005C9F 0000                         Copy MLIClose.s 
0955 005C9F 0000              MLIClose   Start 
0956 005C9F 0000               
0957 005C9F 0000              *          MLI Close($CC) Call 
0958 005C9F 0000              * 
0959 005C9F 0000              *          Usage       : jsr MLIClose 
0960 005C9F 0000              *          Requirements: 'closeRef' 1 byte file reference number 
0961 005C9F 0000              *          Returns     : None. 
0962 005C9F 0000               
0963 005C9F 0000              MLICode    equ  $CC 
0964 005C9F 0000              MLI        equ  $BF00 
0965 005C9F 0000               
0966 005C9F 0000 AD FF 08                lda  closeRef 
0967 005CA2 0003 8D 10 00                sta  ref_num 
0968 005CA5 0006               
0969 005CA5 0006 20 00 BF                jsr  MLI 
0970 005CA8 0009 CC                      dc   i1'MLICode' 
0971 005CA9 000A 0F 00                   dc   a'Parms' 
0972 005CAB 000C               
0973 005CAB 000C D0 03                   bne  CheckError              MLI error 
0974 005CAD 000E               
0975 005CAD 000E 60                      rts 
0976 005CAE 000F               
0977 005CAE 000F              Parms      anop 
0978 005CAE 000F               
0979 005CAE 000F 01           parm_count dc   h'01' 
0980 005CAF 0010 00           ref_num    ds   1 
0981 005CB0 0011               
0982 005CB0 0011              CheckError anop 
0983 005CB0 0011               
0984 005CB0 0011 48                      pha                          Save MLI error 
0985 005CB1 0012 A9 CC                   lda  #MLICode 
0986 005CB3 0014 48                      pha                          Save calling routine 
0987 005CB4 0015 4C 00 80                jmp  MLIError 
0988 005CB7 0018               
0989 005CB7 0018                         End 
 
 
 
Local  Symbols
 
CHECKERROR 000011  MLI        00BF00  MLICODE    0000CC  PARMS      00000F   
PARM_COUNT 00000F  REF_NUM    000010   
0990 005CB7 0000                         Copy MLIQuit.s 
0991 005CB7 0000              MLIQuit    Start 
0992 005CB7 0000               
0993 005CB7 0000              *          MLI Quit ($65) Call 
0994 005CB7 0000              * 
0995 005CB7 0000              *          Usage       : jmp MLIQuit 
0996 005CB7 0000              *          Requirements: None 
0997 005CB7 0000               
0998 005CB7 0000              MLI        equ  $BF00 
0999 005CB7 0000               
1000 005CB7 0000 20 00 BF                jsr  MLI 
1001 005CBA 0003 65                      dc   h'65' 
1002 005CBB 0004 06 00                   dc   a'Parms' 
1003 005CBD 0006               
1004 005CBD 0006              Parms      anop 
1005 005CBD 0006               
1006 005CBD 0006 04                      dc   h'04' 
1007 005CBE 0007 00 00 00 00             dc   i6'00' 
1008 005CC4 000D               
1009 005CC4 000D                         End 
 
 
 
Local  Symbols
 
MLI        00BF00  PARMS      000006   
1010 005CC4 0000                         Copy MLIError.s 
1011 005CC4 0000              MLIError   Start 
1012 005CC4 0000               
1013 005CC4 0000              * 
1014 005CC4 0000              * Print MLI Error 
1015 005CC4 0000              * 
1016 005CC4 0000               
1017 005CC4 0000              cout       equ  $FDED 
1018 005CC4 0000              kbd        equ  $C000 
1019 005CC4 0000              clrkbd     equ  $C010 
1020 005CC4 0000               
1021 005CC4 0000 68                      pla 
1022 005CC5 0001 20 4B 00                jsr  GetASCII 
1023 005CC8 0004 AD 65 00                lda  ASCII 
1024 005CCB 0007 8D 47 00                sta  ErrorRtn 
1025 005CCE 000A AD 66 00                lda  ASCII+1 
1026 005CD1 000D 8D 48 00                sta  ErrorRtn+1 
1027 005CD4 0010               
1028 005CD4 0010 68                      pla 
1029 005CD5 0011 48                      pha                          Save error code 
1030 005CD6 0012 20 4B 00                jsr  GetASCII 
1031 005CD9 0015 AD 65 00                lda  ASCII 
1032 005CDC 0018 8D 39 00                sta  ErrorCode 
1033 005CDF 001B AD 66 00                lda  ASCII+1 
1034 005CE2 001E 8D 3A 00                sta  ErrorCode+1 
1035 005CE5 0021               
1036 005CE5 0021 A9 2E                   lda  #Message 
1037 005CE7 0023 85 82                   sta  MsgPtr 
1038 005CE9 0025 A9 00                   lda  #>Message 
1039 005CEB 0027 85 83                   sta  MsgPtr+1 
1040 005CED 0029               
1041 005CED 0029 20 00 80                jsr  MsgOk 
1042 005CF0 002C               
1043 005CF0 002C 68                      pla                          Restore error code 
1044 005CF1 002D               
1045 005CF1 002D 60                      rts 
1046 005CF2 002E               
1047 005CF2 002E                         Msb  On 
1048 005CF2 002E CD CC C9 A0  Message    dc   c'MLI Error $' 
1049 005CFD 0039 00 00        ErrorCode  ds   2 
1050 005CFF 003B A0 E6 F2 EF             dc   c' from call $' 
1051 005D0B 0047 00 00        ErrorRtn   ds   2 
1052 005D0D 0049 AE 00                   dc   c'.',h'00' 
1053 005D0F 004B                         Msb  Off 
1054 005D0F 004B               
1055 005D0F 004B              GetASCII   anop 
1056 005D0F 004B               
1057 005D0F 004B A8                      tay 
1058 005D10 004C 18                      clc 
1059 005D11 004D A2 04                   ldx  #4 
1060 005D13 004F               
1061 005D13 004F              GetASCII1  anop 
1062 005D13 004F               
1063 005D13 004F 4A                      lsr  a 
1064 005D14 0050 CA                      dex 
1065 005D15 0051 D0 FC                   bne  GetASCII1 
1066 005D17 0053               
1067 005D17 0053 AA                      tax 
1068 005D18 0054 BD 67 00                lda  HexTable,x 
1069 005D1B 0057 8D 65 00                sta  ASCII 
1070 005D1E 005A               
1071 005D1E 005A 98                      tya 
1072 005D1F 005B 29 0F                   and  #$0F 
1073 005D21 005D AA                      tax 
1074 005D22 005E BD 67 00                lda  HexTable,x 
1075 005D25 0061 8D 66 00                sta  ASCII+1 
1076 005D28 0064               
1077 005D28 0064 60                      rts 
1078 005D29 0065               
1079 005D29 0065 00 00        ASCII      ds   2 
1080 005D2B 0067               
1081 005D2B 0067                         Msb  On 
1082 005D2B 0067 B0 B1 B2 B3  HexTable   dc   c'0123456789ABCDEF' 
1083 005D3B 0077                         Msb  Off 
1084 005D3B 0077               
1085 005D3B 0077                         End 
 
 
 
Local  Symbols
 
ASCII      000065  CLRKBD     00C010  COUT       00FDED  ERRORCODE  000039   
ERRORRTN   000047  GETASCII   00004B  GETASCII1  00004F  HEXTABLE   000067   
KBD        00C000  MESSAGE    00002E   
1086 005D3B 0000               
1087 005D3B 0000              *          Utility Routines 
1088 005D3B 0000               
1089 005D3B 0000              *          Copy Pause.s 
1090 005D3B 0000                         Copy Beep.s 
1091 005D3B 0000              Beep       Start 
1092 005D3B 0000               
1093 005D3B 0000              * 
1094 005D3B 0000              *          Beep speaker 
1095 005D3B 0000              * 
1096 005D3B 0000               
1097 005D3B 0000              Wait       equ  $FCA8 
1098 005D3B 0000              Speaker    equ  $C030 
1099 005D3B 0000               
1100 005D3B 0000 A9 20                   lda  #$20 
1101 005D3D 0002 8D 1B 00                sta  Length 
1102 005D40 0005               
1103 005D40 0005 A9 02        B1         lda  #$02 
1104 005D42 0007 20 A8 FC                jsr  Wait 
1105 005D45 000A 8D 30 C0                sta  Speaker 
1106 005D48 000D A9 24                   lda  #$24 
1107 005D4A 000F 20 A8 FC                jsr  Wait 
1108 005D4D 0012 8D 30 C0                sta  Speaker 
1109 005D50 0015 CE 1B 00                dec  Length 
1110 005D53 0018 D0 EB                   bne  B1 
1111 005D55 001A               
1112 005D55 001A 60                      rts 
1113 005D56 001B               
1114 005D56 001B 00           Length     ds   1 
1115 005D57 001C               
1116 005D57 001C                         End 
 
 
 
Local  Symbols
 
B1         000005  LENGTH     00001B  SPEAKER    00C030  WAIT       00FCA8   
1117 005D57 0000                         Copy MessageBox.s 
1118 005D57 0000              MessageBox Start 
1119 005D57 0000               
1120 005D57 0000 80 46                   bra  MsgOk 
1121 005D59 0002               
1122 005D59 0002              * 
1123 005D59 0002              * Standard messagebox 
1124 005D59 0002              * 
1125 005D59 0002               
1126 005D59 0002 00           Mode       ds   1 
1127 005D5A 0003              ModeOk     equ  1 
1128 005D5A 0003              ModeOKCan1 equ  2 
1129 005D5A 0003              ModeOkCan2 equ  3 
1130 005D5A 0003              ModeRetCn1 equ  4 
1131 005D5A 0003              ModeRetCn2 equ  5 
1132 005D5A 0003              ModeFmtCn1 equ  6 
1133 005D5A 0003              ModeFmtCn2 equ  7 
1134 005D5A 0003              ModeBtCan  equ  8 
1135 005D5A 0003               
1136 005D5A 0003 00           MsgWidth   ds   1 
1137 005D5B 0004 00           StartHTab  ds   1 
1138 005D5C 0005 00           BoxWidth   ds   1 
1139 005D5D 0006 00           TempSave   ds   1 
1140 005D5E 0007 00           MinMsg     ds   1 
1141 005D5F 0008 00           B1HTabS    ds   1 
1142 005D60 0009 00           B1HTabE    ds   1 
1143 005D61 000A 00           B2HTabS    ds   1 
1144 005D62 000B 00           B2HTabE    ds   1 
1145 005D63 000C 00           NumButts   ds   1 
1146 005D64 000D               
1147 005D64 000D 00           TabIndex   ds   1 
1148 005D65 000E              Button1    equ  0 
1149 005D65 000E              Button2    equ  1 
1150 005D65 000E               
1151 005D65 000E                         Msb  On 
1152 005D65 000E A0 A0 A0 CF  txtOk      dc   c'   Ok   ' 
1153 005D6D 0016 A0 C3 E1 EE  txtCancel  dc   c' Cancel ' 
1154 005D75 001E A0 D2 E5 F4  txtRetry   dc   c' Retry  ' 
1155 005D7D 0026 A0 C6 EF F2  txtFormat  dc   c' Format ' 
1156 005D85 002E A0 A0 C2 EF  txtBoot    dc   c'  Boot  ' 
1157 005D8D 0036                         Msb  Off 
1158 005D8D 0036               
1159 005D8D 0036 00 00 00 00  B1Text     ds   8 
1160 005D95 003E 00 00 00 00  B2Text     ds   8 
1161 005D9D 0046               
1162 005D9D 0046 00           RC         ds   1                       UI return code 
1163 005D9E 0047              TabOnly    equ  1 
1164 005D9E 0047              CROnly     equ  2 
1165 005D9E 0047               
1166 005D9E 0047 00           KeyPress   ds   1                       Keypress save area 
1167 005D9F 0048               
1168 005D9F 0048              * Single button "Ok" message box 
1169 005D9F 0048               
1170 005D9F 0048              MsgOk      Entry 
1171 005D9F 0048               
1172 005D9F 0048 A9 01                   lda  #ModeOk 
1173 005DA1 004A 8D 02 00                sta  Mode 
1174 005DA4 004D A9 0A                   lda  #10                     Minimum message size 
1175 005DA6 004F 8D 07 00                sta  MinMsg 
1176 005DA9 0052 A9 01                   lda  #1                      Number of command buttons 
1177 005DAB 0054 8D 0C 00                sta  NumButts 
1178 005DAE 0057 9C 0D 00                stz  TabIndex 
1179 005DB1 005A A2 07                   ldx  #7 
1180 005DB3 005C BD 0E 00     txtLoop1   lda  txtOk,x 
1181 005DB6 005F 9D 36 00                sta  B1Text,x 
1182 005DB9 0062 CA                      dex 
1183 005DBA 0063 10 F7                   bpl  txtLoop1 
1184 005DBC 0065 4C 7A 01                jmp  MsgStart 
1185 005DBF 0068               
1186 005DBF 0068              * Dual Ok/Cancel button messagebox, default Ok. 
1187 005DBF 0068               
1188 005DBF 0068              MsgOkCan1  Entry 
1189 005DBF 0068               
1190 005DBF 0068 A9 02                   lda  #ModeOkCan1 
1191 005DC1 006A 8D 02 00                sta  Mode 
1192 005DC4 006D A9 17                   lda  #23                     Minimum message size 
1193 005DC6 006F 8D 07 00                sta  MinMsg 
1194 005DC9 0072 A9 02                   lda  #2                      Number of command buttons 
1195 005DCB 0074 8D 0C 00                sta  NumButts 
1196 005DCE 0077 9C 0D 00                stz  TabIndex 
1197 005DD1 007A A2 07                   ldx  #7 
1198 005DD3 007C BD 0E 00     txtLoop2   lda  txtOk,x 
1199 005DD6 007F 9D 36 00                sta  B1Text,x 
1200 005DD9 0082 BD 16 00                lda  txtCancel,x 
1201 005DDC 0085 9D 3E 00                sta  B2Text,x 
1202 005DDF 0088 CA                      dex 
1203 005DE0 0089 10 F1                   bpl  txtLoop2 
1204 005DE2 008B 4C 7A 01                jmp  MsgStart 
1205 005DE5 008E               
1206 005DE5 008E              * Dual Ok/Cancel button messagebox, default Cancel. 
1207 005DE5 008E               
1208 005DE5 008E              MsgOkCan2  Entry 
1209 005DE5 008E               
1210 005DE5 008E A9 03                   lda  #ModeOkCan2 
1211 005DE7 0090 8D 02 00                sta  Mode 
1212 005DEA 0093 A9 17                   lda  #23                     Minimum message size 
1213 005DEC 0095 8D 07 00                sta  MinMsg 
1214 005DEF 0098 A9 02                   lda  #2                      Number of command buttons 
1215 005DF1 009A 8D 0C 00                sta  NumButts 
1216 005DF4 009D A9 01                   lda  #1 
1217 005DF6 009F 8D 0D 00                sta  TabIndex 
1218 005DF9 00A2 A2 07                   ldx  #7 
1219 005DFB 00A4 BD 0E 00     txtLoop3   lda  txtOk,x 
1220 005DFE 00A7 9D 36 00                sta  B1Text,x 
1221 005E01 00AA BD 16 00                lda  txtCancel,x 
1222 005E04 00AD 9D 3E 00                sta  B2Text,x 
1223 005E07 00B0 CA                      dex 
1224 005E08 00B1 10 F1                   bpl  txtLoop3 
1225 005E0A 00B3 4C 7A 01                jmp  MsgStart 
1226 005E0D 00B6               
1227 005E0D 00B6              * Dual Retry/Cancel button messagebox, default Retry. 
1228 005E0D 00B6               
1229 005E0D 00B6              MsgRetCan1 Entry 
1230 005E0D 00B6               
1231 005E0D 00B6 A9 04                   lda  #ModeRetCn1 
1232 005E0F 00B8 8D 02 00                sta  Mode 
1233 005E12 00BB A9 17                   lda  #23                     Minimum message size 
1234 005E14 00BD 8D 07 00                sta  MinMsg 
1235 005E17 00C0 A9 02                   lda  #2                      Number of command buttons 
1236 005E19 00C2 8D 0C 00                sta  NumButts 
1237 005E1C 00C5 9C 0D 00                stz  TabIndex 
1238 005E1F 00C8 A2 07                   ldx  #7 
1239 005E21 00CA BD 1E 00     txtLoop4   lda  txtRetry,x 
1240 005E24 00CD 9D 36 00                sta  B1Text,x 
1241 005E27 00D0 BD 16 00                lda  txtCancel,x 
1242 005E2A 00D3 9D 3E 00                sta  B2Text,x 
1243 005E2D 00D6 CA                      dex 
1244 005E2E 00D7 10 F1                   bpl  txtLoop4 
1245 005E30 00D9 4C 7A 01                jmp  MsgStart 
1246 005E33 00DC               
1247 005E33 00DC              * Dual Retry/Cancel button messagebox, default Cancel. 
1248 005E33 00DC               
1249 005E33 00DC              MsgRetCan2 Entry 
1250 005E33 00DC               
1251 005E33 00DC A9 05                   lda  #ModeRetCn2 
1252 005E35 00DE 8D 02 00                sta  Mode 
1253 005E38 00E1 A9 17                   lda  #23                     Minimum message size 
1254 005E3A 00E3 8D 07 00                sta  MinMsg 
1255 005E3D 00E6 A9 02                   lda  #2                      Number of command buttons 
1256 005E3F 00E8 8D 0C 00                sta  NumButts 
1257 005E42 00EB A9 01                   lda  #1 
1258 005E44 00ED 8D 0D 00                sta  TabIndex 
1259 005E47 00F0 A2 07                   ldx  #7 
1260 005E49 00F2 BD 1E 00     txtLoop5   lda  txtRetry,x 
1261 005E4C 00F5 9D 36 00                sta  B1Text,x 
1262 005E4F 00F8 BD 16 00                lda  txtCancel,x 
1263 005E52 00FB 9D 3E 00                sta  B2Text,x 
1264 005E55 00FE CA                      dex 
1265 005E56 00FF 10 F1                   bpl  txtLoop5 
1266 005E58 0101 4C 7A 01                jmp  MsgStart 
1267 005E5B 0104               
1268 005E5B 0104              * Dual Format/Cancel button messagebox, default Format. 
1269 005E5B 0104               
1270 005E5B 0104              MsgFmtCan1 Entry 
1271 005E5B 0104               
1272 005E5B 0104 A9 06                   lda  #ModeFmtCn1 
1273 005E5D 0106 8D 02 00                sta  Mode 
1274 005E60 0109 A9 17                   lda  #23                     Minimum message size 
1275 005E62 010B 8D 07 00                sta  MinMsg 
1276 005E65 010E A9 02                   lda  #2                      Number of command buttons 
1277 005E67 0110 8D 0C 00                sta  NumButts 
1278 005E6A 0113 9C 0D 00                stz  TabIndex 
1279 005E6D 0116 A2 07                   ldx  #7 
1280 005E6F 0118 BD 26 00     txtLoop6   lda  txtFormat,x 
1281 005E72 011B 9D 36 00                sta  B1Text,x 
1282 005E75 011E BD 16 00                lda  txtCancel,x 
1283 005E78 0121 9D 3E 00                sta  B2Text,x 
1284 005E7B 0124 CA                      dex 
1285 005E7C 0125 10 F1                   bpl  txtLoop6 
1286 005E7E 0127 4C 7A 01                jmp  MsgStart 
1287 005E81 012A               
1288 005E81 012A              * Dual Format/Cancel button messagebox, default Cancel. 
1289 005E81 012A               
1290 005E81 012A              MsgFmtCan2 Entry 
1291 005E81 012A               
1292 005E81 012A A9 07                   lda  #ModeFmtCn2 
1293 005E83 012C 8D 02 00                sta  Mode 
1294 005E86 012F A9 17                   lda  #23                     Minimum message size 
1295 005E88 0131 8D 07 00                sta  MinMsg 
1296 005E8B 0134 A9 02                   lda  #2                      Number of command buttons 
1297 005E8D 0136 8D 0C 00                sta  NumButts 
1298 005E90 0139 A9 01                   lda  #1 
1299 005E92 013B 8D 0D 00                sta  TabIndex 
1300 005E95 013E A2 07                   ldx  #7 
1301 005E97 0140 BD 26 00     txtLoop7   lda  txtFormat,x 
1302 005E9A 0143 9D 36 00                sta  B1Text,x 
1303 005E9D 0146 BD 16 00                lda  txtCancel,x 
1304 005EA0 0149 9D 3E 00                sta  B2Text,x 
1305 005EA3 014C CA                      dex 
1306 005EA4 014D 10 F1                   bpl  txtLoop7 
1307 005EA6 014F 4C 7A 01                jmp  MsgStart 
1308 005EA9 0152               
1309 005EA9 0152              * Dual Boot/Cancel button messagebox, default Cancel. 
1310 005EA9 0152               
1311 005EA9 0152              MsgBootCan Entry 
1312 005EA9 0152               
1313 005EA9 0152 A9 08                   lda  #ModeBtCan 
1314 005EAB 0154 8D 02 00                sta  Mode 
1315 005EAE 0157 A9 17                   lda  #23                     Minimum message size 
1316 005EB0 0159 8D 07 00                sta  MinMsg 
1317 005EB3 015C A9 02                   lda  #2                      Number of command buttons 
1318 005EB5 015E 8D 0C 00                sta  NumButts 
1319 005EB8 0161 A9 01                   lda  #1 
1320 005EBA 0163 8D 0D 00                sta  TabIndex 
1321 005EBD 0166 A2 07                   ldx  #7 
1322 005EBF 0168 BD 2E 00     txtLoop8   lda  txtBoot,x 
1323 005EC2 016B 9D 36 00                sta  B1Text,x 
1324 005EC5 016E BD 16 00                lda  txtCancel,x 
1325 005EC8 0171 9D 3E 00                sta  B2Text,x 
1326 005ECB 0174 CA                      dex 
1327 005ECC 0175 10 F1                   bpl  txtLoop8 
1328 005ECE 0177 4C 7A 01                jmp  MsgStart 
1329 005ED1 017A               
1330 005ED1 017A              * Main Line 
1331 005ED1 017A               
1332 005ED1 017A              MsgStart   anop 
1333 005ED1 017A               
1334 005ED1 017A 20 97 01                jsr  Init 
1335 005ED4 017D 20 C9 04                jsr  SaveScreen 
1336 005ED7 0180 20 EE 01                jsr  DisplayBox 
1337 005EDA 0183               
1338 005EDA 0183              Loop1      anop 
1339 005EDA 0183               
1340 005EDA 0183 20 30 05                jsr  RefreshBtn 
1341 005EDD 0186 20 98 05                jsr  UI 
1342 005EE0 0189               
1343 005EE0 0189 AD 46 00                lda  RC 
1344 005EE3 018C C9 01                   cmp  #TabOnly 
1345 005EE5 018E F0 F3                   beq  Loop1 
1346 005EE7 0190               
1347 005EE7 0190 20 D0 04                jsr  RestScreen 
1348 005EEA 0193               
1349 005EEA 0193 AD 0D 00                lda  TabIndex                Load accumulator with button choice. 
1350 005EED 0196               
1351 005EED 0196 60                      rts 
1352 005EEE 0197               
1353 005EEE 0197              * Setup variables 
1354 005EEE 0197               
1355 005EEE 0197              Init       anop 
1356 005EEE 0197               
1357 005EEE 0197              * Calculate message width 
1358 005EEE 0197               
1359 005EEE 0197 A0 00                   ldy  #0                      Index through message 
1360 005EF0 0199 A2 00                   ldx  #0                      Length of current segment 
1361 005EF2 019B 9C 03 00                stz  MsgWidth 
1362 005EF5 019E               
1363 005EF5 019E              NextChar   anop 
1364 005EF5 019E               
1365 005EF5 019E B1 82                   lda  (MsgPtr),y              Get character 
1366 005EF7 01A0 29 7F                   and  #$7F                    strip high bit 
1367 005EF9 01A2 F0 15                   beq  MsgEOF                  00 = End of message 
1368 005EFB 01A4 C9 0D                   cmp  #$0D 
1369 005EFD 01A6 F0 04                   beq  Part1EOF                0D = End of segment 
1370 005EFF 01A8 C8                      iny                          Bump up index 
1371 005F00 01A9 E8                      inx                          Count character 
1372 005F01 01AA 80 F2                   bra  NextChar                Loop back to get next char 
1373 005F03 01AC               
1374 005F03 01AC              Part1EOF   anop 
1375 005F03 01AC               
1376 005F03 01AC AD 03 00                lda  MsgWidth 
1377 005F06 01AF D0 03                   bne  DupCRs 
1378 005F08 01B1 8E 03 00                stx  MsgWidth                Save first part message length 
1379 005F0B 01B4               
1380 005F0B 01B4              DupCRs     anop 
1381 005F0B 01B4               
1382 005F0B 01B4 A2 00                   ldx  #0                      Reset length counter to 0 for next part 
1383 005F0D 01B6 C8                      iny                          Bump index up 
1384 005F0E 01B7 80 E5                   bra  NextChar                Loop back to get next char 
1385 005F10 01B9               
1386 005F10 01B9              MsgEOF     anop 
1387 005F10 01B9               
1388 005F10 01B9 EC 03 00                cpx  MsgWidth                Which part is longer? 
1389 005F13 01BC 90 03                   bcc  P1Higher                First part is longer. 
1390 005F15 01BE               
1391 005F15 01BE 8E 03 00                stx  MsgWidth                Second part is longer. 
1392 005F18 01C1               
1393 005F18 01C1              P1Higher   anop 
1394 005F18 01C1               
1395 005F18 01C1 AD 03 00                lda  MsgWidth                Check if it meets minimum msg lenght 
1396 005F1B 01C4 CD 07 00                cmp  MinMsg                  Minimum message length 
1397 005F1E 01C7 B0 08                   bcs  Over 
1398 005F20 01C9               
1399 005F20 01C9 AD 07 00                lda  MinMsg                  Change to minimum length 
1400 005F23 01CC 8D 03 00                sta  MsgWidth 
1401 005F26 01CF 80 09                   bra  GoodLen 
1402 005F28 01D1               
1403 005F28 01D1              Over       anop 
1404 005F28 01D1               
1405 005F28 01D1 C9 3C                   cmp  #60                     Maximum message length 
1406 005F2A 01D3 90 05                   bcc  GoodLen 
1407 005F2C 01D5               
1408 005F2C 01D5 A9 3B                   lda  #59                     Change to maximum msg length 
1409 005F2E 01D7 8D 03 00                sta  MsgWidth 
1410 005F31 01DA               
1411 005F31 01DA              GoodLen    anop 
1412 005F31 01DA               
1413 005F31 01DA              * Calculate starting HTab 
1414 005F31 01DA               
1415 005F31 01DA 18                      clc 
1416 005F32 01DB AD 03 00                lda  MsgWidth                Get message width 
1417 005F35 01DE 69 0E                   adc  #14                     Add space for left/right borders 
1418 005F37 01E0 8D 05 00                sta  BoxWidth                Save box width 
1419 005F3A 01E3               
1420 005F3A 01E3 38                      sec                          Center box 
1421 005F3B 01E4 A9 50                   lda  #80                     80 columns 
1422 005F3D 01E6 ED 05 00                sbc  BoxWidth                less box width 
1423 005F40 01E9               
1424 005F40 01E9 4A                      lsr  a                       Divide by 2 
1425 005F41 01EA 8D 04 00                sta  StartHTab               Save our starting HTab 
1426 005F44 01ED               
1427 005F44 01ED 60                      rts 
1428 005F45 01EE               
1429 005F45 01EE                         Copy MessageBox1.s 
1430 005F45 01EE              * Put message box on screen 
1431 005F45 01EE               
1432 005F45 01EE              DisplayBox anop 
1433 005F45 01EE               
1434 005F45 01EE              * VTab 10 
1435 005F45 01EE               
1436 005F45 01EE A9 09                   lda  #10-1 
1437 005F47 01F0 85 25                   sta  VTab 
1438 005F49 01F2 AD 04 00                lda  StartHTab 
1439 005F4C 01F5 85 24                   sta  HTab 
1440 005F4E 01F7 20 00 80                jsr  SetVTab 
1441 005F51 01FA               
1442 005F51 01FA A9 1B                   lda  #MouseText 
1443 005F53 01FC 20 00 80                jsr  cout 
1444 005F56 01FF               
1445 005F56 01FF A9 5A                   lda  #'Z' 
1446 005F58 0201 20 00 80                jsr  cout 
1447 005F5B 0204               
1448 005F5B 0204 AD 05 00                lda  BoxWidth 
1449 005F5E 0207 3A                      dec  a 
1450 005F5F 0208 3A                      dec  a 
1451 005F60 0209 AA                      tax 
1452 005F61 020A               
1453 005F61 020A A9 20                   lda  #' ' 
1454 005F63 020C               
1455 005F63 020C              Line10a    anop 
1456 005F63 020C               
1457 005F63 020C 20 00 80                jsr  cout 
1458 005F66 020F CA                      dex 
1459 005F67 0210 D0 FA                   bne  Line10a 
1460 005F69 0212               
1461 005F69 0212 A9 5F                   lda  #'_' 
1462 005F6B 0214 20 00 80                jsr  cout 
1463 005F6E 0217               
1464 005F6E 0217              * VTab 11 
1465 005F6E 0217               
1466 005F6E 0217 AD 04 00                lda  StartHTab 
1467 005F71 021A 85 24                   sta  HTab 
1468 005F73 021C E6 25                   inc  VTab 
1469 005F75 021E 20 00 80                jsr  SetVTab 
1470 005F78 0221               
1471 005F78 0221 A9 5A                   lda  #'Z' 
1472 005F7A 0223 20 00 80                jsr  cout 
1473 005F7D 0226               
1474 005F7D 0226 AD 05 00                lda  BoxWidth 
1475 005F80 0229 3A                      dec  a 
1476 005F81 022A 3A                      dec  a 
1477 005F82 022B AA                      tax 
1478 005F83 022C               
1479 005F83 022C A9 A0                   lda  #' '+$80 
1480 005F85 022E               
1481 005F85 022E              Line11a    anop 
1482 005F85 022E               
1483 005F85 022E 20 00 80                jsr  cout 
1484 005F88 0231 CA                      dex 
1485 005F89 0232 D0 FA                   bne  Line11a 
1486 005F8B 0234               
1487 005F8B 0234 A9 5F                   lda  #'_' 
1488 005F8D 0236 20 00 80                jsr  cout 
1489 005F90 0239               
1490 005F90 0239              * VTab 12 
1491 005F90 0239               
1492 005F90 0239 AD 04 00                lda  StartHTab 
1493 005F93 023C 85 24                   sta  HTab 
1494 005F95 023E E6 25                   inc  VTab 
1495 005F97 0240 20 00 80                jsr  SetVTab 
1496 005F9A 0243               
1497 005F9A 0243 A9 5A                   lda  #'Z' 
1498 005F9C 0245 20 00 80                jsr  cout 
1499 005F9F 0248               
1500 005F9F 0248 A9 BD                   lda  #'='+$80 
1501 005FA1 024A 20 00 80                jsr  cout 
1502 005FA4 024D               
1503 005FA4 024D A9 DC                   lda  #'\'+$80 
1504 005FA6 024F 20 00 80                jsr  cout 
1505 005FA9 0252               
1506 005FA9 0252 A2 03                   ldx  #3 
1507 005FAB 0254 A9 A0                   lda  #' '+$80 
1508 005FAD 0256               
1509 005FAD 0256              Line12a    anop 
1510 005FAD 0256               
1511 005FAD 0256 20 00 80                jsr  cout 
1512 005FB0 0259 CA                      dex 
1513 005FB1 025A D0 FA                   bne  Line12a 
1514 005FB3 025C               
1515 005FB3 025C A2 03                   ldx  #3 
1516 005FB5 025E A9 DF                   lda  #'_'+$80 
1517 005FB7 0260               
1518 005FB7 0260              Line12b    anop 
1519 005FB7 0260               
1520 005FB7 0260 20 00 80                jsr  cout 
1521 005FBA 0263 CA                      dex 
1522 005FBB 0264 D0 FA                   bne  Line12b 
1523 005FBD 0266               
1524 005FBD 0266 A9 A0                   lda  #' '+$80 
1525 005FBF 0268 20 00 80                jsr  cout 
1526 005FC2 026B 20 00 80                jsr  cout 
1527 005FC5 026E               
1528 005FC5 026E A0 00                   ldy  #0                      Message index 
1529 005FC7 0270 A2 00                   ldx  #0 
1530 005FC9 0272               
1531 005FC9 0272              Line12c    anop 
1532 005FC9 0272               
1533 005FC9 0272 B1 82                   lda  (MsgPtr),y 
1534 005FCB 0274 F0 0D                   beq  Line12d 
1535 005FCD 0276 C9 0D                   cmp  #$0D 
1536 005FCF 0278 F0 09                   beq  Line12d 
1537 005FD1 027A 09 80                   ora  #$80 
1538 005FD3 027C 20 00 80                jsr  cout 
1539 005FD6 027F C8                      iny 
1540 005FD7 0280 E8                      inx 
1541 005FD8 0281 80 EF                   bra  Line12c 
1542 005FDA 0283               
1543 005FDA 0283              Line12d    anop 
1544 005FDA 0283               
1545 005FDA 0283 8E 06 00                stx  TempSave 
1546 005FDD 0286 38                      sec 
1547 005FDE 0287 AD 03 00                lda  MsgWidth 
1548 005FE1 028A ED 06 00                sbc  TempSave 
1549 005FE4 028D               
1550 005FE4 028D AA                      tax 
1551 005FE5 028E E8                      inx 
1552 005FE6 028F E8                      inx 
1553 005FE7 0290 A9 A0                   lda  #' '+$80 
1554 005FE9 0292               
1555 005FE9 0292              Line12e    anop 
1556 005FE9 0292               
1557 005FE9 0292 20 00 80                jsr  cout 
1558 005FEC 0295 CA                      dex 
1559 005FED 0296 D0 FA                   bne  Line12e 
1560 005FEF 0298               
1561 005FEF 0298 A9 5F                   lda  #'_' 
1562 005FF1 029A 20 00 80                jsr  cout 
1563 005FF4 029D               
1564 005FF4 029D              * VTab 13 
1565 005FF4 029D               
1566 005FF4 029D AD 04 00                lda  StartHTab 
1567 005FF7 02A0 85 24                   sta  HTab 
1568 005FF9 02A2 E6 25                   inc  VTab 
1569 005FFB 02A4 20 00 80                jsr  SetVTab 
1570 005FFE 02A7               
1571 005FFE 02A7 A9 5A                   lda  #'Z' 
1572 006000 02A9 20 00 80                jsr  cout 
1573 006003 02AC               
1574 006003 02AC A9 A0                   lda  #' '+$80 
1575 006005 02AE 20 00 80                jsr  cout 
1576 006008 02B1               
1577 006008 02B1 A9 EF                   lda  #'o'+$80 
1578 00600A 02B3 20 00 80                jsr  cout 
1579 00600D 02B6               
1580 00600D 02B6 A9 5F                   lda  #'_' 
1581 00600F 02B8 20 00 80                jsr  cout 
1582 006012 02BB               
1583 006012 02BB A9 A0                   lda  #' '+$80 
1584 006014 02BD 20 00 80                jsr  cout 
1585 006017 02C0 20 00 80                jsr  cout 
1586 00601A 02C3               
1587 00601A 02C3 A9 5F                   lda  #'_' 
1588 00601C 02C5 20 00 80                jsr  cout 
1589 00601F 02C8               
1590 00601F 02C8 A9 BF                   lda  #'?'+$80 
1591 006021 02CA 20 00 80                jsr  cout 
1592 006024 02CD               
1593 006024 02CD A9 5A                   lda  #'Z' 
1594 006026 02CF 20 00 80                jsr  cout 
1595 006029 02D2               
1596 006029 02D2 A9 A0                   lda  #' '+$80 
1597 00602B 02D4 20 00 80                jsr  cout 
1598 00602E 02D7 20 00 80                jsr  cout 
1599 006031 02DA               
1600 006031 02DA A2 00                   ldx  #0 
1601 006033 02DC B1 82                   lda  (MsgPtr),y 
1602 006035 02DE F0 12                   beq  Line13b 
1603 006037 02E0               
1604 006037 02E0 C8                      iny 
1605 006038 02E1               
1606 006038 02E1              Line13a    anop 
1607 006038 02E1               
1608 006038 02E1 B1 82                   lda  (MsgPtr),y 
1609 00603A 02E3 F0 0D                   beq  Line13b 
1610 00603C 02E5 C9 0D                   cmp  #$0D 
1611 00603E 02E7 F0 06                   beq  Line13a1 
1612 006040 02E9               
1613 006040 02E9 09 80                   ora  #$80 
1614 006042 02EB 20 00 80                jsr  cout 
1615 006045 02EE E8                      inx 
1616 006046 02EF               
1617 006046 02EF              Line13a1   anop 
1618 006046 02EF               
1619 006046 02EF C8                      iny 
1620 006047 02F0 80 EF                   bra  Line13a 
1621 006049 02F2               
1622 006049 02F2              Line13b    anop 
1623 006049 02F2               
1624 006049 02F2 8E 06 00                stx  TempSave 
1625 00604C 02F5 38                      sec 
1626 00604D 02F6 AD 03 00                lda  MsgWidth 
1627 006050 02F9 ED 06 00                sbc  TempSave 
1628 006053 02FC               
1629 006053 02FC AA                      tax 
1630 006054 02FD E8                      inx 
1631 006055 02FE E8                      inx 
1632 006056 02FF A9 A0                   lda  #' '+$80 
1633 006058 0301               
1634 006058 0301              Line13c    anop 
1635 006058 0301               
1636 006058 0301 20 00 80                jsr  cout 
1637 00605B 0304 CA                      dex 
1638 00605C 0305 D0 FA                   bne  Line13c 
1639 00605E 0307               
1640 00605E 0307 A9 5F                   lda  #'_' 
1641 006060 0309 20 00 80                jsr  cout 
1642 006063 030C               
1643 006063 030C              * VTab 14 
1644 006063 030C               
1645 006063 030C AD 04 00                lda  StartHTab 
1646 006066 030F 85 24                   sta  HTab 
1647 006068 0311 E6 25                   inc  VTab 
1648 00606A 0313 20 00 80                jsr  SetVTab 
1649 00606D 0316               
1650 00606D 0316 A9 5A                   lda  #'Z' 
1651 00606F 0318 20 00 80                jsr  cout 
1652 006072 031B               
1653 006072 031B A9 A0                   lda  #' '+$80 
1654 006074 031D 20 00 80                jsr  cout 
1655 006077 0320               
1656 006077 0320 A9 49                   lda  #'I' 
1657 006079 0322 20 00 80                jsr  cout 
1658 00607C 0325               
1659 00607C 0325 A9 59                   lda  #'Y' 
1660 00607E 0327 20 00 80                jsr  cout 
1661 006081 032A               
1662 006081 032A A9 A0                   lda  #' '+$80 
1663 006083 032C 20 00 80                jsr  cout 
1664 006086 032F               
1665 006086 032F A9 AF                   lda  #'/'+$80 
1666 006088 0331 20 00 80                jsr  cout 
1667 00608B 0334               
1668 00608B 0334 A9 A0                   lda  #' '+$80 
1669 00608D 0336 20 00 80                jsr  cout 
1670 006090 0339               
1671 006090 0339 A9 A1                   lda  #'!'+$80 
1672 006092 033B 20 00 80                jsr  cout 
1673 006095 033E               
1674 006095 033E A9 5A                   lda  #'Z' 
1675 006097 0340 20 00 80                jsr  cout 
1676 00609A 0343               
1677 00609A 0343 38                      sec                          Setup for subtraction 
1678 00609B 0344 AD 03 00                lda  MsgWidth                A = MsgWidth - MinMsg  (= extra chars) 
1679 00609E 0347 ED 07 00                sbc  MinMsg 
1680 0060A1 034A 4A                      lsr  a                       Divide by 2 to center 
1681 0060A2 034B 1A                      inc  a                       Add 2 for extra spaces in layout 
1682 0060A3 034C 1A                      inc  a 
1683 0060A4 034D               
1684 0060A4 034D              Line14a    anop 
1685 0060A4 034D               
1686 0060A4 034D AA                      tax                          Move to index 
1687 0060A5 034E A9 A0                   lda  #' '+$80 
1688 0060A7 0350               
1689 0060A7 0350              Line14b    anop 
1690 0060A7 0350               
1691 0060A7 0350 20 00 80                jsr  cout 
1692 0060AA 0353 CA                      dex 
1693 0060AB 0354 D0 FA                   bne  Line14b 
1694 0060AD 0356               
1695 0060AD 0356 A2 0A                   ldx  #10 
1696 0060AF 0358 A9 DF                   lda  #'_'+$80 
1697 0060B1 035A               
1698 0060B1 035A              Line14c    anop 
1699 0060B1 035A               
1700 0060B1 035A 20 00 80                jsr  cout 
1701 0060B4 035D CA                      dex 
1702 0060B5 035E D0 FA                   bne  Line14c 
1703 0060B7 0360               
1704 0060B7 0360 AE 02 00                ldx  Mode 
1705 0060BA 0363 E0 01                   cpx  #ModeOk 
1706 0060BC 0365 F0 14                   beq  Line14f 
1707 0060BE 0367               
1708 0060BE 0367 A2 03                   ldx  #3 
1709 0060C0 0369 A9 A0                   lda  #' '+$80 
1710 0060C2 036B               
1711 0060C2 036B              Line14d    anop 
1712 0060C2 036B               
1713 0060C2 036B 20 00 80                jsr  cout 
1714 0060C5 036E CA                      dex 
1715 0060C6 036F D0 FA                   bne  Line14d 
1716 0060C8 0371               
1717 0060C8 0371 A2 0A                   ldx  #10 
1718 0060CA 0373 A9 DF                   lda  #'_'+$80 
1719 0060CC 0375               
1720 0060CC 0375              Line14e    anop 
1721 0060CC 0375               
1722 0060CC 0375 20 00 80                jsr  cout 
1723 0060CF 0378 CA                      dex 
1724 0060D0 0379 D0 FA                   bne  Line14e 
1725 0060D2 037B               
1726 0060D2 037B              Line14f    anop 
1727 0060D2 037B               
1728 0060D2 037B 38                      sec 
1729 0060D3 037C AD 03 00                lda  MsgWidth 
1730 0060D6 037F ED 07 00                sbc  MinMsg 
1731 0060D9 0382 4A                      lsr  a 
1732 0060DA 0383 90 01                   bcc  Line14g 
1733 0060DC 0385               
1734 0060DC 0385 1A                      inc  a 
1735 0060DD 0386               
1736 0060DD 0386              Line14g    anop 
1737 0060DD 0386               
1738 0060DD 0386               
1739 0060DD 0386              Line14h    anop 
1740 0060DD 0386               
1741 0060DD 0386 AA                      tax 
1742 0060DE 0387 E8                      inx 
1743 0060DF 0388 E8                      inx 
1744 0060E0 0389 A9 A0                   lda  #' '+$80 
1745 0060E2 038B               
1746 0060E2 038B              Line14i    anop 
1747 0060E2 038B               
1748 0060E2 038B 20 00 80                jsr  cout 
1749 0060E5 038E CA                      dex 
1750 0060E6 038F D0 FA                   bne  Line14i 
1751 0060E8 0391               
1752 0060E8 0391 A9 5F                   lda  #'_' 
1753 0060EA 0393 20 00 80                jsr  cout 
1754 0060ED 0396               
1755 0060ED 0396              * HTab 15 
1756 0060ED 0396               
1757 0060ED 0396 AD 04 00                lda  StartHTab 
1758 0060F0 0399 85 24                   sta  HTab 
1759 0060F2 039B E6 25                   inc  VTab 
1760 0060F4 039D 20 00 80                jsr  SetVTab 
1761 0060F7 03A0               
1762 0060F7 03A0 A9 5A                   lda  #'Z' 
1763 0060F9 03A2 20 00 80                jsr  cout 
1764 0060FC 03A5               
1765 0060FC 03A5 A9 A0                   lda  #' '+$80 
1766 0060FE 03A7 20 00 80                jsr  cout 
1767 006101 03AA               
1768 006101 03AA A9 4D                   lda  #'M' 
1769 006103 03AC 20 00 80                jsr  cout 
1770 006106 03AF               
1771 006106 03AF A9 A0                   lda  #' '+$80 
1772 006108 03B1 20 00 80                jsr  cout 
1773 00610B 03B4 20 00 80                jsr  cout 
1774 00610E 03B7               
1775 00610E 03B7 A2 04                   ldx  #4 
1776 006110 03B9 A9 4C                   lda  #'L' 
1777 006112 03BB               
1778 006112 03BB              Line15a    anop 
1779 006112 03BB               
1780 006112 03BB 20 00 80                jsr  cout 
1781 006115 03BE CA                      dex 
1782 006116 03BF D0 FA                   bne  Line15a 
1783 006118 03C1               
1784 006118 03C1 38                      sec 
1785 006119 03C2 AD 03 00                lda  MsgWidth 
1786 00611C 03C5 ED 07 00                sbc  MinMsg 
1787 00611F 03C8 4A                      lsr  a 
1788 006120 03C9               
1789 006120 03C9 AA                      tax 
1790 006121 03CA               
1791 006121 03CA 18                      clc                          Calculate HTab positions for buttons. 
1792 006122 03CB 6D 04 00                adc  StartHTab 
1793 006125 03CE 69 0C                   adc  #12 
1794 006127 03D0 8D 08 00                sta  B1HTabS 
1795 00612A 03D3 69 08                   adc  #8 
1796 00612C 03D5 8D 09 00                sta  B1HTabE 
1797 00612F 03D8 69 05                   adc  #5 
1798 006131 03DA 8D 0A 00                sta  B2HTabS 
1799 006134 03DD 69 08                   adc  #8 
1800 006136 03DF 8D 0B 00                sta  B2HTabE 
1801 006139 03E2               
1802 006139 03E2 E8                      inx 
1803 00613A 03E3 A9 A0                   lda  #' '+$80 
1804 00613C 03E5               
1805 00613C 03E5              Line15b    anop 
1806 00613C 03E5               
1807 00613C 03E5 20 00 80                jsr  cout 
1808 00613F 03E8 CA                      dex 
1809 006140 03E9 D0 FA                   bne  Line15b 
1810 006142 03EB               
1811 006142 03EB A9 5A                   lda  #'Z' 
1812 006144 03ED 20 00 80                jsr  cout 
1813 006147 03F0               
1814 006147 03F0 A9 20                   lda  #' ' 
1815 006149 03F2 20 00 80                jsr  cout 
1816 00614C 03F5               
1817 00614C 03F5 A2 08                   ldx  #8 
1818 00614E 03F7 A0 00                   ldy  #0 
1819 006150 03F9               
1820 006150 03F9              Line15c    anop 
1821 006150 03F9               
1822 006150 03F9 B9 36 00                lda  B1Text,y 
1823 006153 03FC 20 00 80                jsr  cout 
1824 006156 03FF C8                      iny 
1825 006157 0400 CA                      dex 
1826 006158 0401 D0 F6                   bne  Line15c 
1827 00615A 0403               
1828 00615A 0403 A9 20                   lda  #' ' 
1829 00615C 0405 20 00 80                jsr  cout 
1830 00615F 0408               
1831 00615F 0408 A9 5F                   lda  #'_' 
1832 006161 040A 20 00 80                jsr  cout 
1833 006164 040D               
1834 006164 040D AE 02 00                ldx  Mode 
1835 006167 0410 E0 01                   cpx  #ModeOk 
1836 006169 0412 F0 27                   beq  Line15d1 
1837 00616B 0414               
1838 00616B 0414 A9 A0                   lda  #' '+$80 
1839 00616D 0416 20 00 80                jsr  cout 
1840 006170 0419               
1841 006170 0419 A9 5A                   lda  #'Z' 
1842 006172 041B 20 00 80                jsr  cout 
1843 006175 041E               
1844 006175 041E A9 20                   lda  #' ' 
1845 006177 0420 20 00 80                jsr  cout 
1846 00617A 0423               
1847 00617A 0423 A2 08                   ldx  #8 
1848 00617C 0425 A0 00                   ldy  #0 
1849 00617E 0427               
1850 00617E 0427              Line15d    anop 
1851 00617E 0427               
1852 00617E 0427 B9 3E 00                lda  B2Text,y 
1853 006181 042A 20 00 80                jsr  cout 
1854 006184 042D C8                      iny 
1855 006185 042E CA                      dex 
1856 006186 042F D0 F6                   bne  Line15d 
1857 006188 0431               
1858 006188 0431 A9 20                   lda  #' ' 
1859 00618A 0433 20 00 80                jsr  cout 
1860 00618D 0436               
1861 00618D 0436 A9 5F                   lda  #'_' 
1862 00618F 0438 20 00 80                jsr  cout 
1863 006192 043B               
1864 006192 043B              Line15d1   anop 
1865 006192 043B               
1866 006192 043B 38                      sec 
1867 006193 043C AD 03 00                lda  MsgWidth 
1868 006196 043F ED 07 00                sbc  MinMsg 
1869 006199 0442 4A                      lsr  a 
1870 00619A 0443 AA                      tax 
1871 00619B 0444 90 01                   bcc  Line15e 
1872 00619D 0446               
1873 00619D 0446 E8                      inx 
1874 00619E 0447               
1875 00619E 0447              Line15e    anop 
1876 00619E 0447               
1877 00619E 0447 E8                      inx 
1878 00619F 0448 A9 A0                   lda  #' '+$80 
1879 0061A1 044A               
1880 0061A1 044A              Line15f    anop 
1881 0061A1 044A               
1882 0061A1 044A 20 00 80                jsr  cout 
1883 0061A4 044D CA                      dex 
1884 0061A5 044E D0 FA                   bne  Line15f 
1885 0061A7 0450               
1886 0061A7 0450 A9 5F                   lda  #'_' 
1887 0061A9 0452 20 00 80                jsr  cout 
1888 0061AC 0455               
1889 0061AC 0455              * HTab 16 
1890 0061AC 0455               
1891 0061AC 0455 AD 04 00                lda  StartHTab 
1892 0061AF 0458 85 24                   sta  HTab 
1893 0061B1 045A E6 25                   inc  VTab 
1894 0061B3 045C 20 00 80                jsr  SetVTab 
1895 0061B6 045F               
1896 0061B6 045F A9 5A                   lda  #'Z' 
1897 0061B8 0461 20 00 80                jsr  cout 
1898 0061BB 0464               
1899 0061BB 0464 38                      sec 
1900 0061BC 0465 AD 03 00                lda  MsgWidth 
1901 0061BF 0468 ED 07 00                sbc  MinMsg 
1902 0061C2 046B 4A                      lsr  a 
1903 0061C3 046C 18                      clc 
1904 0061C4 046D 69 0A                   adc  #10 
1905 0061C6 046F AA                      tax 
1906 0061C7 0470 A9 DF                   lda  #'_'+$80 
1907 0061C9 0472               
1908 0061C9 0472              Line16a    anop 
1909 0061C9 0472               
1910 0061C9 0472 20 00 80                jsr  cout 
1911 0061CC 0475 CA                      dex 
1912 0061CD 0476 D0 FA                   bne  Line16a 
1913 0061CF 0478               
1914 0061CF 0478 A2 0A                   ldx  #10 
1915 0061D1 047A A9 5C                   lda  #'\' 
1916 0061D3 047C               
1917 0061D3 047C              Line16b    anop 
1918 0061D3 047C               
1919 0061D3 047C 20 00 80                jsr  cout 
1920 0061D6 047F CA                      dex 
1921 0061D7 0480 D0 FA                   bne  Line16b 
1922 0061D9 0482               
1923 0061D9 0482 AE 02 00                ldx  Mode 
1924 0061DC 0485 E0 01                   cpx  #ModeOk 
1925 0061DE 0487 F0 14                   beq  Line16d1 
1926 0061E0 0489               
1927 0061E0 0489 A2 03                   ldx  #3 
1928 0061E2 048B A9 DF                   lda  #'_'+$80 
1929 0061E4 048D               
1930 0061E4 048D              Line16c    anop 
1931 0061E4 048D               
1932 0061E4 048D 20 00 80                jsr  cout 
1933 0061E7 0490 CA                      dex 
1934 0061E8 0491 D0 FA                   bne  Line16c 
1935 0061EA 0493               
1936 0061EA 0493 A2 0A                   ldx  #10 
1937 0061EC 0495 A9 5C                   lda  #'\' 
1938 0061EE 0497               
1939 0061EE 0497              Line16d    anop 
1940 0061EE 0497               
1941 0061EE 0497 20 00 80                jsr  cout 
1942 0061F1 049A CA                      dex 
1943 0061F2 049B D0 FA                   bne  Line16d 
1944 0061F4 049D               
1945 0061F4 049D              Line16d1   anop 
1946 0061F4 049D               
1947 0061F4 049D 38                      sec 
1948 0061F5 049E AD 03 00                lda  MsgWidth 
1949 0061F8 04A1 ED 07 00                sbc  MinMsg 
1950 0061FB 04A4 4A                      lsr  a 
1951 0061FC 04A5 AA                      tax 
1952 0061FD 04A6 90 01                   bcc  Line16e 
1953 0061FF 04A8               
1954 0061FF 04A8 E8                      inx 
1955 006200 04A9               
1956 006200 04A9              Line16e    anop 
1957 006200 04A9               
1958 006200 04A9 E8                      inx 
1959 006201 04AA E8                      inx 
1960 006202 04AB A9 DF                   lda  #'_'+$80 
1961 006204 04AD               
1962 006204 04AD              Line16f    anop 
1963 006204 04AD               
1964 006204 04AD 20 00 80                jsr  cout 
1965 006207 04B0 CA                      dex 
1966 006208 04B1 D0 FA                   bne  Line16f 
1967 00620A 04B3               
1968 00620A 04B3 A9 5F                   lda  #'_' 
1969 00620C 04B5 20 00 80                jsr  cout 
1970 00620F 04B8               
1971 00620F 04B8 60                      rts 
1972 006210 04B9               
1973 006210 04B9              TextLine   anop                         Text screen line starting addresses 
1974 006210 04B9               
1975 006210 04B9 A8 04        TextLine09 dc   i'$04A8'                1st message box line 
1976 006212 04BB 28 05        TextLine10 dc   i'$0528'                2nd message box line 
1977 006214 04BD A8 05        TextLine11 dc   i'$05A8'                3rd message box line 
1978 006216 04BF 28 06        TextLine12 dc   i'$0628'                4th message box line 
1979 006218 04C1 A8 06        TextLine13 dc   i'$06A8'                5th message box line 
1980 00621A 04C3 28 07        TextLine14 dc   i'$0728'                6th message box line 
1981 00621C 04C5 A8 07        TextLine15 dc   i'$07A8'                7th message box line 
1982 00621E 04C7               
1983 00621E 04C7 00           EndHTab    ds   1 
1984 00621F 04C8 00           SaveRtn    ds   1 
1985 006220 04C9               
1986 006220 04C9              On80Store  equ  $C001 
1987 006220 04C9              Page1      equ  $C054 
1988 006220 04C9              Page2      equ  $C055 
1989 006220 04C9               
1990 006220 04C9              * 
1991 006220 04C9              * SaveScreen - Save screen data under message box. 
1992 006220 04C9              * RestScreen - Restore screen data under message box. 
1993 006220 04C9              * 
1994 006220 04C9              * Ptr1 = screen data address : Ptr2 = Save buffer address 
1995 006220 04C9              * 
1996 006220 04C9               
1997 006220 04C9              SaveScreen anop 
1998 006220 04C9               
1999 006220 04C9 A9 01                   lda  #1 
2000 006222 04CB 8D C8 04                sta  SaveRtn 
2001 006225 04CE 80 03                   bra  StartRtn 
2002 006227 04D0               
2003 006227 04D0              RestScreen anop 
2004 006227 04D0               
2005 006227 04D0 9C C8 04                stz  SaveRtn 
2006 00622A 04D3               
2007 00622A 04D3              StartRtn   anop 
2008 00622A 04D3               
2009 00622A 04D3 8D 01 C0                sta  On80Store               Make sure 80STORE is on. 
2010 00622D 04D6               
2011 00622D 04D6 18                      clc                          Calculate ending HTab 
2012 00622E 04D7 AD 04 00                lda  StartHTab 
2013 006231 04DA 6D 05 00                adc  BoxWidth 
2014 006234 04DD 3A                      dec  a 
2015 006235 04DE 8D C7 04                sta  EndHTab 
2016 006238 04E1               
2017 006238 04E1 A9 00                   lda  #MessageBuf             Set save buffer address in Ptr2 
2018 00623A 04E3 85 80                   sta  Ptr2 
2019 00623C 04E5 A9 12                   lda  #>MessageBuf 
2020 00623E 04E7 85 81                   sta  Ptr2+1 
2021 006240 04E9               
2022 006240 04E9 A2 07                   ldx  #7                      7 lines to save 
2023 006242 04EB               
2024 006242 04EB              SSLoop1    anop 
2025 006242 04EB               
2026 006242 04EB 8A                      txa                          Copy lines to save to accumulator 
2027 006243 04EC 3A                      dec  a                       Subtract one to make it a 0 - 6 number 
2028 006244 04ED 0A                      asl  a                       Multiply by two for address table index 
2029 006245 04EE A8                      tay                          Move to index 
2030 006246 04EF B9 B9 04                lda  TextLine,y              Get line number starting address and 
2031 006249 04F2 85 06                   sta  Ptr1                    put it in Ptr1. 
2032 00624B 04F4 C8                      iny 
2033 00624C 04F5 B9 B9 04                lda  TextLine,y 
2034 00624F 04F8 85 07                   sta  Ptr1+1 
2035 006251 04FA               
2036 006251 04FA AC 04 00                ldy  StartHTab 
2037 006254 04FD               
2038 006254 04FD              SSLoop2    anop 
2039 006254 04FD               
2040 006254 04FD 5A                      phy                          Push HTab to stack. 
2041 006255 04FE 98                      tya                          Put HTab into accumulator 
2042 006256 04FF 4A                      lsr  a                       Divide by 2 for index 
2043 006257 0500 B0 05                   bcs  FromMain                A remainder then get char from main mem. 
2044 006259 0502               
2045 006259 0502              FromAux    anop 
2046 006259 0502               
2047 006259 0502 8D 55 C0                sta  Page2                   Set access to aux memory 
2048 00625C 0505 80 03                   bra  GetChar 
2049 00625E 0507               
2050 00625E 0507              FromMain   anop 
2051 00625E 0507               
2052 00625E 0507 8D 54 C0                sta  Page1                   Set access to main memory 
2053 006261 050A               
2054 006261 050A              GetChar    anop 
2055 006261 050A               
2056 006261 050A A8                      tay                          Move index value to y register 
2057 006262 050B AD C8 04                lda  SaveRtn                 Is this a save or restore? 
2058 006265 050E F0 06                   beq  Restore                 If SaveRtn = 0 then we're restoring 
2059 006267 0510               
2060 006267 0510 B1 06                   lda  (Ptr1),y                Get character from screen 
2061 006269 0512 92 80                   sta  (Ptr2)                  Save to buffer area 
2062 00626B 0514 80 04                   bra  Continue 
2063 00626D 0516               
2064 00626D 0516 B2 80        Restore    lda  (Ptr2)                  Get character from buffer area 
2065 00626F 0518 91 06                   sta  (Ptr1),y                Restore back to screen area 
2066 006271 051A               
2067 006271 051A              Continue   anop 
2068 006271 051A               
2069 006271 051A 7A                      ply                          Get HTab from stack 
2070 006272 051B               
2071 006272 051B E6 80                   inc  Ptr2                    Bump up save buffer address 
2072 006274 051D D0 02                   bne  NoOF                    If Ptr2 = 0 then add 1 to Ptr2+1 
2073 006276 051F               
2074 006276 051F E6 81                   inc  Ptr2+1 
2075 006278 0521               
2076 006278 0521              NoOF       anop                         No overflow label 
2077 006278 0521               
2078 006278 0521 C8                      iny                          Add 1 to HTab 
2079 006279 0522 CC C7 04                cpy  EndHTab                 Compare to ending HTab 
2080 00627C 0525 90 D6                   bcc  SSLoop2                 < or 
2081 00627E 0527 F0 D4                   beq  SSLoop2                   = y register process next character. 
2082 006280 0529               
2083 006280 0529 CA                      dex                          More lines to process? 
2084 006281 052A D0 BF                   bne  SSLoop1                 Yes 
2085 006283 052C               
2086 006283 052C AD 54 C0                lda  Page1                   Set back main memory access prior to rts 
2087 006286 052F               
2088 006286 052F 60                      rts 
2089 006287 0530               
2090 006287 0530              * 
2091 006287 0530              * RefreshBtn - Redraw command buttons with selected button highlighted 
2092 006287 0530              * 
2093 006287 0530               
2094 006287 0530              RefreshBtn anop 
2095 006287 0530               
2096 006287 0530 A9 0E                   lda  #15-1 
2097 006289 0532 85 25                   sta  VTab 
2098 00628B 0534 AD 08 00                lda  B1HTabS 
2099 00628E 0537 85 24                   sta  HTab 
2100 006290 0539 20 00 80                jsr  SetVTab 
2101 006293 053C               
2102 006293 053C A9 18                   lda  #StdText 
2103 006295 053E 20 00 80                jsr  cout 
2104 006298 0541               
2105 006298 0541 AD 0D 00                lda  TabIndex 
2106 00629B 0544 C9 00                   cmp  #Button1 
2107 00629D 0546 F0 07                   beq  B1Selected 
2108 00629F 0548               
2109 00629F 0548 A9 0E                   lda  #Normal 
2110 0062A1 054A 20 00 80                jsr  cout 
2111 0062A4 054D 80 05                   bra  PrtB1 
2112 0062A6 054F               
2113 0062A6 054F              B1Selected anop 
2114 0062A6 054F               
2115 0062A6 054F A9 0F                   lda  #Inverse 
2116 0062A8 0551 20 00 80                jsr  cout 
2117 0062AB 0554               
2118 0062AB 0554              PrtB1      anop 
2119 0062AB 0554               
2120 0062AB 0554 A2 08                   ldx  #8 
2121 0062AD 0556 A0 00                   ldy  #0 
2122 0062AF 0558               
2123 0062AF 0558              PrtLoop1   anop 
2124 0062AF 0558               
2125 0062AF 0558 B9 36 00                lda  B1Text,y 
2126 0062B2 055B 20 00 80                jsr  cout 
2127 0062B5 055E C8                      iny 
2128 0062B6 055F CA                      dex 
2129 0062B7 0560 D0 F6                   bne  PrtLoop1 
2130 0062B9 0562               
2131 0062B9 0562 AD 02 00                lda  Mode 
2132 0062BC 0565 C9 01                   cmp  #ModeOk 
2133 0062BE 0567 F0 29                   beq  PrtExit 
2134 0062C0 0569               
2135 0062C0 0569 AD 0A 00                lda  B2HTabS 
2136 0062C3 056C 85 24                   sta  HTab 
2137 0062C5 056E 20 00 80                jsr  SetVTab 
2138 0062C8 0571               
2139 0062C8 0571 AD 0D 00                lda  TabIndex 
2140 0062CB 0574 C9 01                   cmp  #Button2 
2141 0062CD 0576 F0 07                   beq  B2Selected 
2142 0062CF 0578               
2143 0062CF 0578 A9 0E                   lda  #Normal 
2144 0062D1 057A 20 00 80                jsr  cout 
2145 0062D4 057D 80 05                   bra  PrtB2 
2146 0062D6 057F               
2147 0062D6 057F              B2Selected anop 
2148 0062D6 057F               
2149 0062D6 057F A9 0F                   lda  #Inverse 
2150 0062D8 0581 20 00 80                jsr  cout 
2151 0062DB 0584               
2152 0062DB 0584              PrtB2      anop 
2153 0062DB 0584               
2154 0062DB 0584 A2 08                   ldx  #8 
2155 0062DD 0586 A0 00                   ldy  #0 
2156 0062DF 0588               
2157 0062DF 0588              PrtLoop2   anop 
2158 0062DF 0588               
2159 0062DF 0588 B9 3E 00                lda  B2Text,y 
2160 0062E2 058B 20 00 80                jsr  cout 
2161 0062E5 058E C8                      iny 
2162 0062E6 058F CA                      dex 
2163 0062E7 0590 D0 F6                   bne  PrtLoop2 
2164 0062E9 0592               
2165 0062E9 0592              PrtExit    anop 
2166 0062E9 0592               
2167 0062E9 0592 A9 0E                   lda  #Normal 
2168 0062EB 0594 20 00 80                jsr  cout 
2169 0062EE 0597               
2170 0062EE 0597 60                      rts 
2171 0062EF 0598                         Copy MessageBox2.s 
2172 0062EF 0598              * 
2173 0062EF 0598              * Standard messagebox UI 
2174 0062EF 0598              * 
2175 0062EF 0598               
2176 0062EF 0598              UI         anop 
2177 0062EF 0598               
2178 0062EF 0598              UpArrow    equ  $8B 
2179 0062EF 0598              DownArrow  equ  $8A 
2180 0062EF 0598              LeftArrow  equ  $88 
2181 0062EF 0598              RightArrow equ  $95 
2182 0062EF 0598              ReturnKey  equ  $8D 
2183 0062EF 0598              TabKey     equ  $89 
2184 0062EF 0598               
2185 0062EF 0598              AppleKey   equ  $C061 
2186 0062EF 0598              OptionKey  equ  $C062 
2187 0062EF 0598               
2188 0062EF 0598 9C 46 00                stz  RC                      Reset return code 
2189 0062F2 059B 9C 10 C0                stz  ClearKbd                Clear keyboard strobe 
2190 0062F5 059E               
2191 0062F5 059E              PollDev    anop 
2192 0062F5 059E               
2193 0062F5 059E 20 00 80                jsr  PlotMouse               Put mouse cursor on screen 
2194 0062F8 05A1               
2195 0062F8 05A1              PollDevLoop anop 
2196 0062F8 05A1               
2197 0062F8 05A1 AD 00 C0                lda  Keyboard                Get keypress 
2198 0062FB 05A4 10 03                   bpl  PollMouse               No keypress, check mouse 
2199 0062FD 05A6 4C CE 05                jmp  KeyDev 
2200 006300 05A9               
2201 006300 05A9              PollMouse  anop 
2202 006300 05A9               
2203 006300 05A9 20 00 80                jsr  ReadMouse               Readmouse 
2204 006303 05AC 4E 84 08                lsr  MouseX                  Put x and y mouse coordinates into 
2205 006306 05AF 4E 86 08                lsr  MouseY                   0 to 79 and 0 to 23 range. 
2206 006309 05B2 AD 8C 08                lda  MouseStat               Get mouse status 
2207 00630C 05B5 89 20                   bit  #MouseMove              Move moved? 
2208 00630E 05B7 D0 0A                   bne  MouseDev1               Yes, process mouse movement 
2209 006310 05B9 89 80                   bit  #CurrButton             Mouse button pressed? 
2210 006312 05BB D0 0B                   bne  MouseDev2               Yes, process mouse button press. 
2211 006314 05BD 89 40                   bit  #PrevButton             Mouse button released? 
2212 006316 05BF D0 0A                   bne  MouseDev3               Yes, process mouse button release. 
2213 006318 05C1               
2214 006318 05C1 80 DE                   bra  PollDevLoop             Check keyboard and mouse again. 
2215 00631A 05C3               
2216 00631A 05C3              * 
2217 00631A 05C3              * Process mouse movement 
2218 00631A 05C3              * 
2219 00631A 05C3               
2220 00631A 05C3              MouseDev1  anop 
2221 00631A 05C3               
2222 00631A 05C3 20 00 80                jsr  MoveMouse 
2223 00631D 05C6 80 D9                   bra  PollDevLoop 
2224 00631F 05C8               
2225 00631F 05C8              * 
2226 00631F 05C8              * Process mouse button press 
2227 00631F 05C8              * 
2228 00631F 05C8               
2229 00631F 05C8              MouseDev2  anop 
2230 00631F 05C8               
2231 00631F 05C8 4C E8 06                jmp  ButtonPress 
2232 006322 05CB               
2233 006322 05CB              * 
2234 006322 05CB              * Process mouse button release 
2235 006322 05CB              * 
2236 006322 05CB               
2237 006322 05CB              MouseDev3  anop 
2238 006322 05CB               
2239 006322 05CB 4C 3E 07                jmp  ButtonRelease 
2240 006325 05CE               
2241 006325 05CE              * 
2242 006325 05CE              * Process keyboard key press 
2243 006325 05CE              * 
2244 006325 05CE               
2245 006325 05CE              KeyDev     anop 
2246 006325 05CE               
2247 006325 05CE 9C 10 C0                stz  ClearKbd                Clear keyboard strobe 
2248 006328 05D1 8D 47 00                sta  KeyPress                Save keypress 
2249 00632B 05D4               
2250 00632B 05D4              * Tab key routine 
2251 00632B 05D4               
2252 00632B 05D4 AD 47 00                lda  KeyPress 
2253 00632E 05D7 C9 89                   cmp  #TabKey 
2254 006330 05D9 F0 02                   beq  TabReq 
2255 006332 05DB 80 29                   bra  NextKey01 
2256 006334 05DD               
2257 006334 05DD              TabReq     anop 
2258 006334 05DD               
2259 006334 05DD AD 62 C0                lda  OptionKey 
2260 006337 05E0 30 10                   bmi  TabUp 
2261 006339 05E2               
2262 006339 05E2              TabDown    anop 
2263 006339 05E2               
2264 006339 05E2 EE 0D 00                inc  TabIndex 
2265 00633C 05E5 AD 0D 00                lda  TabIndex 
2266 00633F 05E8 CD 0C 00                cmp  NumButts 
2267 006342 05EB 90 11                   bcc  TabReq1 
2268 006344 05ED               
2269 006344 05ED 9C 0D 00                stz  TabIndex 
2270 006347 05F0 80 0C                   bra  TabReq1 
2271 006349 05F2               
2272 006349 05F2              TabUp      anop 
2273 006349 05F2               
2274 006349 05F2 CE 0D 00                dec  TabIndex 
2275 00634C 05F5 10 07                   bpl  TabReq1 
2276 00634E 05F7               
2277 00634E 05F7 AD 0C 00                lda  NumButts 
2278 006351 05FA 3A                      dec  a 
2279 006352 05FB 8D 0D 00                sta  TabIndex 
2280 006355 05FE               
2281 006355 05FE              TabReq1    anop 
2282 006355 05FE               
2283 006355 05FE A9 01                   lda  #TabOnly 
2284 006357 0600 8D 46 00                sta  RC 
2285 00635A 0603 4C 5D 06                jmp  Exit 
2286 00635D 0606               
2287 00635D 0606              NextKey01  anop 
2288 00635D 0606               
2289 00635D 0606              * Process <cr> 
2290 00635D 0606               
2291 00635D 0606 AD 47 00                lda  KeyPress 
2292 006360 0609 C9 8D                   cmp  #ReturnKey 
2293 006362 060B F0 06                   beq  EnterReq 
2294 006364 060D C9 A0                   cmp  #' '+$80 
2295 006366 060F F0 02                   beq  EnterReq 
2296 006368 0611               
2297 006368 0611 80 44                   bra  InvalidKey 
2298 00636A 0613               
2299 00636A 0613              EnterReq   anop 
2300 00636A 0613               
2301 00636A 0613 AD 0D 00                lda  TabIndex 
2302 00636D 0616 C9 00                   cmp  #Button1 
2303 00636F 0618 D0 03                   bne  Enter01 
2304 006371 061A 4C 27 06                jmp  Button1Req 
2305 006374 061D               
2306 006374 061D              Enter01    anop 
2307 006374 061D               
2308 006374 061D C9 01                   cmp  #Button2 
2309 006376 061F D0 03                   bne  Enter02 
2310 006378 0621 4C 3F 06                jmp  Button2Req 
2311 00637B 0624               
2312 00637B 0624              Enter02    anop 
2313 00637B 0624               
2314 00637B 0624 4C A1 05                jmp  PollDevLoop 
2315 00637E 0627               
2316 00637E 0627              Button1Req anop 
2317 00637E 0627               
2318 00637E 0627 A9 00                   lda  #Button1 
2319 006380 0629 CD 0D 00                cmp  TabIndex 
2320 006383 062C 8D 0D 00                sta  TabIndex 
2321 006386 062F F0 03                   beq  B1Req01 
2322 006388 0631               
2323 006388 0631 20 30 05                jsr  RefreshBtn 
2324 00638B 0634               
2325 00638B 0634              B1Req01    anop 
2326 00638B 0634               
2327 00638B 0634 20 5E 06                jsr  AnimateBtn 
2328 00638E 0637               
2329 00638E 0637 A9 02                   lda  #CROnly 
2330 006390 0639 8D 46 00                sta  RC 
2331 006393 063C 4C 5D 06                jmp  Exit 
2332 006396 063F               
2333 006396 063F              Button2Req anop 
2334 006396 063F               
2335 006396 063F A9 01                   lda  #Button2 
2336 006398 0641 CD 0D 00                cmp  TabIndex 
2337 00639B 0644 8D 0D 00                sta  TabIndex 
2338 00639E 0647 F0 03                   beq  B2Req01 
2339 0063A0 0649               
2340 0063A0 0649 20 30 05                jsr  RefreshBtn 
2341 0063A3 064C               
2342 0063A3 064C              B2Req01    anop 
2343 0063A3 064C               
2344 0063A3 064C 20 5E 06                jsr  AnimateBtn 
2345 0063A6 064F               
2346 0063A6 064F A9 02                   lda  #CROnly 
2347 0063A8 0651 8D 46 00                sta  RC 
2348 0063AB 0654 4C 5D 06                jmp  Exit 
2349 0063AE 0657               
2350 0063AE 0657              InvalidKey anop 
2351 0063AE 0657               
2352 0063AE 0657 20 00 80                jsr  Beep 
2353 0063B1 065A 4C A1 05                jmp  PollDevLoop 
2354 0063B4 065D               
2355 0063B4 065D              Exit       anop 
2356 0063B4 065D               
2357 0063B4 065D 60                      rts 
2358 0063B5 065E               
2359 0063B5 065E              * 
2360 0063B5 065E              * Do button animation 
2361 0063B5 065E              * 
2362 0063B5 065E               
2363 0063B5 065E              AnimateBtn anop 
2364 0063B5 065E               
2365 0063B5 065E A9 0E                   lda  #15-1 
2366 0063B7 0660 85 25                   sta  VTab 
2367 0063B9 0662 20 00 80                jsr  SetVTab 
2368 0063BC 0665               
2369 0063BC 0665 A9 18                   lda  #StdText 
2370 0063BE 0667 20 00 80                jsr  cout 
2371 0063C1 066A               
2372 0063C1 066A AD 0D 00                lda  TabIndex 
2373 0063C4 066D C9 00                   cmp  #Button1 
2374 0063C6 066F F0 05                   beq  AnimateB1 
2375 0063C8 0671               
2376 0063C8 0671 C9 01                   cmp  #Button2 
2377 0063CA 0673 F0 33                   beq  AnimateB2 
2378 0063CC 0675               
2379 0063CC 0675 60                      rts 
2380 0063CD 0676               
2381 0063CD 0676              AnimateB1  anop 
2382 0063CD 0676               
2383 0063CD 0676 A9 36                   lda  #B1Text 
2384 0063CF 0678 85 06                   sta  Ptr1 
2385 0063D1 067A A9 00                   lda  #>B1Text 
2386 0063D3 067C 85 07                   sta  Ptr1+1 
2387 0063D5 067E               
2388 0063D5 067E A9 0E                   lda  #Normal 
2389 0063D7 0680 20 00 80                jsr  cout 
2390 0063DA 0683               
2391 0063DA 0683 AD 08 00                lda  B1HTabS 
2392 0063DD 0686 85 24                   sta  HTab 
2393 0063DF 0688               
2394 0063DF 0688 20 DA 06                jsr  PtrButton 
2395 0063E2 068B               
2396 0063E2 068B A9 FF                   lda  #$FF 
2397 0063E4 068D 20 A8 FC                jsr  Wait 
2398 0063E7 0690               
2399 0063E7 0690 A9 0F                   lda  #Inverse 
2400 0063E9 0692 20 00 80                jsr  cout 
2401 0063EC 0695               
2402 0063EC 0695 AD 08 00                lda  B1HTabS 
2403 0063EF 0698 85 24                   sta  HTab 
2404 0063F1 069A               
2405 0063F1 069A 20 DA 06                jsr  PtrButton 
2406 0063F4 069D               
2407 0063F4 069D A9 FF                   lda  #$FF 
2408 0063F6 069F 20 A8 FC                jsr  Wait 
2409 0063F9 06A2               
2410 0063F9 06A2 A9 0E                   lda  #Normal 
2411 0063FB 06A4 20 00 80                jsr  cout 
2412 0063FE 06A7               
2413 0063FE 06A7 60                      rts 
2414 0063FF 06A8               
2415 0063FF 06A8              AnimateB2  anop 
2416 0063FF 06A8               
2417 0063FF 06A8 A9 3E                   lda  #B2Text 
2418 006401 06AA 85 06                   sta  Ptr1 
2419 006403 06AC A9 00                   lda  #>B2Text 
2420 006405 06AE 85 07                   sta  Ptr1+1 
2421 006407 06B0               
2422 006407 06B0 A9 0E                   lda  #Normal 
2423 006409 06B2 20 00 80                jsr  cout 
2424 00640C 06B5               
2425 00640C 06B5 AD 0A 00                lda  B2HTabS 
2426 00640F 06B8 85 24                   sta  HTab 
2427 006411 06BA               
2428 006411 06BA 20 DA 06                jsr  PtrButton 
2429 006414 06BD               
2430 006414 06BD A9 FF                   lda  #$FF 
2431 006416 06BF 20 A8 FC                jsr  Wait 
2432 006419 06C2               
2433 006419 06C2 A9 0F                   lda  #Inverse 
2434 00641B 06C4 20 00 80                jsr  cout 
2435 00641E 06C7               
2436 00641E 06C7 AD 0A 00                lda  B2HTabS 
2437 006421 06CA 85 24                   sta  HTab 
2438 006423 06CC               
2439 006423 06CC 20 DA 06                jsr  PtrButton 
2440 006426 06CF               
2441 006426 06CF A9 FF                   lda  #$FF 
2442 006428 06D1 20 A8 FC                jsr  Wait 
2443 00642B 06D4               
2444 00642B 06D4 A9 0E                   lda  #Normal 
2445 00642D 06D6 20 00 80                jsr  cout 
2446 006430 06D9               
2447 006430 06D9 60                      rts 
2448 006431 06DA               
2449 006431 06DA              PtrButton  anop 
2450 006431 06DA               
2451 006431 06DA A2 08                   ldx  #8 
2452 006433 06DC A0 00                   ldy  #0 
2453 006435 06DE               
2454 006435 06DE B1 06        PB01       lda  (Ptr1),y 
2455 006437 06E0 20 00 80                jsr  cout 
2456 00643A 06E3 C8                      iny 
2457 00643B 06E4 CA                      dex 
2458 00643C 06E5 D0 F7                   bne  PB01 
2459 00643E 06E7               
2460 00643E 06E7 60                      rts 
2461 00643F 06E8               
2462 00643F 06E8              * 
2463 00643F 06E8              * Process button press 
2464 00643F 06E8              * 
2465 00643F 06E8               
2466 00643F 06E8              ButtonPress anop 
2467 00643F 06E8               
2468 00643F 06E8 AD 8C 08                lda  MouseStat 
2469 006442 06EB 89 40                   bit  #PrevButton 
2470 006444 06ED F0 03                   beq  NotHeld 
2471 006446 06EF 4C A1 05                jmp  PollDevLoop 
2472 006449 06F2               
2473 006449 06F2              NotHeld    anop 
2474 006449 06F2               
2475 006449 06F2 AD 86 08                lda  MouseY 
2476 00644C 06F5 C9 0E                   cmp  #15-1 
2477 00644E 06F7 F0 03                   beq  RightRow 
2478 006450 06F9 4C 38 07                jmp  BadPress 
2479 006453 06FC               
2480 006453 06FC              RightRow   anop 
2481 006453 06FC               
2482 006453 06FC AD 84 08                lda  MouseX 
2483 006456 06FF CD 08 00                cmp  B1HTabS 
2484 006459 0702 90 10                   bcc  TestForB2 
2485 00645B 0704 CD 09 00                cmp  B1HTabE 
2486 00645E 0707 B0 0B                   bcs  TestForB2 
2487 006460 0709               
2488 006460 0709              * Button 1 click 
2489 006460 0709               
2490 006460 0709 9C 0D 00                stz  TabIndex 
2491 006463 070C               
2492 006463 070C A9 01                   lda  #TabOnly 
2493 006465 070E 8D 46 00                sta  RC 
2494 006468 0711 4C 5D 06                jmp  Exit 
2495 00646B 0714               
2496 00646B 0714              TestForB2  anop 
2497 00646B 0714               
2498 00646B 0714 AD 02 00                lda  Mode 
2499 00646E 0717 C9 01                   cmp  #ModeOk 
2500 006470 0719 D0 03                   bne  CheckForB2 
2501 006472 071B 4C 38 07                jmp  BadPress 
2502 006475 071E               
2503 006475 071E              CheckForB2 anop 
2504 006475 071E               
2505 006475 071E AD 84 08                lda  MouseX 
2506 006478 0721 CD 0A 00                cmp  B2HTabS 
2507 00647B 0724 90 12                   bcc  TestForB3 
2508 00647D 0726 CD 0B 00                cmp  B2HTabE 
2509 006480 0729 B0 0D                   bcs  TestForB3 
2510 006482 072B               
2511 006482 072B              * Button 2 click 
2512 006482 072B               
2513 006482 072B A9 01                   lda  #1 
2514 006484 072D 8D 0D 00                sta  TabIndex 
2515 006487 0730               
2516 006487 0730 A9 01                   lda  #TabOnly 
2517 006489 0732 8D 46 00                sta  RC 
2518 00648C 0735 4C 5D 06                jmp  Exit 
2519 00648F 0738               
2520 00648F 0738              TestForB3  anop 
2521 00648F 0738               
2522 00648F 0738              BadPress   anop 
2523 00648F 0738               
2524 00648F 0738 20 00 80                jsr  Beep 
2525 006492 073B 4C A1 05                jmp  PollDevLoop 
2526 006495 073E               
2527 006495 073E              * 
2528 006495 073E              * Button Release 
2529 006495 073E              * 
2530 006495 073E               
2531 006495 073E              ButtonRelease anop 
2532 006495 073E               
2533 006495 073E AD 86 08                lda  MouseY 
2534 006498 0741 C9 0E                   cmp  #15-1 
2535 00649A 0743 F0 03                   beq  GoodRow 
2536 00649C 0745               
2537 00649C 0745 4C A1 05                jmp  PollDevLoop 
2538 00649F 0748               
2539 00649F 0748              GoodRow    anop 
2540 00649F 0748               
2541 00649F 0748 AD 0D 00                lda  TabIndex 
2542 0064A2 074B D0 10                   bne  B2Release 
2543 0064A4 074D               
2544 0064A4 074D              B1Release  anop 
2545 0064A4 074D               
2546 0064A4 074D AD 84 08                lda  MouseX 
2547 0064A7 0750 CD 08 00                cmp  B1HTabS 
2548 0064AA 0753 90 18                   bcc  ButtExit 
2549 0064AC 0755 CD 09 00                cmp  B1HTabE 
2550 0064AF 0758 B0 13                   bcs  ButtExit 
2551 0064B1 075A 4C 13 06                jmp  EnterReq 
2552 0064B4 075D               
2553 0064B4 075D              B2Release  anop 
2554 0064B4 075D               
2555 0064B4 075D AD 84 08                lda  MouseX 
2556 0064B7 0760 CD 0A 00                cmp  B2HTabS 
2557 0064BA 0763 90 08                   bcc  ButtExit 
2558 0064BC 0765 CD 0B 00                cmp  B2HTabE 
2559 0064BF 0768 B0 03                   bcs  ButtExit 
2560 0064C1 076A 4C 13 06                jmp  EnterReq 
2561 0064C4 076D               
2562 0064C4 076D              ButtExit   anop 
2563 0064C4 076D               
2564 0064C4 076D 4C A1 05                jmp  PollDevLoop 
2565 0064C7 0770               
2566 0064C7 0770                         End 
 
 
 
Local  Symbols
 
ANIMATEB1  000676  ANIMATEB2  0006A8  ANIMATEBTN 00065E  APPLEKEY   00C061   
B1HTABE    000009  B1HTABS    000008  B1RELEASE  00074D  B1REQ01    000634   
B1SELECTED 00054F  B1TEXT     000036  B2HTABE    00000B  B2HTABS    00000A   
B2RELEASE  00075D  B2REQ01    00064C  B2SELECTED 00057F  B2TEXT     00003E   
BADPRESS   000738  BOXWIDTH   000005  BUTTEXIT   00076D  BUTTON1    000000   
BUTTON1REQ 000627  BUTTON2    000001  BUTTON2REQ 00063F  BUTTONPRES 0006E8   
BUTTONRELE 00073E  CHECKFORB2 00071E  CONTINUE   00051A  CRONLY     000002   
DISPLAYBOX 0001EE  DOWNARROW  00008A  DUPCRS     0001B4  ENDHTAB    0004C7   
ENTER01    00061D  ENTER02    000624  ENTERREQ   000613  EXIT       00065D   
FROMAUX    000502  FROMMAIN   000507  GETCHAR    00050A  GOODLEN    0001DA   
GOODROW    000748  INIT       000197  INVALIDKEY 000657  KEYDEV     0005CE   
KEYPRESS   000047  LEFTARROW  000088  LINE10A    00020C  LINE11A    00022E   
LINE12A    000256  LINE12B    000260  LINE12C    000272  LINE12D    000283   
LINE12E    000292  LINE13A    0002E1  LINE13A1   0002EF  LINE13B    0002F2   
LINE13C    000301  LINE14A    00034D  LINE14B    000350  LINE14C    00035A   
LINE14D    00036B  LINE14E    000375  LINE14F    00037B  LINE14G    000386   
LINE14H    000386  LINE14I    00038B  LINE15A    0003BB  LINE15B    0003E5   
LINE15C    0003F9  LINE15D    000427  LINE15D1   00043B  LINE15E    000447   
LINE15F    00044A  LINE16A    000472  LINE16B    00047C  LINE16C    00048D   
LINE16D    000497  LINE16D1   00049D  LINE16E    0004A9  LINE16F    0004AD   
LOOP1      000183  MINMSG     000007  MODE       000002  MODEBTCAN  000008   
MODEFMTCN1 000006  MODEFMTCN2 000007  MODEOK     000001  MODEOKCAN1 000002   
MODEOKCAN2 000003  MODERETCN1 000004  MODERETCN2 000005  MOUSEDEV1  0005C3   
MOUSEDEV2  0005C8  MOUSEDEV3  0005CB  MSGBOOTCAN 000152  MSGEOF     0001B9   
MSGFMTCAN1 000104  MSGFMTCAN2 00012A  MSGOK      000048  MSGOKCAN1  000068   
MSGOKCAN2  00008E  MSGRETCAN1 0000B6  MSGRETCAN2 0000DC  MSGSTART   00017A   
MSGWIDTH   000003  NEXTCHAR   00019E  NEXTKEY01  000606  NOOF       000521   
NOTHELD    0006F2  NUMBUTTS   00000C  ON80STORE  00C001  OPTIONKEY  00C062   
OVER       0001D1  P1HIGHER   0001C1  PAGE1      00C054  PAGE2      00C055   
PART1EOF   0001AC  PB01       0006DE  POLLDEV    00059E  POLLDEVLOO 0005A1   
POLLMOUSE  0005A9  PRTB1      000554  PRTB2      000584  PRTEXIT    000592   
PRTLOOP1   000558  PRTLOOP2   000588  PTRBUTTON  0006DA  RC         000046   
REFRESHBTN 000530  RESTORE    000516  RESTSCREEN 0004D0  RETURNKEY  00008D   
RIGHTARROW 000095  RIGHTROW   0006FC  SAVERTN    0004C8  SAVESCREEN 0004C9   
SSLOOP1    0004EB  SSLOOP2    0004FD  STARTHTAB  000004  STARTRTN   0004D3   
TABDOWN    0005E2  TABINDEX   00000D  TABKEY     000089  TABONLY    000001   
TABREQ     0005DD  TABREQ1    0005FE  TABUP      0005F2  TEMPSAVE   000006   
TESTFORB2  000714  TESTFORB3  000738  TEXTLINE   0004B9  TEXTLINE09 0004B9   
TEXTLINE10 0004BB  TEXTLINE11 0004BD  TEXTLINE12 0004BF  TEXTLINE13 0004C1   
TEXTLINE14 0004C3  TEXTLINE15 0004C5  TXTBOOT    00002E  TXTCANCEL  000016   
TXTFORMAT  000026  TXTLOOP1   00005C  TXTLOOP2   00007C  TXTLOOP3   0000A4   
TXTLOOP4   0000CA  TXTLOOP5   0000F2  TXTLOOP6   000118  TXTLOOP7   000140   
TXTLOOP8   000168  TXTOK      00000E  TXTRETRY   00001E  UI         000598   
UPARROW    00008B   
2567 0064C7 0000                         Copy Divide16Bit.s 
2568 0064C7 0000              Divide     Start 
2569 0064C7 0000               
2570 0064C7 0000              * 
2571 0064C7 0000              * 16 Bit Divide Routine 
2572 0064C7 0000              * 
2573 0064C7 0000              * ACC / AUX -> ACC with remainder in EXT 
2574 0064C7 0000              * 
2575 0064C7 0000              *          Define ACC, AUX and EXT as 2 byte ZP locations 
2576 0064C7 0000              * 
2577 0064C7 0000 A9 00                   lda  #0 
2578 0064C9 0002 85 89                   sta  ext+1 
2579 0064CB 0004 A2 10                   ldx  #$10 
2580 0064CD 0006               
2581 0064CD 0006              Div1       anop 
2582 0064CD 0006               
2583 0064CD 0006 06 84                   asl  acc 
2584 0064CF 0008 26 85                   rol  acc+1 
2585 0064D1 000A 2A                      rol  a 
2586 0064D2 000B 26 89                   rol  ext+1 
2587 0064D4 000D 48                      pha 
2588 0064D5 000E C5 86                   cmp  aux 
2589 0064D7 0010 A5 89                   lda  ext+1 
2590 0064D9 0012 E5 87                   sbc  aux+1 
2591 0064DB 0014 90 08                   bcc  Div2 
2592 0064DD 0016 85 89                   sta  ext+1 
2593 0064DF 0018 68                      pla 
2594 0064E0 0019 E5 86                   sbc  aux 
2595 0064E2 001B 48                      pha 
2596 0064E3 001C E6 84                   inc  acc 
2597 0064E5 001E               
2598 0064E5 001E              Div2       anop 
2599 0064E5 001E               
2600 0064E5 001E 68                      pla 
2601 0064E6 001F CA                      dex 
2602 0064E7 0020 D0 E4                   bne  Div1 
2603 0064E9 0022 85 88                   sta  ext 
2604 0064EB 0024               
2605 0064EB 0024 60                      rts 
2606 0064EC 0025               
2607 0064EC 0025                         End 
 
 
 
Local  Symbols
 
DIV1       000006  DIV2       00001E   
2608 0064EC 0000                         Copy COUT.s 
2609 0064EC 0000              cout       Start 
2610 0064EC 0000               
2611 0064EC 0000              * 
2612 0064EC 0000              * Custom COUT - Mark Percival 
2613 0064EC 0000              * 
2614 0064EC 0000               
2615 0064EC 0000              * Step 1 - Process Special Characters 
2616 0064EC 0000               
2617 0064EC 0000 48                      pha 
2618 0064ED 0001 8D A0 00                sta  Character 
2619 0064F0 0004 C9 0F                   cmp  #SetInverse 
2620 0064F2 0006 D0 0A                   bne  CO1 
2621 0064F4 0008 AD A1 00                lda  Flags 
2622 0064F7 000B 09 01                   ora  #InvOn 
2623 0064F9 000D 8D A1 00                sta  Flags 
2624 0064FC 0010 68                      pla 
2625 0064FD 0011 60                      rts 
2626 0064FE 0012               
2627 0064FE 0012              CO1        anop 
2628 0064FE 0012               
2629 0064FE 0012 C9 0E                   cmp  #SetNormal 
2630 006500 0014 D0 0A                   bne  CO2 
2631 006502 0016 AD A1 00                lda  Flags 
2632 006505 0019 29 FE                   and  #InvOff 
2633 006507 001B 8D A1 00                sta  Flags 
2634 00650A 001E 68                      pla 
2635 00650B 001F 60                      rts 
2636 00650C 0020               
2637 00650C 0020              CO2        anop 
2638 00650C 0020               
2639 00650C 0020 C9 1B                   cmp  #SetMouseTxt 
2640 00650E 0022 D0 0A                   bne  CO3 
2641 006510 0024 AD A1 00                lda  Flags 
2642 006513 0027 09 02                   ora  #MouseOn 
2643 006515 0029 8D A1 00                sta  Flags 
2644 006518 002C 68                      pla 
2645 006519 002D 60                      rts 
2646 00651A 002E               
2647 00651A 002E              CO3        anop 
2648 00651A 002E               
2649 00651A 002E C9 18                   cmp  #SetStdTxt 
2650 00651C 0030 D0 0A                   bne  CO4 
2651 00651E 0032 AD A1 00                lda  Flags 
2652 006521 0035 29 FD                   and  #MouseOff 
2653 006523 0037 8D A1 00                sta  Flags 
2654 006526 003A 68                      pla 
2655 006527 003B 60                      rts 
2656 006528 003C               
2657 006528 003C              * Step 2 - Character Conversion 
2658 006528 003C               
2659 006528 003C              CO4        anop 
2660 006528 003C               
2661 006528 003C AD A1 00                lda  Flags 
2662 00652B 003F 89 01                   bit  #InvOn 
2663 00652D 0041 F0 08                   beq  CO5 
2664 00652F 0043 AD A0 00                lda  Character 
2665 006532 0046 29 7F                   and  #$7F 
2666 006534 0048 8D A0 00                sta  Character 
2667 006537 004B               
2668 006537 004B              CO5        anop 
2669 006537 004B               
2670 006537 004B AD A1 00                lda  Flags 
2671 00653A 004E 89 02                   bit  #MouseOn 
2672 00653C 0050 D0 11                   bne  CO6 
2673 00653E 0052 AD A0 00                lda  Character 
2674 006541 0055 C9 40                   cmp  #$40 
2675 006543 0057 90 0A                   bcc  CO6 
2676 006545 0059 C9 60                   cmp  #$60 
2677 006547 005B B0 06                   bcs  CO6 
2678 006549 005D 38                      sec 
2679 00654A 005E E9 40                   sbc  #$40 
2680 00654C 0060 8D A0 00                sta  Character 
2681 00654F 0063               
2682 00654F 0063              * Step 3 - Print Character 
2683 00654F 0063               
2684 00654F 0063              CO6        anop 
2685 00654F 0063               
2686 00654F 0063 DA                      phx 
2687 006550 0064 5A                      phy 
2688 006551 0065               
2689 006551 0065 8D 01 C0                sta  On80Store 
2690 006554 0068 A5 25                   lda  VTab 
2691 006556 006A 0A                      asl  a 
2692 006557 006B AA                      tax 
2693 006558 006C BD A2 00                lda  TextLine,x 
2694 00655B 006F 85 8A                   sta  TextPtr 
2695 00655D 0071 E8                      inx 
2696 00655E 0072 BD A2 00                lda  TextLine,x 
2697 006561 0075 85 8B                   sta  TextPtr+1 
2698 006563 0077               
2699 006563 0077 A5 24                   lda  HTab 
2700 006565 0079 4A                      lsr  a 
2701 006566 007A A8                      tay 
2702 006567 007B B0 05                   bcs  MainRAM 
2703 006569 007D               
2704 006569 007D              AuxRAM     anop 
2705 006569 007D               
2706 006569 007D 8D 55 C0                sta  Page2 
2707 00656C 0080 80 03                   bra  PrtChar 
2708 00656E 0082               
2709 00656E 0082              MainRAM    anop 
2710 00656E 0082               
2711 00656E 0082 8D 54 C0                sta  Page1 
2712 006571 0085               
2713 006571 0085              PrtChar    anop 
2714 006571 0085               
2715 006571 0085 AD A0 00                lda  Character 
2716 006574 0088 91 8A                   sta  (TextPtr),y 
2717 006576 008A               
2718 006576 008A 8D 54 C0                sta  Page1 
2719 006579 008D               
2720 006579 008D 7A                      ply 
2721 00657A 008E FA                      plx 
2722 00657B 008F               
2723 00657B 008F A5 24                   lda  HTab 
2724 00657D 0091 1A                      inc  a 
2725 00657E 0092 C9 50                   cmp  #80 
2726 006580 0094 90 06                   bcc  Less80 
2727 006582 0096               
2728 006582 0096 64 24                   stz  HTab 
2729 006584 0098 E6 25                   inc  VTab 
2730 006586 009A 80 02                   bra  COExit 
2731 006588 009C               
2732 006588 009C              Less80     anop 
2733 006588 009C               
2734 006588 009C 85 24                   sta  HTab 
2735 00658A 009E               
2736 00658A 009E              COExit     anop 
2737 00658A 009E               
2738 00658A 009E 68                      pla 
2739 00658B 009F               
2740 00658B 009F 60                      rts 
2741 00658C 00A0               
2742 00658C 00A0 00           Character  ds   1 
2743 00658D 00A1 00           Flags      dc   h'00' 
2744 00658E 00A2              InvOn      equ  %00000001 
2745 00658E 00A2              InvOff     equ  %11111110 
2746 00658E 00A2              MouseOn    equ  %00000010 
2747 00658E 00A2              MouseOff   equ  %11111101 
2748 00658E 00A2               
2749 00658E 00A2              On80Store  equ  $C001 
2750 00658E 00A2              Page1      equ  $C054 
2751 00658E 00A2              Page2      equ  $C055 
2752 00658E 00A2               
2753 00658E 00A2              SetInverse equ  $0F 
2754 00658E 00A2              SetNormal  equ  $0E 
2755 00658E 00A2              SetMouseTxt equ $1B 
2756 00658E 00A2              SetStdTxt  equ  $18 
2757 00658E 00A2               
2758 00658E 00A2              TextLine   anop                         Text screen line starting addresses 
2759 00658E 00A2               
2760 00658E 00A2 00 04        TextLine00 dc   i'$0400' 
2761 006590 00A4 80 04        TextLine01 dc   i'$0480' 
2762 006592 00A6 00 05        TextLine02 dc   i'$0500' 
2763 006594 00A8 80 05        TextLine03 dc   i'$0580' 
2764 006596 00AA 00 06        TextLine04 dc   i'$0600' 
2765 006598 00AC 80 06        TextLine05 dc   i'$0680' 
2766 00659A 00AE 00 07        TextLine06 dc   i'$0700' 
2767 00659C 00B0 80 07        TextLine07 dc   i'$0780' 
2768 00659E 00B2 28 04        TextLine08 dc   i'$0428' 
2769 0065A0 00B4 A8 04        TextLine09 dc   i'$04A8' 
2770 0065A2 00B6 28 05        TextLine10 dc   i'$0528' 
2771 0065A4 00B8 A8 05        TextLine11 dc   i'$05A8' 
2772 0065A6 00BA 28 06        TextLine12 dc   i'$0628' 
2773 0065A8 00BC A8 06        TextLine13 dc   i'$06A8' 
2774 0065AA 00BE 28 07        TextLine14 dc   i'$0728' 
2775 0065AC 00C0 A8 07        TextLine15 dc   i'$07A8' 
2776 0065AE 00C2 50 04        TextLine16 dc   i'$0450' 
2777 0065B0 00C4 D0 04        TextLine17 dc   i'$04D0' 
2778 0065B2 00C6 50 05        TextLine18 dc   i'$0550' 
2779 0065B4 00C8 D0 05        TextLine19 dc   i'$05D0' 
2780 0065B6 00CA 50 06        TextLine20 dc   i'$0650' 
2781 0065B8 00CC D0 06        TextLine21 dc   i'$06D0' 
2782 0065BA 00CE 50 07        TextLine22 dc   i'$0750' 
2783 0065BC 00D0 D0 07        TextLine23 dc   i'$07D0' 
2784 0065BE 00D2               
2785 0065BE 00D2              * Dummy routine to replace unneeded monitor routine 
2786 0065BE 00D2               
2787 0065BE 00D2              SetVTab    Entry 
2788 0065BE 00D2               
2789 0065BE 00D2 60                      rts 
2790 0065BF 00D3               
2791 0065BF 00D3              SetInv     Entry 
2792 0065BF 00D3               
2793 0065BF 00D3 A9 0F                   lda  #SetInverse 
2794 0065C1 00D5 4C 00 80                jmp  cout 
2795 0065C4 00D8               
2796 0065C4 00D8               
2797 0065C4 00D8              SetNorm    Entry 
2798 0065C4 00D8               
2799 0065C4 00D8 A9 0E                   lda  #SetNormal 
2800 0065C6 00DA 4C 00 80                jmp  cout 
2801 0065C9 00DD               
2802 0065C9 00DD                         End 
 
 
 
Local  Symbols
 
AUXRAM     00007D  CHARACTER  0000A0  CO1        000012  CO2        000020   
CO3        00002E  CO4        00003C  CO5        00004B  CO6        000063   
COEXIT     00009E  FLAGS      0000A1  INVOFF     0000FE  INVON      000001   
LESS80     00009C  MAINRAM    000082  MOUSEOFF   0000FD  MOUSEON    000002   
ON80STORE  00C001  PAGE1      00C054  PAGE2      00C055  PRTCHAR    000085   
SETINV     0000D3  SETINVERSE 00000F  SETMOUSETX 00001B  SETNORM    0000D8   
SETNORMAL  00000E  SETSTDTXT  000018  SETVTAB    0000D2  TEXTLINE   0000A2   
TEXTLINE00 0000A2  TEXTLINE01 0000A4  TEXTLINE02 0000A6  TEXTLINE03 0000A8   
TEXTLINE04 0000AA  TEXTLINE05 0000AC  TEXTLINE06 0000AE  TEXTLINE07 0000B0   
TEXTLINE08 0000B2  TEXTLINE09 0000B4  TEXTLINE10 0000B6  TEXTLINE11 0000B8   
TEXTLINE12 0000BA  TEXTLINE13 0000BC  TEXTLINE14 0000BE  TEXTLINE15 0000C0   
TEXTLINE16 0000C2  TEXTLINE17 0000C4  TEXTLINE18 0000C6  TEXTLINE19 0000C8   
TEXTLINE20 0000CA  TEXTLINE21 0000CC  TEXTLINE22 0000CE  TEXTLINE23 0000D0   
2803 0065C9 0000               
2804 0065C9 0000              *          Mouse Routines 
2805 0065C9 0000               
2806 0065C9 0000                         Copy Mouse.s 
2807 0065C9 0000              * 
2808 0065C9 0000              * Apple Mouse Routines 
2809 0065C9 0000              * 
2810 0065C9 0000              * Requires : MousePtr  - 2 bytes in zero page 
2811 0065C9 0000              *            MouseX    - 2 bytes 
2812 0065C9 0000              *            MouseY    - 2 bytes 
2813 0065C9 0000              *            LowClamp  - 2 bytes 
2814 0065C9 0000              *            HighClamp - 2 bytes 
2815 0065C9 0000               
2816 0065C9 0000              AppleMouse Start 
2817 0065C9 0000               
2818 0065C9 0000              oSetMouse   equ $12 
2819 0065C9 0000              oServeMouse equ $13 
2820 0065C9 0000              oReadMouse  equ $14 
2821 0065C9 0000              oClearMouse equ $15 
2822 0065C9 0000              oPosMouse   equ $16 
2823 0065C9 0000              oClampMouse equ $17 
2824 0065C9 0000              oHomeMouse  equ $18 
2825 0065C9 0000              oInitMouse  equ $19 
2826 0065C9 0000               
2827 0065C9 0000              MouseXL    equ  $0478 + slot            Low byte of absolute X position 
2828 0065C9 0000              MouseYL    equ  $04F8 + slot            Low byte of absolute Y position 
2829 0065C9 0000              MouseXH    equ  $0578 + slot            High byte of absolute X position 
2830 0065C9 0000              MouseYH    equ  $05F8 + slot            High byte of absolute Y position 
2831 0065C9 0000               
2832 0065C9 0000              MouseStatL equ  $0778 + slot            Button 0/1 interrupt status byte 
2833 0065C9 0000              MouseModeL equ  $07F8 + slot            Mode byte 
2834 0065C9 0000               
2835 0065C9 0000              LowClampL  equ  $0478                   Low byte of low clamp 
2836 0065C9 0000              HighClampL equ  $04F8                   Low byte of high clamp 
2837 0065C9 0000              LowClampH  equ  $0578                   High byte of low clamp 
2838 0065C9 0000              HighClampH equ  $05F8                   High byte of high clamp 
2839 0065C9 0000               
2840 0065C9 0000 00           Cn         ds   1                       X-reg operand byte 
2841 0065CA 0001 00           n0         ds   1                       Y-reg operand byte 
2842 0065CB 0002 00           MouseSlot  ds   1                       Mouse slot number 
2843 0065CC 0003               
2844 0065CC 0003              cout       equ  $FDED                   Standard character output routine 
2845 0065CC 0003               
2846 0065CC 0003              * FindMouse - Find mouse base address 
2847 0065CC 0003               
2848 0065CC 0003              FindMouse  Entry 
2849 0065CC 0003               
2850 0065CC 0003 9C 00 00                stz  Cn                      Zero out X & Y reg operand bytes 
2851 0065CF 0006 9C 01 00                stz  n0 
2852 0065D2 0009               
2853 0065D2 0009 64 08                   stz  MousePtr                Set up first pointer to $C700 
2854 0065D4 000B A9 C7                   lda  #$C7 
2855 0065D6 000D 85 09                   sta  MousePtr+1 
2856 0065D8 000F               
2857 0065D8 000F 9C 8C 08                stz  MouseStat               Initialize to zero. 
2858 0065DB 0012               
2859 0065DB 0012              SlotSearch anop 
2860 0065DB 0012               
2861 0065DB 0012 A0 05                   ldy  #$05                    First ID byte 
2862 0065DD 0014 B1 08                   lda  (MousePtr),y 
2863 0065DF 0016 C9 38                   cmp  #$38 
2864 0065E1 0018 D0 35                   bne  NextSlot 
2865 0065E3 001A               
2866 0065E3 001A A0 07                   ldy  #$07                    Second ID byte 
2867 0065E5 001C B1 08                   lda  (MousePtr),y 
2868 0065E7 001E C9 18                   cmp  #$18 
2869 0065E9 0020 D0 2D                   bne  NextSlot 
2870 0065EB 0022               
2871 0065EB 0022 A0 0B                   ldy  #$0B                    Third ID byte 
2872 0065ED 0024 B1 08                   lda  (MousePtr),y 
2873 0065EF 0026 C9 01                   cmp  #$01 
2874 0065F1 0028 D0 25                   bne  NextSlot 
2875 0065F3 002A               
2876 0065F3 002A A0 0C                   ldy  #$0C                    Fourth ID byte 
2877 0065F5 002C B1 08                   lda  (MousePtr),y 
2878 0065F7 002E C9 20                   cmp  #$20 
2879 0065F9 0030 D0 1D                   bne  NextSlot 
2880 0065FB 0032               
2881 0065FB 0032 A0 FB                   ldy  #$FB                    Fifth ID byte 
2882 0065FD 0034 B1 08                   lda  (MousePtr),y 
2883 0065FF 0036 C9 D6                   cmp  #$D6 
2884 006601 0038 D0 15                   bne  NextSlot 
2885 006603 003A               
2886 006603 003A A5 09                   lda  MousePtr+1              Save mouse slot 
2887 006605 003C 29 0F                   and  #$0F 
2888 006607 003E 8D 02 00                sta  MouseSlot 
2889 00660A 0041               
2890 00660A 0041 A5 09                   lda  MousePtr+1              Set up x-reg operand byte. 
2891 00660C 0043 8D 00 00                sta  Cn 
2892 00660F 0046               
2893 00660F 0046 0A                      asl  a                       Set up y-reg operand byte. 
2894 006610 0047 0A                      asl  a 
2895 006611 0048 0A                      asl  a 
2896 006612 0049 0A                      asl  a 
2897 006613 004A 8D 01 00                sta  n0 
2898 006616 004D               
2899 006616 004D 18                      clc                          Clear carry to indicate mouse found 
2900 006617 004E               
2901 006617 004E 60                      rts                          Found Mouse Card 
2902 006618 004F               
2903 006618 004F              NextSlot   anop 
2904 006618 004F               
2905 006618 004F C6 09                   dec  MousePtr+1              Decrement to next slot 
2906 00661A 0051 C9 C0                   cmp  #$C0                    At slot 0? 
2907 00661C 0053 D0 BD                   bne  SlotSearch              No, continue search 
2908 00661E 0055               
2909 00661E 0055 64 09                   stz  MousePtr+1              No mouse so zero out pointer. 
2910 006620 0057               
2911 006620 0057 38                      sec                          Set carry to indicate no mouse. 
2912 006621 0058               
2913 006621 0058 60                      rts 
2914 006622 0059               
2915 006622 0059              * SetMouse - Sets mouse operation mode 
2916 006622 0059               
2917 006622 0059              SetMouse   Entry 
2918 006622 0059               
2919 006622 0059 AA                      tax                          Save requested operation mode 
2920 006623 005A A5 09                   lda  MousePtr+1              Get mouse pointer high byte 
2921 006625 005C D0 01                   bne  GoodMouse1              Is this zero? 
2922 006627 005E 60                      rts                          Yes, no mouse so exit 
2923 006628 005F               
2924 006628 005F              GoodMouse1 anop 
2925 006628 005F               
2926 006628 005F A9 12                   lda  #oSetMouse 
2927 00662A 0061 85 08                   sta  MousePtr                Setup entry point address 
2928 00662C 0063               
2929 00662C 0063 B2 08                   lda  (MousePtr)              Get entry point 
2930 00662E 0065 85 08                   sta  MousePtr                Setup final entry point 
2931 006630 0067 8A                      txa                          Restore requested operation mode 
2932 006631 0068 08                      php                          Save status register 
2933 006632 0069 78                      sei                          Set interrupts off 
2934 006633 006A 20 99 01                jsr  GoMouse                 Make firmware call 
2935 006636 006D B0 11                   bcs  SetMousErr 
2936 006638 006F 28                      plp                          Restore status register 
2937 006639 0070               
2938 006639 0070 AE 02 00                ldx  MouseSlot               Get slot number 
2939 00663C 0073               
2940 00663C 0073 BD 78 07                lda  MouseStatL,x            Save status byte 
2941 00663F 0076 8D 8C 08                sta  MouseStat 
2942 006642 0079 BD F8 07                lda  MouseModeL,x            Save mode byte 
2943 006645 007C 8D 8D 08                sta  MouseMode 
2944 006648 007F               
2945 006648 007F 60                      rts 
2946 006649 0080               
2947 006649 0080              SetMousErr anop 
2948 006649 0080               
2949 006649 0080 28                      plp                          Restore status register 
2950 00664A 0081 A0 00                   ldy  #0 
2951 00664C 0083 A2 20                   ldx  #SetMouseX-SetMousMsg 
2952 00664E 0085               
2953 00664E 0085              SMLoop1    anop 
2954 00664E 0085               
2955 00664E 0085 B9 91 00                lda  SetMousMsg,y 
2956 006651 0088 20 ED FD                jsr  cout 
2957 006654 008B C8                      iny 
2958 006655 008C CA                      dex 
2959 006656 008D D0 F6                   bne SMLoop1 
2960 006658 008F               
2961 006658 008F              SMLoop2    anop 
2962 006658 008F 80 FE                   bra  SMLoop2                 Infinit loop 
2963 00665A 0091               
2964 00665A 0091                         msb  on 
2965 00665A 0091 D3 E5 F4 CD  SetMousMsg dc   c'SetMouse - Illegal mode entered.' 
2966 00667A 00B1              SetMouseX  anop 
2967 00667A 00B1                         msb  off 
2968 00667A 00B1               
2969 00667A 00B1              * ServeMouse - Tests for interrupt from mouse and resets interrupt line 
2970 00667A 00B1               
2971 00667A 00B1              ServeMouse Entry 
2972 00667A 00B1               
2973 00667A 00B1 A5 09                   lda  MousePtr+1              Get mouse pointer high byte 
2974 00667C 00B3 D0 01                   bne  GoodMouse2              Is this zero? 
2975 00667E 00B5 60                      rts                          Yes, no mouse so exit 
2976 00667F 00B6               
2977 00667F 00B6              GoodMouse2 anop 
2978 00667F 00B6               
2979 00667F 00B6 A9 13                   lda  #oServeMouse 
2980 006681 00B8 85 08                   sta  MousePtr                Setup entry point address 
2981 006683 00BA               
2982 006683 00BA B2 08                   lda  (MousePtr)              Get entry point 
2983 006685 00BC 85 08                   sta  MousePtr                Setup final entry point 
2984 006687 00BE 08                      php                          Save status register 
2985 006688 00BF 78                      sei                          Set interrupts off 
2986 006689 00C0 20 99 01                jsr  GoMouse                 Make firmware call 
2987 00668C 00C3 28                      plp                          Restore status register 
2988 00668D 00C4 60                      rts 
2989 00668E 00C5               
2990 00668E 00C5              * ReadMouse - Reads delta (X/Y) positions, updates absolute X/Y pos, 
2991 00668E 00C5              *             and reads button statuses from the mouse 
2992 00668E 00C5               
2993 00668E 00C5              ReadMouse  Entry 
2994 00668E 00C5               
2995 00668E 00C5 A5 09                   lda  MousePtr+1              Get mouse pointer high byte 
2996 006690 00C7 D0 01                   bne  GoodMouse3              Is this zero? 
2997 006692 00C9 60                      rts                          Yes, no mouse so exit 
2998 006693 00CA               
2999 006693 00CA              GoodMouse3 anop 
3000 006693 00CA               
3001 006693 00CA A9 14                   lda  #oReadMouse 
3002 006695 00CC 85 08                   sta  MousePtr                Setup entry point address 
3003 006697 00CE               
3004 006697 00CE B2 08                   lda  (MousePtr)              Get entry point 
3005 006699 00D0 85 08                   sta  MousePtr                Setup final entry point 
3006 00669B 00D2 08                      php                          Save status register 
3007 00669C 00D3 78                      sei                          Set interrupts off 
3008 00669D 00D4 20 99 01                jsr  GoMouse                 Make firmware call 
3009 0066A0 00D7               
3010 0066A0 00D7 AE 02 00                ldx  MouseSlot 
3011 0066A3 00DA               
3012 0066A3 00DA BD 78 04                lda  MouseXL,x               Save mouse x setting 
3013 0066A6 00DD 8D 84 08                sta  MouseX 
3014 0066A9 00E0 BD 78 05                lda  MouseXH,x 
3015 0066AC 00E3 8D 85 08                sta  MouseX+1 
3016 0066AF 00E6               
3017 0066AF 00E6 BD F8 04                lda  MouseYL,x               Save mouse y setting 
3018 0066B2 00E9 8D 86 08                sta  MouseY 
3019 0066B5 00EC BD F8 05                lda  MouseYH,x 
3020 0066B8 00EF 8D 87 08                sta  MouseY+1 
3021 0066BB 00F2               
3022 0066BB 00F2 BD 78 07                lda  MouseStatL,x 
3023 0066BE 00F5 8D 8C 08                sta  MouseStat 
3024 0066C1 00F8               
3025 0066C1 00F8 BD F8 07                lda  MouseModeL,x 
3026 0066C4 00FB 8D 8D 08                sta  MouseMode 
3027 0066C7 00FE               
3028 0066C7 00FE 28                      plp                          Restore status register 
3029 0066C8 00FF 60                      rts 
3030 0066C9 0100               
3031 0066C9 0100              * ClearMouse - Resets buttons, movements and interrupt status 0. 
3032 0066C9 0100               
3033 0066C9 0100              ClearMouse Entry 
3034 0066C9 0100               
3035 0066C9 0100 A5 09                   lda  MousePtr+1              Get mouse pointer high byte 
3036 0066CB 0102 D0 01                   bne  GoodMouse4              Is this zero? 
3037 0066CD 0104 60                      rts                          Yes, no mouse so exit 
3038 0066CE 0105               
3039 0066CE 0105              GoodMouse4 anop 
3040 0066CE 0105               
3041 0066CE 0105 A9 15                   lda  #oClearMouse 
3042 0066D0 0107 85 08                   sta  MousePtr                Setup entry point address 
3043 0066D2 0109               
3044 0066D2 0109 B2 08                   lda  (MousePtr)              Get entry point 
3045 0066D4 010B 85 08                   sta  MousePtr                Setup final entry point 
3046 0066D6 010D 08                      php                          Save status register 
3047 0066D7 010E 78                      sei                          Set interrupts off 
3048 0066D8 010F 20 99 01                jsr  GoMouse                 Make firmware call 
3049 0066DB 0112 28                      plp                          Restore status register 
3050 0066DC 0113 60                      rts 
3051 0066DD 0114               
3052 0066DD 0114              * PosMouse - Allows caller to change current mouse position. 
3053 0066DD 0114               
3054 0066DD 0114              PosMouse  Entry 
3055 0066DD 0114               
3056 0066DD 0114 A5 09                   lda  MousePtr+1              Get mouse pointer high byte 
3057 0066DF 0116 D0 01                   bne  GoodMouse5              Is this zero? 
3058 0066E1 0118 60                      rts                          Yes, no mouse so exit 
3059 0066E2 0119               
3060 0066E2 0119              GoodMouse5 anop 
3061 0066E2 0119               
3062 0066E2 0119 A9 16                   lda  #oPosMouse 
3063 0066E4 011B 85 08                   sta  MousePtr                Setup entry point address 
3064 0066E6 011D               
3065 0066E6 011D B2 08                   lda  (MousePtr)              Get entry point 
3066 0066E8 011F 85 08                   sta  MousePtr                Setup final entry point 
3067 0066EA 0121 08                      php                          Save status register 
3068 0066EB 0122 78                      sei                          Set interrupts off 
3069 0066EC 0123               
3070 0066EC 0123 AE 02 00                ldx  MouseSlot 
3071 0066EF 0126               
3072 0066EF 0126 AD 84 08                lda  MouseX                  Load mouse X corridinate 
3073 0066F2 0129 9D 78 04                sta  MouseXL,x 
3074 0066F5 012C AD 85 08                lda  MouseX+1 
3075 0066F8 012F 9D 78 05                sta  MouseXH,x 
3076 0066FB 0132               
3077 0066FB 0132 AD 86 08                lda  MouseY                  Load mouse Y corridinate 
3078 0066FE 0135 9D F8 04                sta  MouseYL,x 
3079 006701 0138 AD 87 08                lda  MouseY+1 
3080 006704 013B 9D F8 05                sta  MouseYH,x 
3081 006707 013E               
3082 006707 013E 20 99 01                jsr  GoMouse                 Make firmware call 
3083 00670A 0141 28                      plp                          Restore status register 
3084 00670B 0142 60                      rts 
3085 00670C 0143               
3086 00670C 0143              * ClampMouse - Sets up clamping window 
3087 00670C 0143               
3088 00670C 0143              ClampMouse Entry 
3089 00670C 0143               
3090 00670C 0143 AA                      tax                          Save clamping axis 
3091 00670D 0144               
3092 00670D 0144 A5 09                   lda  MousePtr+1              Get mouse pointer high byte 
3093 00670F 0146 D0 01                   bne  GoodMouse6              Is this zero? 
3094 006711 0148 60                      rts                          Yes, no mouse so exit 
3095 006712 0149               
3096 006712 0149              GoodMouse6 anop 
3097 006712 0149               
3098 006712 0149 A9 17                   lda  #oClampMouse 
3099 006714 014B 85 08                   sta  MousePtr                Setup entry point address 
3100 006716 014D               
3101 006716 014D B2 08                   lda  (MousePtr)              Get entry point 
3102 006718 014F 85 08                   sta  MousePtr                Setup final entry point 
3103 00671A 0151               
3104 00671A 0151 08                      php                          Save status register 
3105 00671B 0152 78                      sei                          Set interrupts off 
3106 00671C 0153               
3107 00671C 0153 AD 88 08                lda  LowClamp                Set up clamping low value 
3108 00671F 0156 8D 78 04                sta  LowClampL 
3109 006722 0159 AD 89 08                lda  LowClamp+1 
3110 006725 015C 8D 78 05                sta  LowClampH 
3111 006728 015F               
3112 006728 015F AD 8A 08                lda  HighClamp               Set up clamping high value 
3113 00672B 0162 8D F8 04                sta  HighClampL 
3114 00672E 0165 AD 8B 08                lda  HighClamp+1 
3115 006731 0168 8D F8 05                sta  HighClampH 
3116 006734 016B               
3117 006734 016B 8A                      txa                          Restore clamping axis 
3118 006735 016C               
3119 006735 016C 20 99 01                jsr  GoMouse                 Make firmware call 
3120 006738 016F 28                      plp                          Restore status register 
3121 006739 0170 60                      rts 
3122 00673A 0171               
3123 00673A 0171              * HomeMouse - Sets the absolute position to upper-left corner of 
3124 00673A 0171              *             clamping window. 
3125 00673A 0171               
3126 00673A 0171              HomeMouse  Entry 
3127 00673A 0171               
3128 00673A 0171 A5 09                   lda  MousePtr+1              Get mouse pointer high byte 
3129 00673C 0173 D0 01                   bne  GoodMouse7              Is this zero? 
3130 00673E 0175 60                      rts                          Yes, no mouse so exit 
3131 00673F 0176               
3132 00673F 0176              GoodMouse7 anop 
3133 00673F 0176               
3134 00673F 0176 A9 18                   lda  #oHomeMouse 
3135 006741 0178 85 08                   sta  MousePtr                Setup entry point address 
3136 006743 017A               
3137 006743 017A B2 08                   lda  (MousePtr)              Get entry point 
3138 006745 017C 85 08                   sta  MousePtr                Setup final entry point 
3139 006747 017E 08                      php                          Save status register 
3140 006748 017F 78                      sei                          Set interrupts off 
3141 006749 0180 20 99 01                jsr  GoMouse                 Make firmware call 
3142 00674C 0183 28                      plp                          Restore status register 
3143 00674D 0184 60                      rts 
3144 00674E 0185               
3145 00674E 0185              * InitMouse - Sets screen holes to default values and sets clamping windows to 
3146 00674E 0185              *             default values of 0 to 1023 in both X and Y directions, resets 
3147 00674E 0185              *             hardware. 
3148 00674E 0185               
3149 00674E 0185              InitMouse  Entry 
3150 00674E 0185               
3151 00674E 0185 A5 09                   lda  MousePtr+1              Get mouse pointer high byte 
3152 006750 0187 D0 01                   bne  GoodMouse8              Is this zero? 
3153 006752 0189 60                      rts                          Yes, no mouse so exit 
3154 006753 018A               
3155 006753 018A              GoodMouse8 anop 
3156 006753 018A               
3157 006753 018A A9 19                   lda  #oInitMouse 
3158 006755 018C 85 08                   sta  MousePtr                Setup entry point address 
3159 006757 018E               
3160 006757 018E B2 08                   lda  (MousePtr)              Get entry point 
3161 006759 0190 85 08                   sta  MousePtr                Setup final entry point 
3162 00675B 0192 08                      php                          Save status register 
3163 00675C 0193 78                      sei                          Set interrupts off 
3164 00675D 0194 20 99 01                jsr  GoMouse                 Make firmware call 
3165 006760 0197 28                      plp                          Restore status register 
3166 006761 0198 60                      rts 
3167 006762 0199               
3168 006762 0199              * GoMouse - Makes the mouse firmware call 
3169 006762 0199               
3170 006762 0199              GoMouse    anop 
3171 006762 0199               
3172 006762 0199 AE 00 00                ldx  Cn 
3173 006765 019C AC 01 00                ldy  n0 
3174 006768 019F               
3175 006768 019F 6C 08 00                jmp  (MousePtr)              Make firmware call 
3176 00676B 01A2               
3177 00676B 01A2                         End 
 
 
 
Local  Symbols
 
CLAMPMOUSE 000143  CLEARMOUSE 000100  CN         000000  COUT       00FDED   
FINDMOUSE  000003  GOMOUSE    000199  GOODMOUSE1 00005F  GOODMOUSE2 0000B6   
GOODMOUSE3 0000CA  GOODMOUSE4 000105  GOODMOUSE5 000119  GOODMOUSE6 000149   
GOODMOUSE7 000176  GOODMOUSE8 00018A  HIGHCLAMPH 0005F8  HIGHCLAMPL 0004F8   
HOMEMOUSE  000171  INITMOUSE  000185  LOWCLAMPH  000578  LOWCLAMPL  000478   
MOUSEMODEL 0007F8  MOUSESLOT  000002  MOUSESTATL 000778  MOUSEXH    000578   
MOUSEXL    000478  MOUSEYH    0005F8  MOUSEYL    0004F8  N0         000001   
NEXTSLOT   00004F  OCLAMPMOUS 000017  OCLEARMOUS 000015  OHOMEMOUSE 000018   
OINITMOUSE 000019  OPOSMOUSE  000016  OREADMOUSE 000014  OSERVEMOUS 000013   
OSETMOUSE  000012  POSMOUSE   000114  READMOUSE  0000C5  SERVEMOUSE 0000B1   
SETMOUSE   000059  SETMOUSERR 000080  SETMOUSEX  0000B1  SETMOUSMSG 000091   
SLOTSEARCH 000012  SMLOOP1    000085  SMLOOP2    00008F   
3178 00676B 0000                         Copy ProcessMouse.s 
3179 00676B 0000              ProcMouse  Start 
3180 00676B 0000                         Using Menu1Vars 
3181 00676B 0000               
3182 00676B 0000              * 
3183 00676B 0000              * Processing the mouse 
3184 00676B 0000              * 
3185 00676B 0000               
3186 00676B 0000              * Soft Switches 
3187 00676B 0000               
3188 00676B 0000              Off80Store equ  $C000 
3189 00676B 0000              On80Store  equ  $C001 
3190 00676B 0000              Read80Store equ $C018 
3191 00676B 0000              ReadPage2  equ  $C01C 
3192 00676B 0000              Page1      equ  $C054 
3193 00676B 0000              Page2      equ  $C055 
3194 00676B 0000               
3195 00676B 0000               
3196 00676B 0000 00           SaveChar   ds   1                       Saved character at X, Y 
3197 00676C 0001 00           X          ds   1                       X position 
3198 00676D 0002 00           Y          ds   1                       Y position 
3199 00676E 0003               
3200 00676E 0003              TextLine   anop                         Text screen line starting addresses 
3201 00676E 0003               
3202 00676E 0003 00 04        TextLine00 dc   i'$0400' 
3203 006770 0005 80 04        TextLine01 dc   i'$0480' 
3204 006772 0007 00 05        TextLine02 dc   i'$0500' 
3205 006774 0009 80 05        TextLine03 dc   i'$0580' 
3206 006776 000B 00 06        TextLine04 dc   i'$0600' 
3207 006778 000D 80 06        TextLine05 dc   i'$0680' 
3208 00677A 000F 00 07        TextLine06 dc   i'$0700' 
3209 00677C 0011 80 07        TextLine07 dc   i'$0780' 
3210 00677E 0013 28 04        TextLine08 dc   i'$0428' 
3211 006780 0015 A8 04        TextLine09 dc   i'$04A8' 
3212 006782 0017 28 05        TextLine10 dc   i'$0528' 
3213 006784 0019 A8 05        TextLine11 dc   i'$05A8' 
3214 006786 001B 28 06        TextLine12 dc   i'$0628' 
3215 006788 001D A8 06        TextLine13 dc   i'$06A8' 
3216 00678A 001F 28 07        TextLine14 dc   i'$0728' 
3217 00678C 0021 A8 07        TextLine15 dc   i'$07A8' 
3218 00678E 0023 50 04        TextLine16 dc   i'$0450' 
3219 006790 0025 D0 04        TextLine17 dc   i'$04D0' 
3220 006792 0027 50 05        TextLine18 dc   i'$0550' 
3221 006794 0029 D0 05        TextLine19 dc   i'$05D0' 
3222 006796 002B 50 06        TextLine20 dc   i'$0650' 
3223 006798 002D D0 06        TextLine21 dc   i'$06D0' 
3224 00679A 002F 50 07        TextLine22 dc   i'$0750' 
3225 00679C 0031 D0 07        TextLine23 dc   i'$07D0' 
3226 00679E 0033               
3227 00679E 0033              MouseArrow equ  $42                     Mouse arrow screen character 
3228 00679E 0033              MouseBusy  equ  $43                     Mouse hourglass screen character 
3229 00679E 0033               
3230 00679E 0033              * Move mouse cursor 
3231 00679E 0033               
3232 00679E 0033              MoveMouse  Entry 
3233 00679E 0033               
3234 00679E 0033 A5 09                   lda  MousePtr+1              Test for mouse 
3235 0067A0 0035 D0 01                   bne  MoveGo 
3236 0067A2 0037 60                      rts 
3237 0067A3 0038               
3238 0067A3 0038              MoveGo     anop 
3239 0067A3 0038               
3240 0067A3 0038 8D 01 C0                sta  On80Store               Turn on 80Store 
3241 0067A6 003B               
3242 0067A6 003B AD 02 00                lda  Y                       Get Old mouse Y position 
3243 0067A9 003E               
3244 0067A9 003E 0A                      asl  a                       Multiply by 2 for address indexing 
3245 0067AA 003F AA                      tax                          Move to index 
3246 0067AB 0040               
3247 0067AB 0040 BD 03 00                lda  TextLine,x              Get low byte of line address 
3248 0067AE 0043 85 06                   sta  Ptr1                     and save in Ptr1 
3249 0067B0 0045 E8                      inx 
3250 0067B1 0046 BD 03 00                lda  TextLine,x              Get high byte of line address 
3251 0067B4 0049 85 07                   sta  Ptr1+1                   and save in Ptr1+1 
3252 0067B6 004B               
3253 0067B6 004B              * Set up X position 
3254 0067B6 004B               
3255 0067B6 004B AD 01 00                lda  X 
3256 0067B9 004E               
3257 0067B9 004E 4A                      lsr  a 
3258 0067BA 004F A8                      tay 
3259 0067BB 0050               
3260 0067BB 0050 B0 05                   bcs  MainRAM1 
3261 0067BD 0052               
3262 0067BD 0052              * Even column numbers 0, 2, 4, 6, ... in aux RAM 
3263 0067BD 0052               
3264 0067BD 0052              AuxRAM1    anop 
3265 0067BD 0052               
3266 0067BD 0052 8D 55 C0                sta  Page2 
3267 0067C0 0055 80 03                   bra  RestoreChar 
3268 0067C2 0057               
3269 0067C2 0057              * Odd column numbers 1, 3, 5, 7, ... in main RAM 
3270 0067C2 0057               
3271 0067C2 0057              MainRAM1   anop 
3272 0067C2 0057               
3273 0067C2 0057 8D 54 C0                sta  Page1 
3274 0067C5 005A               
3275 0067C5 005A              RestoreChar anop 
3276 0067C5 005A               
3277 0067C5 005A AD 00 00                lda  SaveChar 
3278 0067C8 005D 91 06                   sta  (Ptr1),y 
3279 0067CA 005F               
3280 0067CA 005F 80 05                   bra  PlotGo 
3281 0067CC 0061               
3282 0067CC 0061              PlotMouse  Entry 
3283 0067CC 0061               
3284 0067CC 0061              * Set up Y position 
3285 0067CC 0061               
3286 0067CC 0061 A5 09                   lda  MousePtr+1              Test for mouse 
3287 0067CE 0063 D0 01                   bne  PlotGo 
3288 0067D0 0065 60                      rts 
3289 0067D1 0066               
3290 0067D1 0066              PlotGo     anop 
3291 0067D1 0066               
3292 0067D1 0066 8D 01 C0                sta  On80Store               Turn on 80Store 
3293 0067D4 0069               
3294 0067D4 0069 AD 86 08                lda  MouseY                  Get Mouse Y position 
3295 0067D7 006C 8D 02 00                sta  Y                       Save it 
3296 0067DA 006F               
3297 0067DA 006F 0A                      asl  a                       Multiply by 2 for address indexing 
3298 0067DB 0070 AA                      tax                          Move to index 
3299 0067DC 0071               
3300 0067DC 0071 BD 03 00                lda  TextLine,x              Get low byte of line address 
3301 0067DF 0074 85 06                   sta  Ptr1                     and save in Ptr1 
3302 0067E1 0076 E8                      inx 
3303 0067E2 0077 BD 03 00                lda  TextLine,x              Get high byte of line address 
3304 0067E5 007A 85 07                   sta  Ptr1+1                   and save in Ptr1+1 
3305 0067E7 007C               
3306 0067E7 007C              * Set up X position 
3307 0067E7 007C               
3308 0067E7 007C AD 84 08                lda  MouseX 
3309 0067EA 007F 8D 01 00                sta  X 
3310 0067ED 0082               
3311 0067ED 0082 4A                      lsr  a 
3312 0067EE 0083 A8                      tay 
3313 0067EF 0084               
3314 0067EF 0084 B0 05                   bcs  MainRAM2 
3315 0067F1 0086               
3316 0067F1 0086              * Even column numbers 0, 2, 4, 6, ... in aux RAM 
3317 0067F1 0086               
3318 0067F1 0086              AuxRAM2    anop 
3319 0067F1 0086               
3320 0067F1 0086 8D 55 C0                sta  Page2 
3321 0067F4 0089 80 03                   bra  GetChar 
3322 0067F6 008B               
3323 0067F6 008B              * Odd column numbers 1, 3, 5, 7, ... in main RAM 
3324 0067F6 008B               
3325 0067F6 008B              MainRAM2   anop 
3326 0067F6 008B               
3327 0067F6 008B 8D 54 C0                sta  Page1 
3328 0067F9 008E               
3329 0067F9 008E              GetChar    anop 
3330 0067F9 008E               
3331 0067F9 008E B1 06                   lda  (Ptr1),y 
3332 0067FB 0090 C9 42                   cmp  #MouseArrow 
3333 0067FD 0092 F0 07                   beq  DontSave 
3334 0067FF 0094 C9 43                   cmp  #MouseBusy 
3335 006801 0096 F0 03                   beq  DontSave 
3336 006803 0098               
3337 006803 0098 8D 00 00                sta  SaveChar 
3338 006806 009B               
3339 006806 009B              DontSave   anop 
3340 006806 009B               
3341 006806 009B A9 42                   lda  #MouseArrow 
3342 006808 009D 91 06                   sta  (Ptr1),y 
3343 00680A 009F               
3344 00680A 009F 8D 54 C0                sta  Page1 
3345 00680D 00A2               
3346 00680D 00A2 60                      rts 
3347 00680E 00A3               
3348 00680E 00A3              * 
3349 00680E 00A3              * Mouse button down 
3350 00680E 00A3              * 
3351 00680E 00A3               
3352 00680E 00A3              ButtonDown entry 
3353 00680E 00A3               
3354 00680E 00A3 9C 00 80                stz  blnDblClick             Reset double click indicator. 
3355 006811 00A6 AD 8C 08                lda  MouseStat               Button is down but make sure he has also 
3356 006814 00A9 89 40                   bit  #PrevButton             released it and is not holding it down. 
3357 006816 00AB F0 11                   beq  NotHeld 
3358 006818 00AD               
3359 006818 00AD AD BD 00                lda  HoldCnt                 Check to see how long he's held down the 
3360 00681B 00B0 C9 FF                   cmp  #$FF                    mouse button. 
3361 00681D 00B2 F0 0D                   beq  Repeat                  Long enough so he's repeating. 
3362 00681F 00B4               
3363 00681F 00B4 EE BD 00                inc  HoldCnt                 Hasn't held it long enough yet so count 
3364 006822 00B7 A9 01                   lda  #$01                    the hold and return. 
3365 006824 00B9 20 A8 FC                jsr  Wait 
3366 006827 00BC               
3367 006827 00BC 60                      rts 
3368 006828 00BD               
3369 006828 00BD 00           HoldCnt    ds   1 
3370 006829 00BE               
3371 006829 00BE              NotHeld    anop 
3372 006829 00BE               
3373 006829 00BE 9C BD 00                stz  HoldCnt                 Zero out counter upon first button press 
3374 00682C 00C1               
3375 00682C 00C1              Repeat     anop 
3376 00682C 00C1               
3377 00682C 00C1              * Disks button 
3378 00682C 00C1               
3379 00682C 00C1              OnDisksBtn anop 
3380 00682C 00C1               
3381 00682C 00C1 AD 86 08                lda  MouseY                  Check to see if he pressed the Disks 
3382 00682F 00C4 C9 0A                   cmp  #11-1                   button. 
3383 006831 00C6 D0 14                   bne  OnOpenBtn 
3384 006833 00C8               
3385 006833 00C8 AD 84 08                lda  MouseX 
3386 006836 00CB C9 30                   cmp  #49-1 
3387 006838 00CD 90 0D                   bcc  OnOpenBtn 
3388 00683A 00CF C9 3A                   cmp  #59-1 
3389 00683C 00D1 B0 09                   bcs  OnOpenBtn 
3390 00683E 00D3               
3391 00683E 00D3 9C 00 80                stz  TabIndex                Move TabIndex to Disks button. 
3392 006841 00D6 A9 00                   lda  #TabOnly 
3393 006843 00D8 8D 00 80                sta  RC 
3394 006846 00DB               
3395 006846 00DB 60                      rts 
3396 006847 00DC               
3397 006847 00DC              * Open button 
3398 006847 00DC               
3399 006847 00DC              OnOpenBtn  anop 
3400 006847 00DC               
3401 006847 00DC AD 86 08                lda  MouseY                  Check to see if he pressed the Open 
3402 00684A 00DF C9 0D                   cmp  #14-1                   button. 
3403 00684C 00E1 D0 16                   bne  OnCloseBtn 
3404 00684E 00E3               
3405 00684E 00E3 AD 84 08                lda  MouseX 
3406 006851 00E6 C9 30                   cmp  #49-1 
3407 006853 00E8 90 0F                   bcc  OnCloseBtn 
3408 006855 00EA C9 3A                   cmp  #59-1 
3409 006857 00EC B0 0B                   bcs  OnCloseBtn 
3410 006859 00EE               
3411 006859 00EE A9 00                   lda  #OpenBtn                Move TabIndex to Open button. 
3412 00685B 00F0 8D 00 80                sta  TabIndex 
3413 00685E 00F3 A9 00                   lda  #TabOnly 
3414 006860 00F5 8D 00 80                sta  RC 
3415 006863 00F8               
3416 006863 00F8 60                      rts 
3417 006864 00F9               
3418 006864 00F9              * Close button 
3419 006864 00F9               
3420 006864 00F9              OnCloseBtn anop 
3421 006864 00F9               
3422 006864 00F9 AD 86 08                lda  MouseY                  Check to see if he pressed the Close 
3423 006867 00FC C9 0F                   cmp  #16-1                   button. 
3424 006869 00FE D0 16                   bne  OnCancelBtn 
3425 00686B 0100               
3426 00686B 0100 AD 84 08                lda  MouseX 
3427 00686E 0103 C9 30                   cmp  #49-1 
3428 006870 0105 90 0F                   bcc  OnCancelBtn 
3429 006872 0107 C9 3A                   cmp  #59-1 
3430 006874 0109 B0 0B                   bcs  OnCancelBtn 
3431 006876 010B               
3432 006876 010B A9 00                   lda  #CloseBtn               Move TabIndex to Close button. 
3433 006878 010D 8D 00 80                sta  TabIndex 
3434 00687B 0110 A9 00                   lda  #TabOnly 
3435 00687D 0112 8D 00 80                sta  RC 
3436 006880 0115               
3437 006880 0115 60                      rts 
3438 006881 0116               
3439 006881 0116              * Cancel button 
3440 006881 0116               
3441 006881 0116              OnCancelBtn anop 
3442 006881 0116               
3443 006881 0116 AD 86 08                lda  MouseY                  Check to see if he pressed the Cancel 
3444 006884 0119 C9 11                   cmp  #18-1                   button. 
3445 006886 011B D0 16                   bne  OnFileList 
3446 006888 011D               
3447 006888 011D AD 84 08                lda  MouseX 
3448 00688B 0120 C9 30                   cmp  #49-1 
3449 00688D 0122 90 0F                   bcc  OnFileList 
3450 00688F 0124 C9 3A                   cmp  #59-1 
3451 006891 0126 B0 0B                   bcs  OnFileList 
3452 006893 0128               
3453 006893 0128 A9 00                   lda  #CancelBtn              Move TabIndex to Cancel button. 
3454 006895 012A 8D 00 80                sta  TabIndex 
3455 006898 012D A9 00                   lda  #TabOnly 
3456 00689A 012F 8D 00 80                sta  RC 
3457 00689D 0132               
3458 00689D 0132 60                      rts 
3459 00689E 0133               
3460 00689E 0133              * 
3461 00689E 0133              * Changing Current File Selection 
3462 00689E 0133              * 
3463 00689E 0133               
3464 00689E 0133              OnFileList anop 
3465 00689E 0133               
3466 00689E 0133 AD 86 08                lda  MouseY                  Check to see if he click inside the file 
3467 0068A1 0136 C9 0A                   cmp  #11-1                   list box. 
3468 0068A3 0138 90 4A                   bcc  ScrollDown 
3469 0068A5 013A C9 12                   cmp  #19-1 
3470 0068A7 013C B0 46                   bcs  ScrollDown 
3471 0068A9 013E               
3472 0068A9 013E AD 84 08                lda  MouseX 
3473 0068AC 0141 C9 19                   cmp  #26-1 
3474 0068AE 0143 90 3F                   bcc  ScrollDown 
3475 0068B0 0145 C9 2C                   cmp  #45-1 
3476 0068B2 0147 B0 3B                   bcs  ScrollDown 
3477 0068B4 0149               
3478 0068B4 0149 38                      sec 
3479 0068B5 014A AD 86 08                lda  MouseY                  Calculate the requested line number by 
3480 0068B8 014D E9 09                   sbc  #9                      taking the mouse position and subtract 
3481 0068BA 014F 8D 83 01                sta  Requested               9 for a 1-8 line number. 
3482 0068BD 0152               
3483 0068BD 0152 AD 01 80                lda  FileCount+1             Check here to see if the line he is 
3484 0068C0 0155 D0 0B                   bne  LineOk                  asking for exists on the screen. 
3485 0068C2 0157               
3486 0068C2 0157 AD 83 01                lda  Requested 
3487 0068C5 015A CD 00 80                cmp  FileCount 
3488 0068C8 015D 90 03                   bcc  LineOk 
3489 0068CA 015F F0 01                   beq  LineOk 
3490 0068CC 0161               
3491 0068CC 0161 60                      rts                          No, he's clicking on a blank line. 
3492 0068CD 0162               
3493 0068CD 0162              LineOk     anop 
3494 0068CD 0162               
3495 0068CD 0162 AD 83 01                lda  Requested               Good line so check to see if he is 
3496 0068D0 0165 CD 00 80                cmp  SelectLine              double clicking on a already selected 
3497 0068D3 0168 F0 09                   beq  DoDblClick              line. 
3498 0068D5 016A               
3499 0068D5 016A 8D 00 80                sta  SelectLine              No, so select this line and refresh. 
3500 0068D8 016D               
3501 0068D8 016D A9 00                   lda  #NoDirChange 
3502 0068DA 016F 8D 00 80                sta  RC 
3503 0068DD 0172               
3504 0068DD 0172 60                      rts 
3505 0068DE 0173               
3506 0068DE 0173              DoDblClick anop 
3507 0068DE 0173               
3508 0068DE 0173 A9 00                   lda  #OpenBtn                Double clicking so set TabIndex to Open 
3509 0068E0 0175 8D 00 80                sta  TabIndex                and try opening it. 
3510 0068E3 0178               
3511 0068E3 0178 A9 01                   lda  #1 
3512 0068E5 017A 8D 00 80                sta  blnDblClick             Tell MENU1UI that we're double clicking 
3513 0068E8 017D               
3514 0068E8 017D A9 00                   lda  #DirChange 
3515 0068EA 017F 8D 00 80                sta  RC 
3516 0068ED 0182               
3517 0068ED 0182 60                      rts 
3518 0068EE 0183               
3519 0068EE 0183 00           Requested  ds   1 
3520 0068EF 0184               
3521 0068EF 0184              * 
3522 0068EF 0184              * Scroll down 1 file 
3523 0068EF 0184              * 
3524 0068EF 0184               
3525 0068EF 0184              ScrollDown anop 
3526 0068EF 0184               
3527 0068EF 0184 AD 86 08                lda  MouseY 
3528 0068F2 0187 C9 11                   cmp  #18-1 
3529 0068F4 0189 D0 2E                   bne  ScrollUp 
3530 0068F6 018B               
3531 0068F6 018B AD 84 08                lda  MouseX 
3532 0068F9 018E C9 2D                   cmp  #46-1 
3533 0068FB 0190 D0 27                   bne  ScrollUp 
3534 0068FD 0192               
3535 0068FD 0192 AD 00 80                lda  SelectLine 
3536 006900 0195 C9 08                   cmp  #8                      At bottom of window? 
3537 006902 0197 F0 0F                   beq  SD01                    Yes. 
3538 006904 0199               
3539 006904 0199 AD 01 80                lda  FileCount+1 
3540 006907 019C D0 12                   bne  SD02 
3541 006909 019E               
3542 006909 019E AD 00 80                lda  FileCount 
3543 00690C 01A1 CD 00 80                cmp  SelectLine 
3544 00690F 01A4 F0 12                   beq  NoMoreBelow 
3545 006911 01A6 80 08                   bra  SD02 
3546 006913 01A8               
3547 006913 01A8              SD01       anop 
3548 006913 01A8               
3549 006913 01A8 AD 01 80                lda  LinesBelow+1 
3550 006916 01AB 0D 00 80                ora  LinesBelow 
3551 006919 01AE F0 08                   beq  NoMoreBelow 
3552 00691B 01B0               
3553 00691B 01B0              SD02       anop 
3554 00691B 01B0               
3555 00691B 01B0 EE 00 80                inc  SelectLine 
3556 00691E 01B3               
3557 00691E 01B3 A9 00                   lda  #NoDirChange 
3558 006920 01B5 8D 00 80                sta  RC 
3559 006923 01B8               
3560 006923 01B8              NoMoreBelow anop 
3561 006923 01B8               
3562 006923 01B8 60                      rts 
3563 006924 01B9               
3564 006924 01B9              ScrollUp   anop 
3565 006924 01B9               
3566 006924 01B9 AD 86 08                lda  MouseY 
3567 006927 01BC C9 0A                   cmp  #11-1 
3568 006929 01BE D0 1F                   bne  OnPathDDL 
3569 00692B 01C0               
3570 00692B 01C0 AD 84 08                lda  MouseX 
3571 00692E 01C3 C9 2D                   cmp  #46-1 
3572 006930 01C5 D0 18                   bne  OnPathDDL 
3573 006932 01C7               
3574 006932 01C7 AD 00 80                lda  SelectLine 
3575 006935 01CA C9 01                   cmp  #1 
3576 006937 01CC D0 08                   bne  SU01 
3577 006939 01CE               
3578 006939 01CE AD 01 80                lda  LinesAbove+1 
3579 00693C 01D1 0D 00 80                ora  LinesAbove 
3580 00693F 01D4 F0 08                   beq  NoMoreAbove 
3581 006941 01D6               
3582 006941 01D6              SU01       anop 
3583 006941 01D6               
3584 006941 01D6 CE 00 80                dec  SelectLine 
3585 006944 01D9               
3586 006944 01D9 A9 00                   lda  #NoDirChange 
3587 006946 01DB 8D 00 80                sta  RC 
3588 006949 01DE               
3589 006949 01DE              NoMoreAbove anop 
3590 006949 01DE               
3591 006949 01DE 60                      rts 
3592 00694A 01DF               
3593 00694A 01DF              OnPathDDL  anop 
3594 00694A 01DF               
3595 00694A 01DF AD 00 08                lda  Prefix 
3596 00694D 01E2 F0 1D                   beq  PDDLExit 
3597 00694F 01E4               
3598 00694F 01E4 AD 86 08                lda  MouseY 
3599 006952 01E7 C9 08                   cmp  #9-1 
3600 006954 01E9 D0 17                   bne  OnNowhere 
3601 006956 01EB               
3602 006956 01EB AD 84 08                lda  MouseX 
3603 006959 01EE C9 16                   cmp  #23-1 
3604 00695B 01F0 90 10                   bcc  OnNowhere 
3605 00695D 01F2               
3606 00695D 01F2 C9 2B                   cmp  #44-1 
3607 00695F 01F4 B0 0C                   bcs  OnNoWhere 
3608 006961 01F6               
3609 006961 01F6 A9 00                   lda  #VolDirPull 
3610 006963 01F8 8D 00 80                sta  TabIndex 
3611 006966 01FB               
3612 006966 01FB 20 00 80                jsr  RefreshBtn 
3613 006969 01FE               
3614 006969 01FE 20 00 80                jsr  PathDDL 
3615 00696C 0201               
3616 00696C 0201              PDDLExit   anop 
3617 00696C 0201               
3618 00696C 0201 60                      rts 
3619 00696D 0202               
3620 00696D 0202              OnNowhere  anop 
3621 00696D 0202               
3622 00696D 0202 60                      rts 
3623 00696E 0203              * 
3624 00696E 0203              * Mouse Button Release 
3625 00696E 0203              * 
3626 00696E 0203               
3627 00696E 0203              ButtonUp   entry 
3628 00696E 0203               
3629 00696E 0203              AtDisksBtn anop 
3630 00696E 0203               
3631 00696E 0203 AD 86 08                lda  MouseY 
3632 006971 0206 C9 0A                   cmp  #11-1 
3633 006973 0208 D0 16                   bne  AtOpenBtn 
3634 006975 020A               
3635 006975 020A AD 84 08                lda  MouseX 
3636 006978 020D C9 30                   cmp  #49-1 
3637 00697A 020F 90 0F                   bcc  AtOpenBtn 
3638 00697C 0211 C9 3A                   cmp  #59-1 
3639 00697E 0213 B0 0B                   bcs  AtOpenBtn 
3640 006980 0215               
3641 006980 0215 AD 00 80                lda  TabIndex 
3642 006983 0218 D0 05                   bne  AtDisksExit 
3643 006985 021A               
3644 006985 021A A9 00                   lda  #DirChange 
3645 006987 021C 8D 00 80                sta  RC 
3646 00698A 021F               
3647 00698A 021F              AtDisksExit anop 
3648 00698A 021F               
3649 00698A 021F 60                      rts 
3650 00698B 0220               
3651 00698B 0220              AtOpenBtn  anop 
3652 00698B 0220               
3653 00698B 0220 AD 86 08                lda  MouseY 
3654 00698E 0223 C9 0D                   cmp  #14-1 
3655 006990 0225 D0 18                   bne  AtCloseBtn 
3656 006992 0227               
3657 006992 0227 AD 84 08                lda  MouseX 
3658 006995 022A C9 30                   cmp  #49-1 
3659 006997 022C 90 11                   bcc  AtCloseBtn 
3660 006999 022E C9 3A                   cmp  #59-1 
3661 00699B 0230 B0 0D                   bcs  AtCloseBtn 
3662 00699D 0232               
3663 00699D 0232 AD 00 80                lda  TabIndex 
3664 0069A0 0235 C9 00                   cmp  #OpenBtn 
3665 0069A2 0237 D0 05                   bne  AtOpenExit 
3666 0069A4 0239               
3667 0069A4 0239 A9 00                   lda  #DirChange 
3668 0069A6 023B 8D 00 80                sta  RC 
3669 0069A9 023E               
3670 0069A9 023E              AtOpenExit anop 
3671 0069A9 023E               
3672 0069A9 023E 60                      rts 
3673 0069AA 023F               
3674 0069AA 023F              AtCloseBtn anop 
3675 0069AA 023F               
3676 0069AA 023F AD 86 08                lda  MouseY 
3677 0069AD 0242 C9 0F                   cmp  #16-1 
3678 0069AF 0244 D0 18                   bne  AtCancelBtn 
3679 0069B1 0246               
3680 0069B1 0246 AD 84 08                lda  MouseX 
3681 0069B4 0249 C9 30                   cmp  #49-1 
3682 0069B6 024B 90 11                   bcc  AtCancelBtn 
3683 0069B8 024D C9 3A                   cmp  #59-1 
3684 0069BA 024F B0 0D                   bcs  AtCancelBtn 
3685 0069BC 0251               
3686 0069BC 0251 AD 00 80                lda  TabIndex 
3687 0069BF 0254 C9 00                   cmp  #CloseBtn 
3688 0069C1 0256 D0 05                   bne  AtCloseExit 
3689 0069C3 0258               
3690 0069C3 0258 A9 00                   lda  #DirChange 
3691 0069C5 025A 8D 00 80                sta  RC 
3692 0069C8 025D               
3693 0069C8 025D              AtCloseExit anop 
3694 0069C8 025D               
3695 0069C8 025D 60                      rts 
3696 0069C9 025E               
3697 0069C9 025E              AtCancelBtn anop 
3698 0069C9 025E               
3699 0069C9 025E AD 86 08                lda  MouseY 
3700 0069CC 0261 C9 11                   cmp  #18-1 
3701 0069CE 0263 D0 18                   bne  AtNoBtn 
3702 0069D0 0265               
3703 0069D0 0265 AD 84 08                lda  MouseX 
3704 0069D3 0268 C9 30                   cmp  #49-1 
3705 0069D5 026A 90 11                   bcc  AtNoBtn 
3706 0069D7 026C C9 3A                   cmp  #59-1 
3707 0069D9 026E B0 0D                   bcs  AtNoBtn 
3708 0069DB 0270               
3709 0069DB 0270 AD 00 80                lda  TabIndex 
3710 0069DE 0273 C9 00                   cmp  #CancelBtn 
3711 0069E0 0275 D0 05                   bne  AtCancelExit 
3712 0069E2 0277               
3713 0069E2 0277 A9 00                   lda  #Quit 
3714 0069E4 0279 8D 00 80                sta  RC 
3715 0069E7 027C               
3716 0069E7 027C              AtCancelExit anop 
3717 0069E7 027C               
3718 0069E7 027C 60                      rts 
3719 0069E8 027D               
3720 0069E8 027D              AtNoBtn    anop 
3721 0069E8 027D               
3722 0069E8 027D 60                      rts 
3723 0069E9 027E               
3724 0069E9 027E                         End 
 
 
 
Local  Symbols
 
ATCANCELBT 00025E  ATCANCELEX 00027C  ATCLOSEBTN 00023F  ATCLOSEEXI 00025D   
ATDISKSBTN 000203  ATDISKSEXI 00021F  ATNOBTN    00027D  ATOPENBTN  000220   
ATOPENEXIT 00023E  AUXRAM1    000052  AUXRAM2    000086  BUTTONDOWN 0000A3   
BUTTONUP   000203  DODBLCLICK 000173  DONTSAVE   00009B  GETCHAR    00008E   
HOLDCNT    0000BD  LINEOK     000162  MAINRAM1   000057  MAINRAM2   00008B   
MOUSEARROW 000042  MOUSEBUSY  000043  MOVEGO     000038  MOVEMOUSE  000033   
NOMOREABOV 0001DE  NOMOREBELO 0001B8  NOTHELD    0000BE  OFF80STORE 00C000   
ON80STORE  00C001  ONCANCELBT 000116  ONCLOSEBTN 0000F9  ONDISKSBTN 0000C1   
ONFILELIST 000133  ONNOWHERE  000202  ONOPENBTN  0000DC  ONPATHDDL  0001DF   
PAGE1      00C054  PAGE2      00C055  PDDLEXIT   000201  PLOTGO     000066   
PLOTMOUSE  000061  READ80STOR 00C018  READPAGE2  00C01C  REPEAT     0000C1   
REQUESTED  000183  RESTORECHA 00005A  SAVECHAR   000000  SCROLLDOWN 000184   
SCROLLUP   0001B9  SD01       0001A8  SD02       0001B0  SU01       0001D6   
TEXTLINE   000003  TEXTLINE00 000003  TEXTLINE01 000005  TEXTLINE02 000007   
TEXTLINE03 000009  TEXTLINE04 00000B  TEXTLINE05 00000D  TEXTLINE06 00000F   
TEXTLINE07 000011  TEXTLINE08 000013  TEXTLINE09 000015  TEXTLINE10 000017   
TEXTLINE11 000019  TEXTLINE12 00001B  TEXTLINE13 00001D  TEXTLINE14 00001F   
TEXTLINE15 000021  TEXTLINE16 000023  TEXTLINE17 000025  TEXTLINE18 000027   
TEXTLINE19 000029  TEXTLINE20 00002B  TEXTLINE21 00002D  TEXTLINE22 00002F   
TEXTLINE23 000031  X          000001  Y          000002   
 
 
 
Global Symbols
 
A1H        00003D  A1L        00003C  A2H        00003F  A2L        00003E   
A4H        000043  A4L        000042  ACC        000084  APPLEKEY   00C061   
AUX        000086  AUXMOVE    00C311  AUXTYPE    000881  BUF512A    001400   
BUF512B    001500  BUFFER512  000900  CLEARKBD   00C010  CLOSEREF   0008FF   
CURRBUTTON 000080  EXT        000088  FILETYPE   000880  GETEOFEOF  0008F4   
GETEOFREF  0008FE  HIGHCLAMP  00088A  HOME       00FC58  HTAB       000024   
INIT80     00C300  INVERSE    00000F  KEYBOARD   00C000  LOWCLAMP   000888   
MESSAGEBUF 001200  MOUSEMODE  00088D  MOUSEMOVE  000020  MOUSEPTR   000008   
MOUSESTAT  00088C  MOUSETEXT  00001B  MOUSEX     000884  MOUSEY     000886   
MSGPTR     000082  NETDEVCNT  0008DE  NETDEVS    0008DF  NORMAL     00000E   
ONLINEBUF  000B00  ONLINEUNIT 0008F7  OPENBUF1   000900  OPENREF1   0008FC   
OPTIONKEY  00C062  PATH       000840  PRBYTE     00FDDA  PREFIX     000800   
PREVBUTTON 000040  PRHEX      00FDE3  PTR1       000006  PTR2       000080   
PTR3       000082  READBUF    001000  READBUFE   001200  READREF    0008FD   
READREQUES 0008F8  READTRANS  0008FA  SETMARKPOS 0008F1  SETMARKREF 0008F0   
STDTEXT    000018  TEXTMODE   000883  TEXTPTR    00008A  VTAB       000025   
WAIT       00FCA8  WNDBOTTOM  000023  WNDLEFT    000020  WNDTOP     000022   
WNDWIDTH   000021  WRBLKBLOCK 0008EE  WRBLKDATAB 001400  WRBLKUNIT  0008ED   
 
13724 source lines
0 macros expanded
0 lines generated
0 page faults
Link Editor V4.1

00002000  00000000  Data:  GLOBALVARS
00002000  00000014  Code:  MAIN      
00002014  000000C1  Code:  INITIALIZE
000020D5  000000B9  Code:  RAMOUT    
0000218E  000000FB  Code:  SYSTEMCHEC
00002289  000000B0  Code:  SETBACKGRN
00002339  00000009  Code:  CLEANUP   
00002342  00000405  Code:  MENU1     
00002747  0000005A  Data:  MENU1VARS 
000027A1  00000392  Code:  MENU1UI   
00002B33  000003BC  Code:  PAINTMENU1
00002EEF  00000130  Code:  PRTFILENAM
0000301F  00000292  Code:  LOADDIRECT
000032B1  00000194  Data:  FILETYPES 
00003445  0000033B  Code:  PATHDDL   
00003780  000002B1  Code:  MENU2     
00003A31  00000046  Data:  MENU2VARS 
00003A77  0000021F  Code:  SETIMGTYPE
00003C96  00000367  Code:  PAINTMENU2
00003FFD  00000404  Code:  LOADDEVS  
00004401  000002CC  Code:  PRTIMGTYPE
000046CD  00000056  Code:  SAMESIZERT
00004723  000003D9  Code:  MENU2UI   
00004AFC  00000474  Code:  ABOUT     
00004F70  00000960  Code:  PROCESSIMG
00005900  0000021D  Code:  HYPERFORMA
00005B1D  0000002A  Code:  MLIONLINE 
00005B47  00000013  Code:  MLIGETPREF
00005B5A  00000013  Code:  MLISETPREF
00005B6D  0000001E  Code:  MLIOPEN1  
00005B8B  0000002F  Code:  MLISETMARK
00005BBA  0000003E  Code:  MLIREAD   
00005BF8  0000003A  Code:  MLIREAD4K 
00005C32  0000003C  Code:  MLIWRITEBL
00005C6E  00000031  Code:  MLIGETEOF 
00005C9F  00000018  Code:  MLICLOSE  
00005CB7  0000000D  Code:  MLIQUIT   
00005CC4  00000077  Code:  MLIERROR  
00005D3B  0000001C  Code:  BEEP      
00005D57  00000770  Code:  MESSAGEBOX
000064C7  00000025  Code:  DIVIDE    
000064EC  000000DD  Code:  COUT      
000065C9  000001A2  Code:  APPLEMOUSE
0000676B  0000027E  Code:  PROCMOUSE 


Global symbol table:

A1H        0000003D 00  A1L        0000003C 00  A2H        0000003F 00  
A2L        0000003E 00  A4H        00000043 00  A4L        00000042 00  
ABOUT      00004AFC 00  ABOUTBTN   00000000 04  ABOUTTEXT  00003A3B 04  
ABOVE      00003A32 04  ACC        00000084 00  APPLEKEY   0000C061 00  
APPLEMOUSE 000065C9 00  ASCIITABLE 00003A5F 04  AUX        00000086 00  
AUXMOVE    0000C311 00  AUXTYPE    00000881 00  BEEP       00005D3B 00  
BELOW      00003A33 04  BLNDBLCLIC 0000277C 02  BLNSIZE    00003A76 04  
BUF512A    00001400 00  BUF512B    00001500 00  BUFFER512  00000900 00  
BUFFER8K   00009000 04  BUTTONDOWN 0000680E 00  BUTTONTEXT 0000277D 02  
BUTTONUP   0000696E 00  CANCELBTN  00000003 02  CANCELMSG  00002798 02  
CLAMPMOUSE 0000670C 00  CLEANUP    00002339 00  CLEARKBD   0000C010 00  
CLEARMENU1 00002EC9 00  CLEARMENU2 00003FD7 00  CLEARMOUSE 000066C9 00  






CLOSEBTN   00000002 02  CLOSEMSG   0000278F 02  CLOSEREF   000008FF 00  
COUT       000064EC 00  CURRBLOCK  00003A74 04  CURRBUTTON 00000080 00  
CURRPAGE   0000274A 02  DEVENTCNT  00003A31 04  DIRCHANGE  00000004 02  
DISKIIDEV  00000000 04  DISKSBTN   00000000 02  DISKSMSG   0000277D 02  
DIVIDE     000064C7 00  DOWNREQ    00002848 00  ENDBLOCK   00003A72 04  
EXT        00000088 00  FILECOUNT  00002748 02  FILETYPE   00000880 00  
FILETYPES  000032B1 03  FILETYPESE 00003445 03  FINDMOUSE  000065CC 00  
FSTADDR    00003A34 04  GETBLOCK   000024CD 00  GETEOFEOF  000008F4 00  
GETEOFREF  000008FE 00  GETIMGSIZE 0000396F 00  GLOBALVARS 00002000 01  
HIGHCLAMP  0000088A 00  HOME       0000FC58 00  HOMEMOUSE  0000673A 00  
HTAB       00000024 00  HYPERFORMA 00005900 00  IMAGESIZE  00003A70 04  
IMAGETYPE  00003A6F 04  IMGTYPEBOX 00000003 04  INIT80     0000C300 00  
INITIALIZE 00002014 00  INITMOUSE  0000674E 00  INVERSE    0000000F 00  
KEYBOARD   0000C000 00  LINECOUNT  0000274B 02  LINESABOVE 00002750 02  
LINESBELOW 00002752 02  LOADDEVS   00003FFD 00  LOADDIRECT 0000301F 00  
LOOPBACK   00000005 02  LOOPBACK2  00000005 04  LOWCLAMP   00000888 00  
M2BTNTEXT  00003A3B 04  MAIN       00002000 00  MAKEBTN    00000002 04  
MAKETEXT   00003A53 04  MAKINGDISK 00000005 04  MENU1      00002342 00  
MENU1UI    000027A1 00  MENU1VARS  00002747 02  MENU2      00003780 00  
MENU2UI    00004723 00  MENU2VARS  00003A31 04  MESSAGEBOX 00005D57 00  
MESSAGEBUF 00001200 00  MLICLOSE   00005C9F 00  MLIERROR   00005CC4 00  
MLIGETEOF  00005C6E 00  MLIGETPREF 00005B47 00  MLIONLINE  00005B1D 00  
MLIOPEN1   00005B6D 00  MLIQUIT    00005CB7 00  MLIREAD    00005BBA 00  
MLIREAD4K  00005BF8 00  MLISETMARK 00005B8B 00  MLISETPREF 00005B5A 00  
MLIWRITEBL 00005C32 00  MOUSEMODE  0000088D 00  MOUSEMOVE  00000020 00  
MOUSEPTR   00000008 00  MOUSESTAT  0000088C 00  MOUSETEXT  0000001B 00  
MOUSEX     00000884 00  MOUSEY     00000886 00  MOVEMOUSE  0000679E 00  
MSGBOOTCAN 00005EA9 00  MSGFMTCAN1 00005E5B 00  MSGFMTCAN2 00005E81 00  
MSGOK      00005D9F 00  MSGOKCAN1  00005DBF 00  MSGOKCAN2  00005DE5 00  
MSGPTR     00000082 00  MSGRETCAN1 00005E0D 00  MSGRETCAN2 00005E33 00  
NETDEVCNT  000008DE 00  NETDEVS    000008DF 00  NODIRCHANG 00000002 02  
NORMAL     0000000E 00  NOTHING    00000004 04  ODEVTYPE   00000019 04  
ODRIVE     00000001 04  OENTRYLEN  0000001A 04  ONLINEBUF  00000B00 00  
ONLINEUNIT 000008F7 00  OPENBTN    00000001 02  OPENBUF1   00000900 00  
OPENMSG    00002786 02  OPENREF1   000008FC 00  OPTIONKEY  0000C062 00  
OSIZE      00000011 04  OSIZEHEX   00000017 04  OSLOT      00000000 04  
OUNIT      00000015 04  OUNITNO    00000016 04  OVOLUME    00000002 04  
PAINTMENU1 00002B33 00  PAINTMENU2 00003C96 00  PATH       00000840 00  
PATHDDL    00003445 00  PLOTMOUSE  000067CC 00  POSMOUSE   000066DD 00  
PRBYTE     0000FDDA 00  PREFIX     00000800 00  PREVBUTTON 00000040 00  
PRHEX      0000FDE3 00  PROCESSIMG 00004F70 00  PROCMOUSE  0000676B 00  
PRTFILENAM 00002EEF 00  PRTIMGTYPE 00004401 00  PRTSAMESIZ 000046CD 00  
PTR1       00000006 00  PTR2       00000080 00  PTR3       00000082 00  
QUIT       00000001 02  QUIT2      00000001 04  RAMIN      00002132 00  
RAMOUT     000020D5 00  RC         00002747 02  RC2        00003A3A 04  
READBUF    00001000 00  READBUFE   00001200 00  READMOUSE  0000668E 00  
READREF    000008FD 00  READREQUES 000008F8 00  READTRANS  000008FA 00  
REFRESH2BT 00003901 00  REFRESHBTN 000026E8 00  RELOADDEVS 00000002 04  
REMAPDEV   00000002 04  SAMESIZE   00000004 04  SAMESIZERT 000046CD 00  
SELADDR    00003A37 04  SELECTADDR 0000274E 02  SELECTLINE 0000274C 02  
SELECTPAGE 0000274D 02  SELIMGTYPE 00004496 00  SELLINE    00003A36 04  
SERVEMOUSE 0000667A 00  SETBACKGRN 00002289 00  SETIMGTYPE 00003A77 00  
SETINV     000065BF 00  SETMARKPOS 000008F1 00  SETMARKREF 000008F0 00  
SETMOUSE   00006622 00  SETNORM    000065C4 00  SETVTAB    000065BE 00  
SKIPBTN    00000001 04  SKIPTEXT   00003A47 04  SMARTDEV   00000001 04  
STDTEXT    00000018 00  SYSTEMCHEC 0000218E 00  TABINDEX   00002754 02  
TABINDEX2  00003A39 04  TABONLY    00000008 02  TEXTMODE   00000883 00  
TEXTPTR    0000008A 00  TOGGLESIZE 00004710 00  TYPE_2IMG  00000000 04  
TYPE_DC    00000001 04  TYPE_DC6   00000002 04  TYPE_DO    00000004 04  
TYPE_PO    00000003 04  UPDDEVLST  00000003 04  UPREQ      00002887 00  






VOLDIRPULL 00000004 02  VOLHEADER  00002755 02  VTAB       00000025 00  
WAIT       0000FCA8 00  WNDBOTTOM  00000023 00  WNDLEFT    00000020 00  
WNDTOP     00000022 00  WNDWIDTH   00000021 00  WRBLKBLOCK 000008EE 00  
WRBLKDATAB 00001400 00  WRBLKUNIT  000008ED 00  WRITE      0000594B 00  
WRITEERROR 0000564C 00  

Program starts at $00002000 and is $000049E9 bytes long.
